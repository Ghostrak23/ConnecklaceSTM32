
Connecklace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d24  08017208  08017208  00027208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018f2c  08018f2c  00028f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018f34  08018f34  00028f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018f38  08018f38  00028f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000040c  20000008  08018f3c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000414  08019348  00030414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000c98  08019bcb  00030c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000cd0  08019c00  00030cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000085c  20000ce4  08019c11  00030ce4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001540  08019c11  00031540  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030ce1  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 15 .debug_info   0005f8ca  00000000  00000000  00030d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008d54  00000000  00000000  000905db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004f88  00000000  00000000  00099330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00004bf0  00000000  00000000  0009e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032834  00000000  00000000  000a2ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00049577  00000000  00000000  000d56dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001190d9  00000000  00000000  0011ec53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00237d2c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00016888  00000000  00000000  00237d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000ce4 	.word	0x20000ce4
 800015c:	00000000 	.word	0x00000000
 8000160:	080171f0 	.word	0x080171f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000ce8 	.word	0x20000ce8
 800017c:	080171f0 	.word	0x080171f0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <APPD_EnableCPU2+0x34>)
 8000f04:	1d3c      	adds	r4, r7, #4
 8000f06:	461d      	mov	r5, r3
 8000f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f10:	c403      	stmia	r4!, {r0, r1}
 8000f12:	8022      	strh	r2, [r4, #0]
 8000f14:	3402      	adds	r4, #2
 8000f16:	0c13      	lsrs	r3, r2, #16
 8000f18:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f1a:	f010 fb55 	bl	80115c8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00f fdf0 	bl	8010b06 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	08017208 	.word	0x08017208

08000f34 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <LL_C2_PWR_SetPowerMode+0x28>)
 8000f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f42:	f023 0207 	bic.w	r2, r3, #7
 8000f46:	4905      	ldr	r1, [pc, #20]	; (8000f5c <LL_C2_PWR_SetPowerMode+0x28>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58000400 	.word	0x58000400

08000f60 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	58000800 	.word	0x58000800

08000f88 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fa2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	cafecafe 	.word	0xcafecafe

08000fc4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001044:	d101      	bne.n	800104a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800106a:	d101      	bne.n	8001070 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800108a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4313      	orrs	r3, r2
 8001092:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <LL_DBGMCU_GetDeviceID+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e0042000 	.word	0xe0042000

080010cc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <LL_DBGMCU_GetRevisionID+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	b29b      	uxth	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e0042000 	.word	0xe0042000

080010e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	605a      	str	r2, [r3, #4]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	615a      	str	r2, [r3, #20]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	615a      	str	r2, [r3, #20]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	619a      	str	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <LL_LPM_EnableSleep+0x1c>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <LL_LPM_EnableSleep+0x1c>)
 80011b6:	f023 0304 	bic.w	r3, r3, #4
 80011ba:	6113      	str	r3, [r2, #16]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	22ff      	movs	r2, #255	; 0xff
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	22ca      	movs	r2, #202	; 0xca
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2253      	movs	r2, #83	; 0x53
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 0207 	bic.w	r2, r3, #7
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <MX_APPE_Config+0x18>)
 8001232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001236:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001238:	f000 f824 	bl	8001284 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800123c:	f000 f864 	bl	8001308 <Config_HSE>

  return;
 8001240:	bf00      	nop
}
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58004000 	.word	0x58004000

08001248 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800124c:	f000 f870 	bl	8001330 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001250:	f000 f888 	bl	8001364 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001254:	4903      	ldr	r1, [pc, #12]	; (8001264 <MX_APPE_Init+0x1c>)
 8001256:	2000      	movs	r0, #0
 8001258:	f000 ff40 	bl	80020dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800125c:	f000 f890 	bl	8001380 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001260:	bf00      	nop
}
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000ddc 	.word	0x20000ddc

08001268 <Init_Smps>:

void Init_Smps(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800126c:	bf00      	nop
}
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <Init_Exti>:

void Init_Exti(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800127a:	2050      	movs	r0, #80	; 0x50
 800127c:	f7ff fe70 	bl	8000f60 <LL_EXTI_EnableIT_32_63>

  return;
 8001280:	bf00      	nop
}
 8001282:	bd80      	pop	{r7, pc}

08001284 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001288:	f000 f804 	bl	8001294 <Reset_BackupDomain>

  Reset_IPCC();
 800128c:	f000 f81a 	bl	80012c4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001290:	bf00      	nop
}
 8001292:	bd80      	pop	{r7, pc}

08001294 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001298:	f7ff feca 	bl	8001030 <LL_RCC_IsActiveFlag_PINRST>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00d      	beq.n	80012be <Reset_BackupDomain+0x2a>
 80012a2:	f7ff fed8 	bl	8001056 <LL_RCC_IsActiveFlag_SFTRST>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80012ac:	f00b f8f2 	bl	800c494 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80012b0:	f00b f8f0 	bl	800c494 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80012b4:	f7ff fe9a 	bl	8000fec <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80012b8:	f7ff fea9 	bl	800100e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
}
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80012c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012cc:	f7ff fed6 	bl	800107c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80012d0:	213f      	movs	r1, #63	; 0x3f
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <Reset_IPCC+0x40>)
 80012d4:	f7ff ff4e 	bl	8001174 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80012d8:	213f      	movs	r1, #63	; 0x3f
 80012da:	480a      	ldr	r0, [pc, #40]	; (8001304 <Reset_IPCC+0x40>)
 80012dc:	f7ff ff58 	bl	8001190 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80012e0:	213f      	movs	r1, #63	; 0x3f
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <Reset_IPCC+0x40>)
 80012e4:	f7ff ff00 	bl	80010e8 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80012e8:	213f      	movs	r1, #63	; 0x3f
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <Reset_IPCC+0x40>)
 80012ec:	f7ff ff1f 	bl	800112e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80012f0:	213f      	movs	r1, #63	; 0x3f
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <Reset_IPCC+0x40>)
 80012f4:	f7ff ff0a 	bl	800110c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80012f8:	213f      	movs	r1, #63	; 0x3f
 80012fa:	4802      	ldr	r0, [pc, #8]	; (8001304 <Reset_IPCC+0x40>)
 80012fc:	f7ff ff29 	bl	8001152 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001300:	bf00      	nop
}
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58000c00 	.word	0x58000c00

08001308 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f010 fa0e 	bl	8011730 <OTP_Read>
 8001314:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	799b      	ldrb	r3, [r3, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe31 	bl	8000f88 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001326:	bf00      	nop
 8001328:	bf00      	nop
}
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <System_Init>:

static void System_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  Init_Smps();
 8001334:	f7ff ff98 	bl	8001268 <Init_Smps>

  Init_Exti();
 8001338:	f7ff ff9d 	bl	8001276 <Init_Exti>

  Init_Rtc();
 800133c:	f000 f802 	bl	8001344 <Init_Rtc>

  return;
 8001340:	bf00      	nop
}
 8001342:	bd80      	pop	{r7, pc}

08001344 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <Init_Rtc+0x1c>)
 800134a:	f7ff ff4c 	bl	80011e6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800134e:	2100      	movs	r1, #0
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <Init_Rtc+0x1c>)
 8001352:	f7ff ff58 	bl	8001206 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001356:	4802      	ldr	r0, [pc, #8]	; (8001360 <Init_Rtc+0x1c>)
 8001358:	f7ff ff38 	bl	80011cc <LL_RTC_EnableWriteProtection>

  return;
 800135c:	bf00      	nop
}
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40002800 	.word	0x40002800

08001364 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001368:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800136c:	f7ff fe2a 	bl	8000fc4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001370:	f012 fbbe 	bl	8013af0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff fddd 	bl	8000f34 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800137a:	bf00      	nop
}
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001386:	f00f ff69 	bl	801125c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <appe_Tl_Init+0x50>)
 800138c:	2100      	movs	r1, #0
 800138e:	2080      	movs	r0, #128	; 0x80
 8001390:	f012 fcec 	bl	8013d6c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <appe_Tl_Init+0x54>)
 8001396:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <appe_Tl_Init+0x58>)
 800139a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <appe_Tl_Init+0x5c>)
 80013a2:	f00f fe21 	bl	8010fe8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <appe_Tl_Init+0x60>)
 80013a8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <appe_Tl_Init+0x64>)
 80013ac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <appe_Tl_Init+0x68>)
 80013b0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80013b2:	f240 533c 	movw	r3, #1340	; 0x53c
 80013b6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4618      	mov	r0, r3
 80013be:	f010 f88f 	bl	80114e0 <TL_MM_Init>

  TL_Enable();
 80013c2:	f00f ff45 	bl	8011250 <TL_Enable>

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08011021 	.word	0x08011021
 80013d4:	20000964 	.word	0x20000964
 80013d8:	080013ed 	.word	0x080013ed
 80013dc:	08001405 	.word	0x08001405
 80013e0:	20000b7c 	.word	0x20000b7c
 80013e4:	20000a70 	.word	0x20000a70
 80013e8:	20000428 	.word	0x20000428

080013ec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013f6:	bf00      	nop
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	330b      	adds	r3, #11
 8001412:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800141e:	2b07      	cmp	r3, #7
 8001420:	f200 80d0 	bhi.w	80015c4 <APPE_SysUserEvtRx+0x1c0>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <APPE_SysUserEvtRx+0x28>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800144d 	.word	0x0800144d
 8001430:	080014df 	.word	0x080014df
 8001434:	08001501 	.word	0x08001501
 8001438:	080015c5 	.word	0x080015c5
 800143c:	08001545 	.word	0x08001545
 8001440:	08001569 	.word	0x08001569
 8001444:	08001585 	.word	0x08001585
 8001448:	080015a9 	.word	0x080015a9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4618      	mov	r0, r3
 8001452:	f00f fb85 	bl	8010b60 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001456:	485e      	ldr	r0, [pc, #376]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001458:	f010 f942 	bl	80116e0 <DbgTraceGetFileName>
 800145c:	4601      	mov	r1, r0
 800145e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001462:	4a5c      	ldr	r2, [pc, #368]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001464:	485c      	ldr	r0, [pc, #368]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001466:	f013 fa6d 	bl	8014944 <iprintf>
 800146a:	7b3b      	ldrb	r3, [r7, #12]
 800146c:	4619      	mov	r1, r3
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	461a      	mov	r2, r3
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	4859      	ldr	r0, [pc, #356]	; (80015dc <APPE_SysUserEvtRx+0x1d8>)
 8001476:	f013 fa65 	bl	8014944 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800147a:	4855      	ldr	r0, [pc, #340]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800147c:	f010 f930 	bl	80116e0 <DbgTraceGetFileName>
 8001480:	4601      	mov	r1, r0
 8001482:	f240 1369 	movw	r3, #361	; 0x169
 8001486:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001488:	4853      	ldr	r0, [pc, #332]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 800148a:	f013 fa5b 	bl	8014944 <iprintf>
 800148e:	7c3b      	ldrb	r3, [r7, #16]
 8001490:	4619      	mov	r1, r3
 8001492:	4853      	ldr	r0, [pc, #332]	; (80015e0 <APPE_SysUserEvtRx+0x1dc>)
 8001494:	f013 fa56 	bl	8014944 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001498:	484d      	ldr	r0, [pc, #308]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800149a:	f010 f921 	bl	80116e0 <DbgTraceGetFileName>
 800149e:	4601      	mov	r1, r0
 80014a0:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 80014a4:	4a4b      	ldr	r2, [pc, #300]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80014a6:	484c      	ldr	r0, [pc, #304]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80014a8:	f013 fa4c 	bl	8014944 <iprintf>
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	4619      	mov	r1, r3
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	461a      	mov	r2, r3
 80014b4:	7e3b      	ldrb	r3, [r7, #24]
 80014b6:	484b      	ldr	r0, [pc, #300]	; (80015e4 <APPE_SysUserEvtRx+0x1e0>)
 80014b8:	f013 fa44 	bl	8014944 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80014bc:	4844      	ldr	r0, [pc, #272]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 80014be:	f010 f90f 	bl	80116e0 <DbgTraceGetFileName>
 80014c2:	4601      	mov	r1, r0
 80014c4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80014ca:	4843      	ldr	r0, [pc, #268]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80014cc:	f013 fa3a 	bl	8014944 <iprintf>
 80014d0:	4845      	ldr	r0, [pc, #276]	; (80015e8 <APPE_SysUserEvtRx+0x1e4>)
 80014d2:	f013 fa37 	bl	8014944 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8e0 	bl	800169c <APPE_SysEvtReadyProcessing>
    break;
 80014dc:	e073      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80014de:	483c      	ldr	r0, [pc, #240]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 80014e0:	f010 f8fe 	bl	80116e0 <DbgTraceGetFileName>
 80014e4:	4601      	mov	r1, r0
 80014e6:	f240 1371 	movw	r3, #369	; 0x171
 80014ea:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80014ec:	483a      	ldr	r0, [pc, #232]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80014ee:	f013 fa29 	bl	8014944 <iprintf>
 80014f2:	483e      	ldr	r0, [pc, #248]	; (80015ec <APPE_SysUserEvtRx+0x1e8>)
 80014f4:	f013 fa26 	bl	8014944 <iprintf>
    APPE_SysEvtError(pPayload);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f885 	bl	8001608 <APPE_SysEvtError>
    break;
 80014fe:	e062      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001500:	4833      	ldr	r0, [pc, #204]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001502:	f010 f8ed 	bl	80116e0 <DbgTraceGetFileName>
 8001506:	4601      	mov	r1, r0
 8001508:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800150c:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 800150e:	4832      	ldr	r0, [pc, #200]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001510:	f013 fa18 	bl	8014944 <iprintf>
 8001514:	4836      	ldr	r0, [pc, #216]	; (80015f0 <APPE_SysUserEvtRx+0x1ec>)
 8001516:	f013 fab1 	bl	8014a7c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800151a:	482d      	ldr	r0, [pc, #180]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800151c:	f010 f8e0 	bl	80116e0 <DbgTraceGetFileName>
 8001520:	4601      	mov	r1, r0
 8001522:	f240 1377 	movw	r3, #375	; 0x177
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001528:	482b      	ldr	r0, [pc, #172]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 800152a:	f013 fa0b 	bl	8014944 <iprintf>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3302      	adds	r3, #2
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3302      	adds	r3, #2
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	482d      	ldr	r0, [pc, #180]	; (80015f4 <APPE_SysUserEvtRx+0x1f0>)
 800153e:	f013 fa01 	bl	8014944 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001542:	e040      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001544:	4822      	ldr	r0, [pc, #136]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001546:	f010 f8cb 	bl	80116e0 <DbgTraceGetFileName>
 800154a:	4601      	mov	r1, r0
 800154c:	f240 137d 	movw	r3, #381	; 0x17d
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001554:	f013 f9f6 	bl	8014944 <iprintf>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3302      	adds	r3, #2
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4825      	ldr	r0, [pc, #148]	; (80015f8 <APPE_SysUserEvtRx+0x1f4>)
 8001562:	f013 f9ef 	bl	8014944 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001566:	e02e      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 800156a:	f010 f8b9 	bl	80116e0 <DbgTraceGetFileName>
 800156e:	4601      	mov	r1, r0
 8001570:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001578:	f013 f9e4 	bl	8014944 <iprintf>
 800157c:	481f      	ldr	r0, [pc, #124]	; (80015fc <APPE_SysUserEvtRx+0x1f8>)
 800157e:	f013 f9e1 	bl	8014944 <iprintf>
    break;
 8001582:	e020      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 8001586:	f010 f8ab 	bl	80116e0 <DbgTraceGetFileName>
 800158a:	4601      	mov	r1, r0
 800158c:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001590:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 8001594:	f013 f9d6 	bl	8014944 <iprintf>
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3302      	adds	r3, #2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <APPE_SysUserEvtRx+0x1fc>)
 80015a2:	f013 f9cf 	bl	8014944 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80015a6:	e00e      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <APPE_SysUserEvtRx+0x1cc>)
 80015aa:	f010 f899 	bl	80116e0 <DbgTraceGetFileName>
 80015ae:	4601      	mov	r1, r0
 80015b0:	f240 138b 	movw	r3, #395	; 0x18b
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <APPE_SysUserEvtRx+0x1d0>)
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <APPE_SysUserEvtRx+0x1d4>)
 80015b8:	f013 f9c4 	bl	8014944 <iprintf>
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <APPE_SysUserEvtRx+0x200>)
 80015be:	f013 f9c1 	bl	8014944 <iprintf>
    break;
 80015c2:	e000      	b.n	80015c6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80015c4:	bf00      	nop
  }

  return;
 80015c6:	bf00      	nop
}
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08017224 	.word	0x08017224
 80015d4:	08018900 	.word	0x08018900
 80015d8:	0801723c 	.word	0x0801723c
 80015dc:	08017250 	.word	0x08017250
 80015e0:	08017274 	.word	0x08017274
 80015e4:	08017290 	.word	0x08017290
 80015e8:	080172a8 	.word	0x080172a8
 80015ec:	080172c8 	.word	0x080172c8
 80015f0:	080172ec 	.word	0x080172ec
 80015f4:	0801733c 	.word	0x0801733c
 80015f8:	08017364 	.word	0x08017364
 80015fc:	080173a0 	.word	0x080173a0
 8001600:	080173c4 	.word	0x080173c4
 8001604:	08017400 	.word	0x08017400

08001608 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	330b      	adds	r3, #11
 8001616:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3302      	adds	r3, #2
 800161c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800161e:	4819      	ldr	r0, [pc, #100]	; (8001684 <APPE_SysEvtError+0x7c>)
 8001620:	f010 f85e 	bl	80116e0 <DbgTraceGetFileName>
 8001624:	4601      	mov	r1, r0
 8001626:	f240 13a3 	movw	r3, #419	; 0x1a3
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <APPE_SysEvtError+0x80>)
 800162c:	4817      	ldr	r0, [pc, #92]	; (800168c <APPE_SysEvtError+0x84>)
 800162e:	f013 f989 	bl	8014944 <iprintf>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <APPE_SysEvtError+0x88>)
 800163a:	f013 f983 	bl	8014944 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10d      	bne.n	8001662 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <APPE_SysEvtError+0x7c>)
 8001648:	f010 f84a 	bl	80116e0 <DbgTraceGetFileName>
 800164c:	4601      	mov	r1, r0
 800164e:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <APPE_SysEvtError+0x80>)
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <APPE_SysEvtError+0x84>)
 8001656:	f013 f975 	bl	8014944 <iprintf>
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <APPE_SysEvtError+0x8c>)
 800165c:	f013 fa0e 	bl	8014a7c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001660:	e00d      	b.n	800167e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <APPE_SysEvtError+0x7c>)
 8001664:	f010 f83c 	bl	80116e0 <DbgTraceGetFileName>
 8001668:	4601      	mov	r1, r0
 800166a:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <APPE_SysEvtError+0x80>)
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <APPE_SysEvtError+0x84>)
 8001672:	f013 f967 	bl	8014944 <iprintf>
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <APPE_SysEvtError+0x90>)
 8001678:	f013 fa00 	bl	8014a7c <puts>
  return;
 800167c:	bf00      	nop
}
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	08017224 	.word	0x08017224
 8001688:	08018914 	.word	0x08018914
 800168c:	0801723c 	.word	0x0801723c
 8001690:	08017424 	.word	0x08017424
 8001694:	08017454 	.word	0x08017454
 8001698:	08017490 	.word	0x08017490

0800169c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	330b      	adds	r3, #11
 80016c0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3302      	adds	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d146      	bne.n	800175e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80016d0:	4836      	ldr	r0, [pc, #216]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 80016d2:	f010 f805 	bl	80116e0 <DbgTraceGetFileName>
 80016d6:	4601      	mov	r1, r0
 80016d8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 80016de:	4835      	ldr	r0, [pc, #212]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 80016e0:	f013 f930 	bl	8014944 <iprintf>
 80016e4:	4834      	ldr	r0, [pc, #208]	; (80017b8 <APPE_SysEvtReadyProcessing+0x11c>)
 80016e6:	f013 f9c9 	bl	8014a7c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016ea:	f7ff fc07 	bl	8000efc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016ee:	230f      	movs	r3, #15
 80016f0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016f2:	237f      	movs	r3, #127	; 0x7f
 80016f4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016f6:	f7ff fce9 	bl	80010cc <LL_DBGMCU_GetRevisionID>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80016fc:	482b      	ldr	r0, [pc, #172]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 80016fe:	f00f ffef 	bl	80116e0 <DbgTraceGetFileName>
 8001702:	4601      	mov	r1, r0
 8001704:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 8001708:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 800170a:	482a      	ldr	r0, [pc, #168]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 800170c:	f013 f91a 	bl	8014944 <iprintf>
 8001710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001712:	482a      	ldr	r0, [pc, #168]	; (80017bc <APPE_SysEvtReadyProcessing+0x120>)
 8001714:	f013 f916 	bl	8014944 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	b29b      	uxth	r3, r3
 800171c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800171e:	f7ff fcc7 	bl	80010b0 <LL_DBGMCU_GetDeviceID>
 8001722:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 8001726:	f00f ffdb 	bl	80116e0 <DbgTraceGetFileName>
 800172a:	4601      	mov	r1, r0
 800172c:	f240 13df 	movw	r3, #479	; 0x1df
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 8001734:	f013 f906 	bl	8014944 <iprintf>
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	4821      	ldr	r0, [pc, #132]	; (80017c0 <APPE_SysEvtReadyProcessing+0x124>)
 800173c:	f013 f902 	bl	8014944 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	b29b      	uxth	r3, r3
 8001744:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f00f f9f2 	bl	8010b34 <SHCI_C2_Config>

    APP_BLE_Init();
 8001750:	f010 f8f8 	bl	8011944 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001754:	2100      	movs	r1, #0
 8001756:	2001      	movs	r0, #1
 8001758:	f012 f9dc 	bl	8013b14 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800175c:	e022      	b.n	80017a4 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d110      	bne.n	8001788 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001766:	4811      	ldr	r0, [pc, #68]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 8001768:	f00f ffba 	bl	80116e0 <DbgTraceGetFileName>
 800176c:	4601      	mov	r1, r0
 800176e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 8001774:	480f      	ldr	r0, [pc, #60]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 8001776:	f013 f8e5 	bl	8014944 <iprintf>
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <APPE_SysEvtReadyProcessing+0x128>)
 800177c:	f013 f8e2 	bl	8014944 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  return;
 8001786:	e00d      	b.n	80017a4 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <APPE_SysEvtReadyProcessing+0x110>)
 800178a:	f00f ffa9 	bl	80116e0 <DbgTraceGetFileName>
 800178e:	4601      	mov	r1, r0
 8001790:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <APPE_SysEvtReadyProcessing+0x114>)
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <APPE_SysEvtReadyProcessing+0x118>)
 8001798:	f013 f8d4 	bl	8014944 <iprintf>
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <APPE_SysEvtReadyProcessing+0x12c>)
 800179e:	f013 f8d1 	bl	8014944 <iprintf>
  return;
 80017a2:	bf00      	nop
}
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08017224 	.word	0x08017224
 80017b0:	08018928 	.word	0x08018928
 80017b4:	0801723c 	.word	0x0801723c
 80017b8:	080174c8 	.word	0x080174c8
 80017bc:	080174e4 	.word	0x080174e4
 80017c0:	08017508 	.word	0x08017508
 80017c4:	08017528 	.word	0x08017528
 80017c8:	0801755c 	.word	0x0801755c

080017cc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f009 f964 	bl	800aaa0 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d00a      	beq.n	80017fc <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80017e6:	f009 f973 	bl	800aad0 <HAL_GetTickFreq>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f4:	e002      	b.n	80017fc <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80017f6:	f7ff fcd9 	bl	80011ac <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80017fa:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80017fc:	f009 f950 	bl	800aaa0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f4      	bhi.n	80017f6 <HAL_Delay+0x2a>
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800181a:	f04f 30ff 	mov.w	r0, #4294967295
 800181e:	f012 f9a9 	bl	8013b74 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800182a:	bf00      	nop
}
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f012 f997 	bl	8013b74 <UTIL_SEQ_Run>

  return;
 8001846:	bf00      	nop
}
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001856:	2100      	movs	r1, #0
 8001858:	2080      	movs	r0, #128	; 0x80
 800185a:	f012 faa9 	bl	8013db0 <UTIL_SEQ_SetTask>
  return;
 800185e:	bf00      	nop
}
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800186e:	2002      	movs	r0, #2
 8001870:	f012 fb0a 	bl	8013e88 <UTIL_SEQ_SetEvt>
  return;
 8001874:	bf00      	nop
}
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001884:	2002      	movs	r0, #2
 8001886:	f012 fb1f 	bl	8013ec8 <UTIL_SEQ_WaitEvt>
  return;
 800188a:	bf00      	nop
}
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d102      	bne.n	80018a8 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case B3_Pin:
      APP_BLE_Key_Button3_Action();
 80018a2:	f010 fb9b 	bl	8011fdc <APP_BLE_Key_Button3_Action>
      break;
 80018a6:	e000      	b.n	80018aa <HAL_GPIO_EXTI_Callback+0x18>

    default:
      break;
 80018a8:	bf00      	nop

  }
  return;
 80018aa:	bf00      	nop
}
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <LL_EXTI_EnableIT_0_31>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80018be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018c2:	4905      	ldr	r1, [pc, #20]	; (80018d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	58000800 	.word	0x58000800

080018dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4904      	ldr	r1, [pc, #16]	; (80018fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]

}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	58000800 	.word	0x58000800

08001900 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <ReadRtcSsrValue+0x3c>)
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	b29b      	uxth	r3, r3
 800190c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <ReadRtcSsrValue+0x3c>)
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	b29b      	uxth	r3, r3
 8001914:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001916:	e005      	b.n	8001924 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <ReadRtcSsrValue+0x3c>)
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	b29b      	uxth	r3, r3
 8001922:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d1f5      	bne.n	8001918 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800192c:	683b      	ldr	r3, [r7, #0]
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40002800 	.word	0x40002800

08001940 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	460a      	mov	r2, r1
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	4613      	mov	r3, r2
 800194e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001950:	79ba      	ldrb	r2, [r7, #6]
 8001952:	491d      	ldr	r1, [pc, #116]	; (80019c8 <LinkTimerAfter+0x88>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3315      	adds	r3, #21
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b06      	cmp	r3, #6
 8001968:	d009      	beq.n	800197e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <LinkTimerAfter+0x88>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3314      	adds	r3, #20
 800197a:	79fa      	ldrb	r2, [r7, #7]
 800197c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	4911      	ldr	r1, [pc, #68]	; (80019c8 <LinkTimerAfter+0x88>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3315      	adds	r3, #21
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <LinkTimerAfter+0x88>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	3314      	adds	r3, #20
 80019a2:	79ba      	ldrb	r2, [r7, #6]
 80019a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80019a6:	79ba      	ldrb	r2, [r7, #6]
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <LinkTimerAfter+0x88>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3315      	adds	r3, #21
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	701a      	strb	r2, [r3, #0]

  return;
 80019ba:	bf00      	nop
}
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000d00 	.word	0x20000d00

080019cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	460a      	mov	r2, r1
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	4613      	mov	r3, r2
 80019da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <LinkTimerBefore+0xb8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	79ba      	ldrb	r2, [r7, #6]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d032      	beq.n	8001a4e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80019e8:	79ba      	ldrb	r2, [r7, #6]
 80019ea:	4927      	ldr	r1, [pc, #156]	; (8001a88 <LinkTimerBefore+0xbc>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3314      	adds	r3, #20
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	4922      	ldr	r1, [pc, #136]	; (8001a88 <LinkTimerBefore+0xbc>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3315      	adds	r3, #21
 8001a0c:	79fa      	ldrb	r2, [r7, #7]
 8001a0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a10:	79fa      	ldrb	r2, [r7, #7]
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <LinkTimerBefore+0xbc>)
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3315      	adds	r3, #21
 8001a20:	79ba      	ldrb	r2, [r7, #6]
 8001a22:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001a24:	79fa      	ldrb	r2, [r7, #7]
 8001a26:	4918      	ldr	r1, [pc, #96]	; (8001a88 <LinkTimerBefore+0xbc>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3314      	adds	r3, #20
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001a38:	79ba      	ldrb	r2, [r7, #6]
 8001a3a:	4913      	ldr	r1, [pc, #76]	; (8001a88 <LinkTimerBefore+0xbc>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3314      	adds	r3, #20
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001a4c:	e014      	b.n	8001a78 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	490d      	ldr	r1, [pc, #52]	; (8001a88 <LinkTimerBefore+0xbc>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3315      	adds	r3, #21
 8001a5e:	79ba      	ldrb	r2, [r7, #6]
 8001a60:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001a62:	79ba      	ldrb	r2, [r7, #6]
 8001a64:	4908      	ldr	r1, [pc, #32]	; (8001a88 <LinkTimerBefore+0xbc>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3314      	adds	r3, #20
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	701a      	strb	r2, [r3, #0]
  return;
 8001a76:	bf00      	nop
}
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000d90 	.word	0x20000d90
 8001a88:	20000d00 	.word	0x20000d00

08001a8c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a96:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <linkTimer+0x144>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d118      	bne.n	8001ad2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <linkTimer+0x144>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <linkTimer+0x148>)
 8001aa8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001aaa:	4a49      	ldr	r2, [pc, #292]	; (8001bd0 <linkTimer+0x144>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	4949      	ldr	r1, [pc, #292]	; (8001bd8 <linkTimer+0x14c>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3315      	adds	r3, #21
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ac4:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <linkTimer+0x150>)
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	81fb      	strh	r3, [r7, #14]
 8001ad0:	e078      	b.n	8001bc4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001ad2:	f000 f909 	bl	8001ce8 <ReturnTimeElapsed>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	493e      	ldr	r1, [pc, #248]	; (8001bd8 <linkTimer+0x14c>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3308      	adds	r3, #8
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	4419      	add	r1, r3
 8001af2:	4839      	ldr	r0, [pc, #228]	; (8001bd8 <linkTimer+0x14c>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4403      	add	r3, r0
 8001afe:	3308      	adds	r3, #8
 8001b00:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001b02:	79fa      	ldrb	r2, [r7, #7]
 8001b04:	4934      	ldr	r1, [pc, #208]	; (8001bd8 <linkTimer+0x14c>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	3308      	adds	r3, #8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <linkTimer+0x144>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <linkTimer+0x14c>)
 8001b20:	460b      	mov	r3, r1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	440b      	add	r3, r1
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d337      	bcc.n	8001ba4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <linkTimer+0x144>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001b3a:	7b7a      	ldrb	r2, [r7, #13]
 8001b3c:	4926      	ldr	r1, [pc, #152]	; (8001bd8 <linkTimer+0x14c>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3315      	adds	r3, #21
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001b4e:	e013      	b.n	8001b78 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001b50:	7b7a      	ldrb	r2, [r7, #13]
 8001b52:	4921      	ldr	r1, [pc, #132]	; (8001bd8 <linkTimer+0x14c>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3315      	adds	r3, #21
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001b64:	7b7a      	ldrb	r2, [r7, #13]
 8001b66:	491c      	ldr	r1, [pc, #112]	; (8001bd8 <linkTimer+0x14c>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3315      	adds	r3, #21
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d00b      	beq.n	8001b96 <linkTimer+0x10a>
 8001b7e:	7b3a      	ldrb	r2, [r7, #12]
 8001b80:	4915      	ldr	r1, [pc, #84]	; (8001bd8 <linkTimer+0x14c>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d2dc      	bcs.n	8001b50 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001b96:	7b7a      	ldrb	r2, [r7, #13]
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fecf 	bl	8001940 <LinkTimerAfter>
 8001ba2:	e00f      	b.n	8001bc4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <linkTimer+0x144>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff0c 	bl	80019cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <linkTimer+0x144>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <linkTimer+0x148>)
 8001bbc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <linkTimer+0x144>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000d90 	.word	0x20000d90
 8001bd4:	20000d91 	.word	0x20000d91
 8001bd8:	20000d00 	.word	0x20000d00
 8001bdc:	20000d94 	.word	0x20000d94

08001be0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <UnlinkTimer+0xf8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d111      	bne.n	8001c20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <UnlinkTimer+0xf8>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <UnlinkTimer+0xfc>)
 8001c04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	3315      	adds	r3, #21
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <UnlinkTimer+0xf8>)
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e03e      	b.n	8001c9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	492f      	ldr	r1, [pc, #188]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3314      	adds	r3, #20
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	492a      	ldr	r1, [pc, #168]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3315      	adds	r3, #21
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001c48:	79f9      	ldrb	r1, [r7, #7]
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c4e:	460b      	mov	r3, r1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4403      	add	r3, r0
 8001c58:	3315      	adds	r3, #21
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2d8      	uxtb	r0, r3
 8001c5e:	4920      	ldr	r1, [pc, #128]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	3315      	adds	r3, #21
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c70:	7bbb      	ldrb	r3, [r7, #14]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d013      	beq.n	8001c9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001c76:	79f9      	ldrb	r1, [r7, #7]
 8001c78:	7bba      	ldrb	r2, [r7, #14]
 8001c7a:	4819      	ldr	r0, [pc, #100]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4403      	add	r3, r0
 8001c86:	3314      	adds	r3, #20
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2d8      	uxtb	r0, r3
 8001c8c:	4914      	ldr	r1, [pc, #80]	; (8001ce0 <UnlinkTimer+0x100>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3314      	adds	r3, #20
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	490f      	ldr	r1, [pc, #60]	; (8001ce0 <UnlinkTimer+0x100>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	330c      	adds	r3, #12
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <UnlinkTimer+0xf8>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d107      	bne.n	8001ccc <UnlinkTimer+0xec>
 8001cbc:	79bb      	ldrb	r3, [r7, #6]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d104      	bne.n	8001ccc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <UnlinkTimer+0x104>)
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  return;
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
}
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000d90 	.word	0x20000d90
 8001cdc:	20000d91 	.word	0x20000d91
 8001ce0:	20000d00 	.word	0x20000d00
 8001ce4:	20000d94 	.word	0x20000d94

08001ce8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <ReturnTimeElapsed+0x70>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d026      	beq.n	8001d46 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001cf8:	f7ff fe02 	bl	8001900 <ReadRtcSsrValue>
 8001cfc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <ReturnTimeElapsed+0x70>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d805      	bhi.n	8001d14 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <ReturnTimeElapsed+0x70>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	e00a      	b.n	8001d2a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <ReturnTimeElapsed+0x74>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <ReturnTimeElapsed+0x70>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <ReturnTimeElapsed+0x78>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <ReturnTimeElapsed+0x7c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	40d3      	lsrs	r3, r2
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	e001      	b.n	8001d4a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	b29b      	uxth	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000d94 	.word	0x20000d94
 8001d5c:	20000d9c 	.word	0x20000d9c
 8001d60:	20000d9a 	.word	0x20000d9a
 8001d64:	20000d99 	.word	0x20000d99

08001d68 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d78:	f7ff fdc2 	bl	8001900 <ReadRtcSsrValue>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <RestartWakeupCounter+0x9c>)
 8001d80:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001d82:	2003      	movs	r0, #3
 8001d84:	f009 f82d 	bl	800ade2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001d88:	e039      	b.n	8001dfe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d803      	bhi.n	8001d98 <RestartWakeupCounter+0x30>
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <RestartWakeupCounter+0xa0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d002      	beq.n	8001d9e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d9e:	bf00      	nop
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <RestartWakeupCounter+0xa4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f8      	beq.n	8001da0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <RestartWakeupCounter+0xa4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <RestartWakeupCounter+0xa4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001dbe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <RestartWakeupCounter+0xa8>)
 8001dc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001dc6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f009 f818 	bl	800adfe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <RestartWakeupCounter+0xac>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	0c1b      	lsrs	r3, r3, #16
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	88fa      	ldrh	r2, [r7, #6]
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <RestartWakeupCounter+0xac>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001dde:	f7ff fd8f 	bl	8001900 <ReadRtcSsrValue>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <RestartWakeupCounter+0x9c>)
 8001de6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <RestartWakeupCounter+0xa4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <RestartWakeupCounter+0xa4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001df6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001df8:	f3af 8000 	nop.w
  return ;
 8001dfc:	bf00      	nop
}
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000d94 	.word	0x20000d94
 8001e08:	20000d99 	.word	0x20000d99
 8001e0c:	20000ddc 	.word	0x20000ddc
 8001e10:	58000800 	.word	0x58000800
 8001e14:	40002800 	.word	0x40002800

08001e18 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e1e:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <RescheduleTimerList+0x11c>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2a:	d107      	bne.n	8001e3c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e2c:	bf00      	nop
 8001e2e:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <RescheduleTimerList+0x120>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f8      	bne.n	8001e2e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <RescheduleTimerList+0x120>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <RescheduleTimerList+0x120>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <RescheduleTimerList+0x124>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	493a      	ldr	r1, [pc, #232]	; (8001f40 <RescheduleTimerList+0x128>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3308      	adds	r3, #8
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001e66:	f7ff ff3f 	bl	8001ce8 <ReturnTimeElapsed>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d205      	bcs.n	8001e82 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <RescheduleTimerList+0x12c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e04d      	b.n	8001f1e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <RescheduleTimerList+0x130>)
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d906      	bls.n	8001ea2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <RescheduleTimerList+0x130>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <RescheduleTimerList+0x12c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e03d      	b.n	8001f1e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <RescheduleTimerList+0x12c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eb2:	e034      	b.n	8001f1e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	4922      	ldr	r1, [pc, #136]	; (8001f40 <RescheduleTimerList+0x128>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d20a      	bcs.n	8001ee2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	491c      	ldr	r1, [pc, #112]	; (8001f40 <RescheduleTimerList+0x128>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e013      	b.n	8001f0a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <RescheduleTimerList+0x128>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	1ac9      	subs	r1, r1, r3
 8001efa:	4811      	ldr	r0, [pc, #68]	; (8001f40 <RescheduleTimerList+0x128>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4403      	add	r3, r0
 8001f06:	3308      	adds	r3, #8
 8001f08:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <RescheduleTimerList+0x128>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	3315      	adds	r3, #21
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d1c7      	bne.n	8001eb4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001f24:	89bb      	ldrh	r3, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff1e 	bl	8001d68 <RestartWakeupCounter>

  return ;
 8001f2c:	bf00      	nop
}
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40002800 	.word	0x40002800
 8001f38:	20000ddc 	.word	0x20000ddc
 8001f3c:	20000d90 	.word	0x20000d90
 8001f40:	20000d00 	.word	0x20000d00
 8001f44:	20000d98 	.word	0x20000d98
 8001f48:	20000d9e 	.word	0x20000d9e

08001f4c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f52:	f3ef 8310 	mrs	r3, PRIMASK
 8001f56:	617b      	str	r3, [r7, #20]
  return(result);
 8001f58:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
}
 8001f5e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	22ca      	movs	r2, #202	; 0xca
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2253      	movs	r2, #83	; 0x53
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001f70:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001f80:	4b52      	ldr	r3, [pc, #328]	; (80020cc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001f88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f8c:	4950      	ldr	r1, [pc, #320]	; (80020d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	330c      	adds	r3, #12
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d16e      	bne.n	8002080 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001fa2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fa6:	494a      	ldr	r1, [pc, #296]	; (80020d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001fb6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fba:	4945      	ldr	r1, [pc, #276]	; (80020d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3310      	adds	r3, #16
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d04c      	beq.n	8002070 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001fd6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fda:	493d      	ldr	r1, [pc, #244]	; (80020d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	330d      	adds	r3, #13
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d124      	bne.n	800203a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fdf2 	bl	8001be0 <UnlinkTimer>
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f383 8810 	msr	PRIMASK, r3
}
 8002006:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002008:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800200c:	4930      	ldr	r1, [pc, #192]	; (80020d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	3304      	adds	r3, #4
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f9b8 	bl	8002398 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	22ca      	movs	r2, #202	; 0xca
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2253      	movs	r2, #83	; 0x53
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
 8002038:	e012      	b.n	8002060 <HW_TS_RTC_Wakeup_Handler+0x114>
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f383 8810 	msr	PRIMASK, r3
}
 8002044:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f920 	bl	8002290 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22ca      	movs	r2, #202	; 0xca
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2253      	movs	r2, #83	; 0x53
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	4619      	mov	r1, r3
 8002068:	69b8      	ldr	r0, [r7, #24]
 800206a:	f000 fa1b 	bl	80024a4 <HW_TS_RTC_Int_AppNot>
 800206e:	e022      	b.n	80020b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002070:	f7ff fed2 	bl	8001e18 <RescheduleTimerList>
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f383 8810 	msr	PRIMASK, r3
}
 800207e:	e01a      	b.n	80020b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002080:	bf00      	nop
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f8      	beq.n	8002082 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80020a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f383 8810 	msr	PRIMASK, r3
}
 80020b4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80020be:	bf00      	nop
}
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000ddc 	.word	0x20000ddc
 80020cc:	20000d90 	.word	0x20000d90
 80020d0:	20000d00 	.word	0x20000d00
 80020d4:	20000d98 	.word	0x20000d98
 80020d8:	58000800 	.word	0x58000800

080020dc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020e8:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HW_TS_Init+0x188>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	22ca      	movs	r2, #202	; 0xca
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
 80020f0:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <HW_TS_Init+0x188>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2253      	movs	r2, #83	; 0x53
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HW_TS_Init+0x18c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <HW_TS_Init+0x18c>)
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HW_TS_Init+0x18c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f1c3 0304 	rsb	r3, r3, #4
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b55      	ldr	r3, [pc, #340]	; (800226c <HW_TS_Init+0x190>)
 8002118:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HW_TS_Init+0x18c>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002122:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002126:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	fa92 f2a2 	rbit	r2, r2
 800212e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	2a00      	cmp	r2, #0
 8002138:	d101      	bne.n	800213e <HW_TS_Init+0x62>
  {
    return 32U;
 800213a:	2220      	movs	r2, #32
 800213c:	e003      	b.n	8002146 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	40d3      	lsrs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3301      	adds	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <HW_TS_Init+0x194>)
 8002150:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002152:	4b45      	ldr	r3, [pc, #276]	; (8002268 <HW_TS_Init+0x18c>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800215c:	b29b      	uxth	r3, r3
 800215e:	3301      	adds	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HW_TS_Init+0x198>)
 8002164:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HW_TS_Init+0x198>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	4a40      	ldr	r2, [pc, #256]	; (8002270 <HW_TS_Init+0x194>)
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002178:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HW_TS_Init+0x190>)
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	40d3      	lsrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002186:	4293      	cmp	r3, r2
 8002188:	d904      	bls.n	8002194 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HW_TS_Init+0x19c>)
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	801a      	strh	r2, [r3, #0]
 8002192:	e003      	b.n	800219c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HW_TS_Init+0x19c>)
 800219a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800219c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021a0:	f7ff fb9c 	bl	80018dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80021a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021a8:	f7ff fb84 	bl	80018b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d13d      	bne.n	800222e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80021b2:	4b32      	ldr	r3, [pc, #200]	; (800227c <HW_TS_Init+0x1a0>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HW_TS_Init+0x1a4>)
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	77fb      	strb	r3, [r7, #31]
 80021c4:	e00c      	b.n	80021e0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80021c6:	7ffa      	ldrb	r2, [r7, #31]
 80021c8:	492e      	ldr	r1, [pc, #184]	; (8002284 <HW_TS_Init+0x1a8>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	330c      	adds	r3, #12
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	3301      	adds	r3, #1
 80021de:	77fb      	strb	r3, [r7, #31]
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d9ef      	bls.n	80021c6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HW_TS_Init+0x1ac>)
 80021e8:	2206      	movs	r2, #6
 80021ea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HW_TS_Init+0x188>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HW_TS_Init+0x188>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HW_TS_Init+0x188>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HW_TS_Init+0x188>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800220c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HW_TS_Init+0x1b0>)
 8002210:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002214:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002216:	2003      	movs	r0, #3
 8002218:	f008 fdf1 	bl	800adfe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HW_TS_Init+0x188>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HW_TS_Init+0x188>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e009      	b.n	8002242 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HW_TS_Init+0x188>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800223c:	2003      	movs	r0, #3
 800223e:	f008 fdd0 	bl	800ade2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HW_TS_Init+0x188>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800224a:	2200      	movs	r2, #0
 800224c:	2103      	movs	r1, #3
 800224e:	2003      	movs	r0, #3
 8002250:	f008 fd85 	bl	800ad5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002254:	2003      	movs	r0, #3
 8002256:	f008 fd9c 	bl	800ad92 <HAL_NVIC_EnableIRQ>

  return;
 800225a:	bf00      	nop
}
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000ddc 	.word	0x20000ddc
 8002268:	40002800 	.word	0x40002800
 800226c:	20000d99 	.word	0x20000d99
 8002270:	20000d9a 	.word	0x20000d9a
 8002274:	20000d9c 	.word	0x20000d9c
 8002278:	20000d9e 	.word	0x20000d9e
 800227c:	20000d98 	.word	0x20000d98
 8002280:	20000d94 	.word	0x20000d94
 8002284:	20000d00 	.word	0x20000d00
 8002288:	20000d90 	.word	0x20000d90
 800228c:	58000800 	.word	0x58000800

08002290 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229a:	f3ef 8310 	mrs	r3, PRIMASK
 800229e:	60fb      	str	r3, [r7, #12]
  return(result);
 80022a0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022a8:	2003      	movs	r0, #3
 80022aa:	f008 fd80 	bl	800adae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HW_TS_Stop+0xf0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	22ca      	movs	r2, #202	; 0xca
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HW_TS_Stop+0xf0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2253      	movs	r2, #83	; 0x53
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022be:	79fa      	ldrb	r2, [r7, #7]
 80022c0:	4930      	ldr	r1, [pc, #192]	; (8002384 <HW_TS_Stop+0xf4>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	330c      	adds	r3, #12
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d142      	bne.n	800235c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fc80 	bl	8001be0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HW_TS_Stop+0xf8>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d12f      	bne.n	800234c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HW_TS_Stop+0xfc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d107      	bne.n	800230a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022fa:	bf00      	nop
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HW_TS_Stop+0xf0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f8      	bne.n	80022fc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HW_TS_Stop+0xf0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HW_TS_Stop+0xf0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002318:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800231a:	bf00      	nop
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HW_TS_Stop+0xf0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f8      	beq.n	800231c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HW_TS_Stop+0xf0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HW_TS_Stop+0xf0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800233a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HW_TS_Stop+0x100>)
 800233e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002342:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002344:	2003      	movs	r0, #3
 8002346:	f008 fd5a 	bl	800adfe <HAL_NVIC_ClearPendingIRQ>
 800234a:	e007      	b.n	800235c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HW_TS_Stop+0x104>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	7cfa      	ldrb	r2, [r7, #19]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002358:	f7ff fd5e 	bl	8001e18 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HW_TS_Stop+0xf0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002364:	2003      	movs	r0, #3
 8002366:	f008 fd14 	bl	800ad92 <HAL_NVIC_EnableIRQ>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f383 8810 	msr	PRIMASK, r3
}
 8002374:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002376:	bf00      	nop
}
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000ddc 	.word	0x20000ddc
 8002384:	20000d00 	.word	0x20000d00
 8002388:	20000d90 	.word	0x20000d90
 800238c:	40002800 	.word	0x40002800
 8002390:	58000800 	.word	0x58000800
 8002394:	20000d91 	.word	0x20000d91

08002398 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	493b      	ldr	r1, [pc, #236]	; (8002494 <HW_TS_Start+0xfc>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	330c      	adds	r3, #12
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d103      	bne.n	80023c4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff66 	bl	8002290 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c4:	f3ef 8310 	mrs	r3, PRIMASK
 80023c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ca:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023ce:	b672      	cpsid	i
}
 80023d0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023d2:	2003      	movs	r0, #3
 80023d4:	f008 fceb 	bl	800adae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HW_TS_Start+0x100>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	22ca      	movs	r2, #202	; 0xca
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HW_TS_Start+0x100>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2253      	movs	r2, #83	; 0x53
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	492a      	ldr	r1, [pc, #168]	; (8002494 <HW_TS_Start+0xfc>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	330c      	adds	r3, #12
 80023f8:	2202      	movs	r2, #2
 80023fa:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80023fc:	79fa      	ldrb	r2, [r7, #7]
 80023fe:	4925      	ldr	r1, [pc, #148]	; (8002494 <HW_TS_Start+0xfc>)
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3308      	adds	r3, #8
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002410:	79fa      	ldrb	r2, [r7, #7]
 8002412:	4920      	ldr	r1, [pc, #128]	; (8002494 <HW_TS_Start+0xfc>)
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3304      	adds	r3, #4
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fb30 	bl	8001a8c <linkTimer>
 800242c:	4603      	mov	r3, r0
 800242e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HW_TS_Start+0x104>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HW_TS_Start+0x108>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	7c7a      	ldrb	r2, [r7, #17]
 800243e:	429a      	cmp	r2, r3
 8002440:	d002      	beq.n	8002448 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002442:	f7ff fce9 	bl	8001e18 <RescheduleTimerList>
 8002446:	e013      	b.n	8002470 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	4912      	ldr	r1, [pc, #72]	; (8002494 <HW_TS_Start+0xfc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3308      	adds	r3, #8
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	8a7b      	ldrh	r3, [r7, #18]
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	1ac9      	subs	r1, r1, r3
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <HW_TS_Start+0xfc>)
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4403      	add	r3, r0
 800246c:	3308      	adds	r3, #8
 800246e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HW_TS_Start+0x100>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002478:	2003      	movs	r0, #3
 800247a:	f008 fc8a 	bl	800ad92 <HAL_NVIC_EnableIRQ>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f383 8810 	msr	PRIMASK, r3
}
 8002488:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800248a:	bf00      	nop
}
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000d00 	.word	0x20000d00
 8002498:	20000ddc 	.word	0x20000ddc
 800249c:	20000d90 	.word	0x20000d90
 80024a0:	20000d91 	.word	0x20000d91

080024a4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	460b      	mov	r3, r1
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4798      	blx	r3

  return;
 80024b6:	bf00      	nop
}
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d013      	beq.n	80024fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80024d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80024de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80024e6:	e000      	b.n	80024ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80024e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80024ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f9      	beq.n	80024e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80024f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80024fe:	687b      	ldr	r3, [r7, #4]
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_AHB1_GRP1_EnableClock>:
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800251a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4313      	orrs	r3, r2
 8002522:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_AHB2_GRP1_EnableClock>:
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx= 0; DataIdx < len; DataIdx++)
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e009      	b.n	8002596 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	60ba      	str	r2, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff97 	bl	80024be <ITM_SendChar>
	for(DataIdx= 0; DataIdx < len; DataIdx++)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	dbf1      	blt.n	8002582 <_write+0x12>
	}
	return len;
 800259e:	687b      	ldr	r3, [r7, #4]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f008 fa0a 	bl	800a9c4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80025b0:	f7fe fe3c 	bl	800122c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b4:	f000 f816 	bl	80025e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025b8:	f000 f86c 	bl	8002694 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80025bc:	f000 f88a 	bl	80026d4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c0:	f000 f986 	bl	80028d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c4:	f000 f972 	bl	80028ac <MX_DMA_Init>
  MX_RF_Init();
 80025c8:	f000 f898 	bl	80026fc <MX_RF_Init>
  MX_RTC_Init();
 80025cc:	f000 f89e 	bl	800270c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80025d0:	f000 f91e 	bl	8002810 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80025d4:	f000 f8ce 	bl	8002774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80025d8:	f7fe fe36 	bl	8001248 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80025dc:	f7ff f91b 	bl	8001816 <MX_APPE_Process>
 80025e0:	e7fc      	b.n	80025dc <main+0x34>
	...

080025e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b09a      	sub	sp, #104	; 0x68
 80025e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ea:	f107 0320 	add.w	r3, r7, #32
 80025ee:	2248      	movs	r2, #72	; 0x48
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f011 fd34 	bl	8014060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	615a      	str	r2, [r3, #20]
 8002608:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <SystemClock_Config+0xac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002612:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <SystemClock_Config+0xac>)
 8002614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <SystemClock_Config+0xac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002626:	230b      	movs	r3, #11
 8002628:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800262a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002636:	2340      	movs	r3, #64	; 0x40
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800263a:	2305      	movs	r3, #5
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800263e:	2300      	movs	r3, #0
 8002640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	4618      	mov	r0, r3
 8002648:	f00a fab8 	bl	800cbbc <HAL_RCC_OscConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002652:	f000 f99f 	bl	8002994 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002656:	236f      	movs	r3, #111	; 0x6f
 8002658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800265a:	2302      	movs	r3, #2
 800265c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2101      	movs	r1, #1
 8002676:	4618      	mov	r0, r3
 8002678:	f00a fe14 	bl	800d2a4 <HAL_RCC_ClockConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002682:	f000 f987 	bl	8002994 <Error_Handler>
  }
}
 8002686:	bf00      	nop
 8002688:	3768      	adds	r7, #104	; 0x68
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	58000400 	.word	0x58000400

08002694 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b094      	sub	sp, #80	; 0x50
 8002698:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800269a:	463b      	mov	r3, r7
 800269c:	2250      	movs	r2, #80	; 0x50
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f011 fcdd 	bl	8014060 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80026a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026aa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80026ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80026b2:	2300      	movs	r3, #0
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ba:	463b      	mov	r3, r7
 80026bc:	4618      	mov	r0, r3
 80026be:	f00b fa2e 	bl	800db1e <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80026c8:	f000 f964 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80026cc:	bf00      	nop
 80026ce:	3750      	adds	r7, #80	; 0x50
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_IPCC_Init+0x20>)
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <MX_IPCC_Init+0x24>)
 80026dc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_IPCC_Init+0x20>)
 80026e0:	f009 fe52 	bl	800c388 <HAL_IPCC_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80026ea:	f000 f953 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000da0 	.word	0x20000da0
 80026f8:	58000c00 	.word	0x58000c00

080026fc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_RTC_Init+0x60>)
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <MX_RTC_Init+0x64>)
 8002714:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <MX_RTC_Init+0x60>)
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_RTC_Init+0x60>)
 800271e:	220f      	movs	r2, #15
 8002720:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <MX_RTC_Init+0x60>)
 8002724:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002728:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_RTC_Init+0x60>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <MX_RTC_Init+0x60>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <MX_RTC_Init+0x60>)
 8002738:	2200      	movs	r2, #0
 800273a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_RTC_Init+0x60>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002742:	480a      	ldr	r0, [pc, #40]	; (800276c <MX_RTC_Init+0x60>)
 8002744:	f00b fc72 	bl	800e02c <HAL_RTC_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800274e:	f000 f921 	bl	8002994 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_RTC_Init+0x60>)
 8002758:	f00b fd68 	bl	800e22c <HAL_RTCEx_SetWakeUpTimer_IT>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002762:	f000 f917 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000ddc 	.word	0x20000ddc
 8002770:	40002800 	.word	0x40002800

08002774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <MX_TIM2_Init+0x98>)
 8002794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <MX_TIM2_Init+0x98>)
 800279c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80027a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_TIM2_Init+0x98>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_TIM2_Init+0x98>)
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_TIM2_Init+0x98>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <MX_TIM2_Init+0x98>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027bc:	4813      	ldr	r0, [pc, #76]	; (800280c <MX_TIM2_Init+0x98>)
 80027be:	f00b fdf1 	bl	800e3a4 <HAL_TIM_Base_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80027c8:	f000 f8e4 	bl	8002994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4619      	mov	r1, r3
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <MX_TIM2_Init+0x98>)
 80027da:	f00b ffa8 	bl	800e72e <HAL_TIM_ConfigClockSource>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80027e4:	f000 f8d6 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_TIM2_Init+0x98>)
 80027f6:	f00c f98b 	bl	800eb10 <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002800:	f000 f8c8 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000e00 	.word	0x20000e00

08002810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <MX_USART1_UART_Init+0x98>)
 8002818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800281c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002842:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002846:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002856:	2200      	movs	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800285a:	4812      	ldr	r0, [pc, #72]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800285c:	f00c f9f6 	bl	800ec4c <HAL_UART_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002866:	f000 f895 	bl	8002994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800286a:	2100      	movs	r1, #0
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800286e:	f00c fe56 	bl	800f51e <HAL_UARTEx_SetTxFifoThreshold>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002878:	f000 f88c 	bl	8002994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287c:	2100      	movs	r1, #0
 800287e:	4809      	ldr	r0, [pc, #36]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002880:	f00c fe8b 	bl	800f59a <HAL_UARTEx_SetRxFifoThreshold>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800288a:	f000 f883 	bl	8002994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002890:	f00c fe0c 	bl	800f4ac <HAL_UARTEx_DisableFifoMode>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800289a:	f000 f87b 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000e4c 	.word	0x20000e4c
 80028a8:	40013800 	.word	0x40013800

080028ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028b0:	2004      	movs	r0, #4
 80028b2:	f7ff fe2b 	bl	800250c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028b6:	2002      	movs	r0, #2
 80028b8:	f7ff fe28 	bl	800250c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	203a      	movs	r0, #58	; 0x3a
 80028c2:	f008 fa4c 	bl	800ad5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80028c6:	203a      	movs	r0, #58	; 0x3a
 80028c8:	f008 fa63 	bl	800ad92 <HAL_NVIC_EnableIRQ>

}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e4:	2004      	movs	r0, #4
 80028e6:	f7ff fe2a 	bl	800253e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2002      	movs	r0, #2
 80028ec:	f7ff fe27 	bl	800253e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff fe24 	bl	800253e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f6:	2008      	movs	r0, #8
 80028f8:	f7ff fe21 	bl	800253e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2123      	movs	r1, #35	; 0x23
 8002900:	4821      	ldr	r0, [pc, #132]	; (8002988 <MX_GPIO_Init+0xb8>)
 8002902:	f008 fe95 	bl	800b630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002906:	2310      	movs	r3, #16
 8002908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800290a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800290e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002910:	2301      	movs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	4619      	mov	r1, r3
 8002918:	481c      	ldr	r0, [pc, #112]	; (800298c <MX_GPIO_Init+0xbc>)
 800291a:	f008 fc3b 	bl	800b194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800291e:	2323      	movs	r3, #35	; 0x23
 8002920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002922:	2301      	movs	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4815      	ldr	r0, [pc, #84]	; (8002988 <MX_GPIO_Init+0xb8>)
 8002934:	f008 fc2e 	bl	800b194 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002938:	2303      	movs	r3, #3
 800293a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800293c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002942:	2301      	movs	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4811      	ldr	r0, [pc, #68]	; (8002990 <MX_GPIO_Init+0xc0>)
 800294c:	f008 fc22 	bl	800b194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	2006      	movs	r0, #6
 8002956:	f008 fa02 	bl	800ad5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800295a:	2006      	movs	r0, #6
 800295c:	f008 fa19 	bl	800ad92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2007      	movs	r0, #7
 8002966:	f008 f9fa 	bl	800ad5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800296a:	2007      	movs	r0, #7
 800296c:	f008 fa11 	bl	800ad92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	200a      	movs	r0, #10
 8002976:	f008 f9f2 	bl	800ad5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800297a:	200a      	movs	r0, #10
 800297c:	f008 fa09 	bl	800ad92 <HAL_NVIC_EnableIRQ>

}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	e7fe      	b.n	800299c <Error_Handler+0x8>

0800299e <LL_RCC_EnableRTC>:
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_AHB2_GRP1_EnableClock>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e4:	68fb      	ldr	r3, [r7, #12]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_AHB3_GRP1_EnableClock>:
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a90:	f7ff ffaf 	bl	80029f2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	202e      	movs	r0, #46	; 0x2e
 8002a9a:	f008 f960 	bl	800ad5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a9e:	202e      	movs	r0, #46	; 0x2e
 8002aa0:	f008 f977 	bl	800ad92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_IPCC_MspInit+0x44>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d113      	bne.n	8002ae2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002aba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002abe:	f7ff ff98 	bl	80029f2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	202c      	movs	r0, #44	; 0x2c
 8002ac8:	f008 f949 	bl	800ad5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002acc:	202c      	movs	r0, #44	; 0x2c
 8002ace:	f008 f960 	bl	800ad92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	202d      	movs	r0, #45	; 0x2d
 8002ad8:	f008 f941 	bl	800ad5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002adc:	202d      	movs	r0, #45	; 0x2d
 8002ade:	f008 f958 	bl	800ad92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	58000c00 	.word	0x58000c00

08002af0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b096      	sub	sp, #88	; 0x58
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	2250      	movs	r2, #80	; 0x50
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f011 faad 	bl	8014060 <memset>
  if(hrtc->Instance==RTC)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_RTC_MspInit+0x64>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d11d      	bne.n	8002b4c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b14:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00a fffc 	bl	800db1e <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002b2c:	f7ff ff32 	bl	8002994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b30:	f7ff ff35 	bl	800299e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002b34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b38:	f7ff ff74 	bl	8002a24 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2003      	movs	r0, #3
 8002b42:	f008 f90c 	bl	800ad5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002b46:	2003      	movs	r0, #3
 8002b48:	f008 f923 	bl	800ad92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b4c:	bf00      	nop
 8002b4e:	3758      	adds	r7, #88	; 0x58
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40002800 	.word	0x40002800

08002b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d10a      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7ff ff5a 	bl	8002a24 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	201c      	movs	r0, #28
 8002b76:	f008 f8f2 	bl	800ad5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b7a:	201c      	movs	r0, #28
 8002b7c:	f008 f909 	bl	800ad92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b09c      	sub	sp, #112	; 0x70
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2250      	movs	r2, #80	; 0x50
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f011 fa59 	bl	8014060 <memset>
  if(huart->Instance==USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_UART_MspInit+0xd4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d14d      	bne.n	8002c54 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00a ffaa 	bl	800db1e <HAL_RCCEx_PeriphCLKConfig>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bd0:	f7ff fee0 	bl	8002994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bd8:	f7ff ff3d 	bl	8002a56 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7ff feef 	bl	80029c0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002be2:	23c0      	movs	r3, #192	; 0xc0
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4818      	ldr	r0, [pc, #96]	; (8002c60 <HAL_UART_MspInit+0xd8>)
 8002bfe:	f008 fac9 	bl	800b194 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_UART_MspInit+0xe0>)
 8002c06:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c10:	2210      	movs	r2, #16
 8002c12:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c38:	480a      	ldr	r0, [pc, #40]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c3a:	f008 f8ef 	bl	800ae1c <HAL_DMA_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002c44:	f7ff fea6 	bl	8002994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_UART_MspInit+0xdc>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c54:	bf00      	nop
 8002c56:	3770      	adds	r7, #112	; 0x70
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	48000400 	.word	0x48000400
 8002c64:	20000ee0 	.word	0x20000ee0
 8002c68:	40020444 	.word	0x40020444

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb8:	f007 fede 	bl	800aa78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002cc4:	f7ff f942 	bl	8001f4c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f008 fcc5 	bl	800b660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f008 fcbe 	bl	800b660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cec:	2010      	movs	r0, #16
 8002cee:	f008 fcb7 	bl	800b660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM2_IRQHandler+0x10>)
 8002cfe:	f00b fbf7 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000e00 	.word	0x20000e00

08002d0c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002d10:	f010 fdaa 	bl	8013868 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002d1c:	f010 fddc 	bl	80138d8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002d28:	f008 fcb2 	bl	800b690 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <DMA2_Channel4_IRQHandler+0x10>)
 8002d36:	f008 f919 	bl	800af6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000ee0 	.word	0x20000ee0

08002d44 <LL_AHB2_GRP1_EnableClock>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_APB1_GRP1_EnableClock>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_APB1_GRP1_DisableClock>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <BSP_I2C1_Init+0x70>)
 8002ddc:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <BSP_I2C1_Init+0x74>)
 8002dde:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <BSP_I2C1_Init+0x78>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	4918      	ldr	r1, [pc, #96]	; (8002e48 <BSP_I2C1_Init+0x78>)
 8002de8:	600a      	str	r2, [r1, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d122      	bne.n	8002e34 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002dee:	4814      	ldr	r0, [pc, #80]	; (8002e40 <BSP_I2C1_Init+0x70>)
 8002df0:	f008 ff72 	bl	800bcd8 <HAL_I2C_GetState>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11c      	bne.n	8002e34 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002dfa:	4811      	ldr	r0, [pc, #68]	; (8002e40 <BSP_I2C1_Init+0x70>)
 8002dfc:	f000 f8fe 	bl	8002ffc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002e06:	480e      	ldr	r0, [pc, #56]	; (8002e40 <BSP_I2C1_Init+0x70>)
 8002e08:	f000 f8b4 	bl	8002f74 <MX_I2C1_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002e12:	f06f 0307 	mvn.w	r3, #7
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	e00c      	b.n	8002e34 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <BSP_I2C1_Init+0x70>)
 8002e1e:	f009 fa1b 	bl	800c258 <HAL_I2CEx_ConfigAnalogFilter>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002e28:	f06f 0307 	mvn.w	r3, #7
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e001      	b.n	8002e34 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000f40 	.word	0x20000f40
 8002e44:	40005400 	.word	0x40005400
 8002e48:	20000f94 	.word	0x20000f94

08002e4c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <BSP_I2C1_DeInit+0x48>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d014      	beq.n	8002e88 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <BSP_I2C1_DeInit+0x48>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <BSP_I2C1_DeInit+0x48>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <BSP_I2C1_DeInit+0x48>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002e70:	4809      	ldr	r0, [pc, #36]	; (8002e98 <BSP_I2C1_DeInit+0x4c>)
 8002e72:	f000 f907 	bl	8003084 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002e76:	4808      	ldr	r0, [pc, #32]	; (8002e98 <BSP_I2C1_DeInit+0x4c>)
 8002e78:	f008 fcbd 	bl	800b7f6 <HAL_I2C_DeInit>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002e82:	f06f 0307 	mvn.w	r3, #7
 8002e86:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002e88:	687b      	ldr	r3, [r7, #4]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000f94 	.word	0x20000f94
 8002e98:	20000f40 	.word	0x20000f40

08002e9c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af04      	add	r7, sp, #16
 8002ea2:	60ba      	str	r2, [r7, #8]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	81fb      	strh	r3, [r7, #14]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	81bb      	strh	r3, [r7, #12]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002eb6:	89ba      	ldrh	r2, [r7, #12]
 8002eb8:	89f9      	ldrh	r1, [r7, #14]
 8002eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	480c      	ldr	r0, [pc, #48]	; (8002efc <BSP_I2C1_WriteReg+0x60>)
 8002ecc:	f008 fcd6 	bl	800b87c <HAL_I2C_Mem_Write>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002ed6:	4809      	ldr	r0, [pc, #36]	; (8002efc <BSP_I2C1_WriteReg+0x60>)
 8002ed8:	f008 ff0c 	bl	800bcf4 <HAL_I2C_GetError>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d103      	bne.n	8002eea <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ee2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e002      	b.n	8002ef0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002eea:	f06f 0303 	mvn.w	r3, #3
 8002eee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002ef0:	697b      	ldr	r3, [r7, #20]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000f40 	.word	0x20000f40

08002f00 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af04      	add	r7, sp, #16
 8002f06:	60ba      	str	r2, [r7, #8]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	81fb      	strh	r3, [r7, #14]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	81bb      	strh	r3, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002f1a:	89ba      	ldrh	r2, [r7, #12]
 8002f1c:	89f9      	ldrh	r1, [r7, #14]
 8002f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	480c      	ldr	r0, [pc, #48]	; (8002f60 <BSP_I2C1_ReadReg+0x60>)
 8002f30:	f008 fdb8 	bl	800baa4 <HAL_I2C_Mem_Read>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002f3a:	4809      	ldr	r0, [pc, #36]	; (8002f60 <BSP_I2C1_ReadReg+0x60>)
 8002f3c:	f008 feda 	bl	800bcf4 <HAL_I2C_GetError>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d103      	bne.n	8002f4e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f46:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e002      	b.n	8002f54 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002f4e:	f06f 0303 	mvn.w	r3, #3
 8002f52:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002f54:	697b      	ldr	r3, [r7, #20]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000f40 	.word	0x20000f40

08002f64 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002f68:	f007 fd9a 	bl	800aaa0 <HAL_GetTick>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <MX_I2C1_Init+0x80>)
 8002f84:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <MX_I2C1_Init+0x84>)
 8002f8a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f008 fb8e 	bl	800b6d8 <HAL_I2C_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f009 f945 	bl	800c258 <HAL_I2CEx_ConfigAnalogFilter>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f009 f987 	bl	800c2ee <HAL_I2CEx_ConfigDigitalFilter>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40005400 	.word	0x40005400
 8002ff8:	00707cbb 	.word	0x00707cbb

08002ffc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b09c      	sub	sp, #112	; 0x70
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	2250      	movs	r2, #80	; 0x50
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f011 f827 	bl	8014060 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003012:	2304      	movs	r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003016:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4618      	mov	r0, r3
 8003022:	f00a fd7c 	bl	800db1e <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	2002      	movs	r0, #2
 8003028:	f7ff fe8c 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800302c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003030:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003032:	2312      	movs	r3, #18
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800303e:	2304      	movs	r3, #4
 8003040:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003046:	4619      	mov	r1, r3
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <I2C1_MspInit+0x84>)
 800304a:	f008 f8a3 	bl	800b194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800304e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003054:	2312      	movs	r3, #18
 8003056:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003060:	2304      	movs	r3, #4
 8003062:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003068:	4619      	mov	r1, r3
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <I2C1_MspInit+0x84>)
 800306c:	f008 f892 	bl	800b194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003070:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003074:	f7ff fe7f 	bl	8002d76 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003078:	bf00      	nop
 800307a:	3770      	adds	r7, #112	; 0x70
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	48000400 	.word	0x48000400

08003084 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800308c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003090:	f7ff fe8a 	bl	8002da8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <I2C1_MspDeInit+0x2c>)
 800309a:	f008 f9eb 	bl	800b474 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800309e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a2:	4803      	ldr	r0, [pc, #12]	; (80030b0 <I2C1_MspDeInit+0x2c>)
 80030a4:	f008 f9e6 	bl	800b474 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	48000400 	.word	0x48000400

080030b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return 1;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_kill>:

int _kill(int pid, int sig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ce:	f010 ff8f 	bl	8013ff0 <__errno>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2216      	movs	r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
  return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_exit>:

void _exit (int status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffe7 	bl	80030c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030f6:	e7fe      	b.n	80030f6 <_exit+0x12>

080030f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e00a      	b.n	8003120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800310a:	f3af 8000 	nop.w
 800310e:	4601      	mov	r1, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	60ba      	str	r2, [r7, #8]
 8003116:	b2ca      	uxtb	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf0      	blt.n	800310a <_read+0x12>
  }

  return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800315a:	605a      	str	r2, [r3, #4]
  return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_isatty>:

int _isatty(int file)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <_sbrk+0x5c>)
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <_sbrk+0x60>)
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <_sbrk+0x64>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <_sbrk+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031cc:	f010 ff10 	bl	8013ff0 <__errno>
 80031d0:	4603      	mov	r3, r0
 80031d2:	220c      	movs	r2, #12
 80031d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e009      	b.n	80031f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <_sbrk+0x64>)
 80031ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20030000 	.word	0x20030000
 80031fc:	00000400 	.word	0x00000400
 8003200:	20000f98 	.word	0x20000f98
 8003204:	20001540 	.word	0x20001540

08003208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <SystemInit+0x98>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	4a23      	ldr	r2, [pc, #140]	; (80032a0 <SystemInit+0x98>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003234:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <SystemInit+0x9c>)
 8003242:	4013      	ands	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003252:	f023 0305 	bic.w	r3, r3, #5
 8003256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <SystemInit+0xa0>)
 8003274:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	4a0b      	ldr	r2, [pc, #44]	; (80032a8 <SystemInit+0xa0>)
 800327c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00
 80032a4:	faf6fefb 	.word	0xfaf6fefb
 80032a8:	22041000 	.word	0x22041000

080032ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80032ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b0:	3304      	adds	r3, #4

080032b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80032b6:	d3f9      	bcc.n	80032ac <CopyDataInit>
  bx lr
 80032b8:	4770      	bx	lr

080032ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80032ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80032bc:	3004      	adds	r0, #4

080032be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80032be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80032c0:	d3fb      	bcc.n	80032ba <FillZerobss>
  bx lr
 80032c2:	4770      	bx	lr

080032c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
															  ldr   r0, =_estack
 80032c4:	480c      	ldr	r0, [pc, #48]	; (80032f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff ff9e 	bl	8003208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <LoopForever+0x6>)
 80032ce:	490c      	ldr	r1, [pc, #48]	; (8003300 <LoopForever+0xa>)
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <LoopForever+0xe>)
 80032d2:	2300      	movs	r3, #0
 80032d4:	f7ff ffed 	bl	80032b2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <LoopForever+0x12>)
 80032da:	490c      	ldr	r1, [pc, #48]	; (800330c <LoopForever+0x16>)
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <LoopForever+0x1a>)
 80032de:	2300      	movs	r3, #0
 80032e0:	f7ff ffe7 	bl	80032b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80032e4:	480b      	ldr	r0, [pc, #44]	; (8003314 <LoopForever+0x1e>)
 80032e6:	490c      	ldr	r1, [pc, #48]	; (8003318 <LoopForever+0x22>)
 80032e8:	2300      	movs	r3, #0
 80032ea:	f7ff ffe8 	bl	80032be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032ee:	f010 fe85 	bl	8013ffc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80032f2:	f7ff f959 	bl	80025a8 <main>

080032f6 <LoopForever>:

LoopForever:
  b LoopForever
 80032f6:	e7fe      	b.n	80032f6 <LoopForever>
															  ldr   r0, =_estack
 80032f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80032fc:	20000008 	.word	0x20000008
 8003300:	20000414 	.word	0x20000414
 8003304:	08018f3c 	.word	0x08018f3c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003308:	200301e3 	.word	0x200301e3
 800330c:	200301e3 	.word	0x200301e3
 8003310:	08019c11 	.word	0x08019c11
  INIT_BSS _sbss, _ebss
 8003314:	20000ce4 	.word	0x20000ce4
 8003318:	20001540 	.word	0x20001540

0800331c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC1_IRQHandler>
	...

08003320 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e034      	b.n	80033a2 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	7b1a      	ldrb	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <HTS221_RegisterBusIO+0x8c>)
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <HTS221_RegisterBusIO+0x90>)
 800337a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4798      	blx	r3
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	e002      	b.n	80033a2 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
 80033a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	080039df 	.word	0x080039df
 80033b0:	08003a41 	.word	0x08003a41

080033b4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d108      	bne.n	80033d8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 faa4 	bl	8003914 <HTS221_Initialize>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e004      	b.n	80033e2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d111      	bne.n	8003420 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f878 	bl	80034f2 <HTS221_HUM_Disable>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295
 800340c:	e00d      	b.n	800342a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f95f 	bl	80036d2 <HTS221_TEMP_Disable>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	e004      	b.n	800342a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3320      	adds	r3, #32
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fc28 	bl	8003c98 <hts221_device_id_get>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	e000      	b.n	8003456 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <HTS221_GetCapabilities+0x44>)
 8003486:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <HTS221_GetCapabilities+0x44>)
 800348c:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	41480000 	.word	0x41480000

080034a8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e015      	b.n	80034ea <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3320      	adds	r3, #32
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fbf3 	bl	8003cba <hts221_power_on_set>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e004      	b.n	80034ea <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e015      	b.n	8003534 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3320      	adds	r3, #32
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fbce 	bl	8003cba <hts221_power_on_set>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	e004      	b.n	8003534 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f96f 	bl	800382c <HTS221_GetOutputDataRate>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003564:	ed97 0a00 	vldr	s0, [r7]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f9a3 	bl	80038b4 <HTS221_SetOutputDataRate>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3320      	adds	r3, #32
 8003586:	f107 020c 	add.w	r2, r7, #12
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fc58 	bl	8003e42 <hts221_hum_adc_point_0_get>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295
 800359c:	e06b      	b.n	8003676 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f103 0220 	add.w	r2, r3, #32
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 fbaa 	bl	8003d06 <hts221_hum_rh_point_0_get>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	e05b      	b.n	8003676 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f103 0220 	add.w	r2, r3, #32
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	3308      	adds	r3, #8
 80035ca:	4619      	mov	r1, r3
 80035cc:	4610      	mov	r0, r2
 80035ce:	f000 fc5c 	bl	8003e8a <hts221_hum_adc_point_1_get>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	e04b      	b.n	8003676 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f103 0220 	add.w	r2, r3, #32
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	330c      	adds	r3, #12
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 fba8 	bl	8003d42 <hts221_hum_rh_point_1_get>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e03b      	b.n	8003676 <HTS221_HUM_GetHumidity+0xfe>
 80035fe:	2300      	movs	r3, #0
 8003600:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3320      	adds	r3, #32
 8003606:	f107 021c 	add.w	r2, r7, #28
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fafd 	bl	8003c0c <hts221_humidity_raw_get>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	e02b      	b.n	8003676 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800361e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362a:	f107 030c 	add.w	r3, r7, #12
 800362e:	eeb0 0a67 	vmov.f32	s0, s15
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f99a 	bl	800396c <Linear_Interpolation>
 8003638:	eef0 7a40 	vmov.f32	s15, s0
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	d503      	bpl.n	800365a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	edd3 7a00 	vldr	s15, [r3]
 8003660:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003680 <HTS221_HUM_GetHumidity+0x108>
 8003664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366c:	dd02      	ble.n	8003674 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HTS221_HUM_GetHumidity+0x10c>)
 8003672:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	42c80000 	.word	0x42c80000
 8003684:	42c80000 	.word	0x42c80000

08003688 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e015      	b.n	80036ca <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3320      	adds	r3, #32
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fb03 	bl	8003cba <hts221_power_on_set>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	e004      	b.n	80036ca <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e015      	b.n	8003714 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10b      	bne.n	800370a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3320      	adds	r3, #32
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fade 	bl	8003cba <hts221_power_on_set>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	e004      	b.n	8003714 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f87f 	bl	800382c <HTS221_GetOutputDataRate>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003744:	ed97 0a00 	vldr	s0, [r7]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8b3 	bl	80038b4 <HTS221_SetOutputDataRate>
 800374e:	4603      	mov	r3, r0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	f107 020c 	add.w	r2, r7, #12
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fbb0 	bl	8003ed2 <hts221_temp_adc_point_0_get>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	e052      	b.n	8003824 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 0220 	add.w	r2, r3, #32
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 faf6 	bl	8003d7e <hts221_temp_deg_point_0_get>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e042      	b.n	8003824 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f103 0220 	add.w	r2, r3, #32
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	3308      	adds	r3, #8
 80037aa:	4619      	mov	r1, r3
 80037ac:	4610      	mov	r0, r2
 80037ae:	f000 fbb4 	bl	8003f1a <hts221_temp_adc_point_1_get>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	e032      	b.n	8003824 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f103 0220 	add.w	r2, r3, #32
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	330c      	adds	r3, #12
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f000 fb07 	bl	8003de0 <hts221_temp_deg_point_1_get>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	e022      	b.n	8003824 <HTS221_TEMP_GetTemperature+0xcc>
 80037de:	2300      	movs	r3, #0
 80037e0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3320      	adds	r3, #32
 80037e6:	f107 021c 	add.w	r2, r7, #28
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fa30 	bl	8003c52 <hts221_temperature_raw_get>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
 80037fc:	e012      	b.n	8003824 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80037fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800380a:	f107 030c 	add.w	r3, r7, #12
 800380e:	eeb0 0a67 	vmov.f32	s0, s15
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f8aa 	bl	800396c <Linear_Interpolation>
 8003818:	eef0 7a40 	vmov.f32	s15, s0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3320      	adds	r3, #32
 800383e:	f107 020b 	add.w	r2, r7, #11
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f983 	bl	8003b50 <hts221_data_rate_get>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	e025      	b.n	80038a2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003856:	7afb      	ldrb	r3, [r7, #11]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d81d      	bhi.n	8003898 <HTS221_GetOutputDataRate+0x6c>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <HTS221_GetOutputDataRate+0x38>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	0800387f 	.word	0x0800387f
 800386c:	08003889 	.word	0x08003889
 8003870:	08003891 	.word	0x08003891
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
      break;
 800387c:	e010      	b.n	80038a0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003884:	601a      	str	r2, [r3, #0]
      break;
 8003886:	e00b      	b.n	80038a0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <HTS221_GetOutputDataRate+0x80>)
 800388c:	601a      	str	r2, [r3, #0]
      break;
 800388e:	e007      	b.n	80038a0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HTS221_GetOutputDataRate+0x84>)
 8003894:	601a      	str	r2, [r3, #0]
      break;
 8003896:	e003      	b.n	80038a0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	60fb      	str	r3, [r7, #12]
      break;
 800389e:	bf00      	nop
  }

  return ret;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40e00000 	.word	0x40e00000
 80038b0:	41480000 	.word	0x41480000

080038b4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80038c0:	edd7 7a00 	vldr	s15, [r7]
 80038c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d801      	bhi.n	80038d6 <HTS221_SetOutputDataRate+0x22>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00b      	b.n	80038ee <HTS221_SetOutputDataRate+0x3a>
 80038d6:	edd7 7a00 	vldr	s15, [r7]
 80038da:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80038de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e6:	d801      	bhi.n	80038ec <HTS221_SetOutputDataRate+0x38>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e000      	b.n	80038ee <HTS221_SetOutputDataRate+0x3a>
 80038ec:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80038ee:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3320      	adds	r3, #32
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f902 	bl	8003b02 <hts221_data_rate_set>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003904:	f04f 33ff 	mov.w	r3, #4294967295
 8003908:	e000      	b.n	800390c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3320      	adds	r3, #32
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f9c9 	bl	8003cba <hts221_power_on_set>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	e017      	b.n	8003964 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3320      	adds	r3, #32
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f940 	bl	8003bc0 <hts221_block_data_update_set>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e00b      	b.n	8003964 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800394c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ffaf 	bl	80038b4 <HTS221_SetOutputDataRate>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	e000      	b.n	8003964 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	ed93 7a03 	vldr	s14, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	edd3 7a01 	vldr	s15, [r3, #4]
 8003984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003988:	edd7 7a00 	vldr	s15, [r7]
 800398c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	edd3 6a02 	vldr	s13, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	edd3 7a01 	vldr	s15, [r3, #4]
 800399c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	ed93 6a00 	vldr	s12, [r3]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80039ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039cc:	eef0 7a66 	vmov.f32	s15, s13
}
 80039d0:	eeb0 0a67 	vmov.f32	s0, s15
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039de:	b590      	push	{r4, r7, lr}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	461a      	mov	r2, r3
 80039ea:	460b      	mov	r3, r1
 80039ec:	72fb      	strb	r3, [r7, #11]
 80039ee:	4613      	mov	r3, r2
 80039f0:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	695c      	ldr	r4, [r3, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	7b1b      	ldrb	r3, [r3, #12]
 8003a06:	b298      	uxth	r0, r3
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	b299      	uxth	r1, r3
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	47a0      	blx	r4
 8003a18:	4603      	mov	r3, r0
 8003a1a:	e00d      	b.n	8003a38 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	695c      	ldr	r4, [r3, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	7b1b      	ldrb	r3, [r3, #12]
 8003a24:	b298      	uxth	r0, r3
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	b299      	uxth	r1, r3
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	47a0      	blx	r4
 8003a36:	4603      	mov	r3, r0
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	72fb      	strb	r3, [r7, #11]
 8003a50:	4613      	mov	r3, r2
 8003a52:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10e      	bne.n	8003a7e <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	691c      	ldr	r4, [r3, #16]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	7b1b      	ldrb	r3, [r3, #12]
 8003a68:	b298      	uxth	r0, r3
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	b299      	uxth	r1, r3
 8003a74:	893b      	ldrh	r3, [r7, #8]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	47a0      	blx	r4
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	e00d      	b.n	8003a9a <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	691c      	ldr	r4, [r3, #16]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	7b1b      	ldrb	r3, [r3, #12]
 8003a86:	b298      	uxth	r0, r3
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	b299      	uxth	r1, r3
 8003a92:	893b      	ldrh	r3, [r7, #8]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	47a0      	blx	r4
 8003a98:	4603      	mov	r3, r0
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}

08003aa2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003aa2:	b590      	push	{r4, r7, lr}
 8003aa4:	b087      	sub	sp, #28
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	461a      	mov	r2, r3
 8003aae:	460b      	mov	r3, r1
 8003ab0:	72fb      	strb	r3, [r7, #11]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685c      	ldr	r4, [r3, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68d8      	ldr	r0, [r3, #12]
 8003abe:	893b      	ldrh	r3, [r7, #8]
 8003ac0:	7af9      	ldrb	r1, [r7, #11]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	47a0      	blx	r4
 8003ac6:	6178      	str	r0, [r7, #20]

  return ret;
 8003ac8:	697b      	ldr	r3, [r7, #20]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}

08003ad2 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003ad2:	b590      	push	{r4, r7, lr}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	461a      	mov	r2, r3
 8003ade:	460b      	mov	r3, r1
 8003ae0:	72fb      	strb	r3, [r7, #11]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681c      	ldr	r4, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68d8      	ldr	r0, [r3, #12]
 8003aee:	893b      	ldrh	r3, [r7, #8]
 8003af0:	7af9      	ldrb	r1, [r7, #11]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	47a0      	blx	r4
 8003af6:	6178      	str	r0, [r7, #20]

  return ret;
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}

08003b02 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b0e:	f107 0208 	add.w	r2, r7, #8
 8003b12:	2301      	movs	r3, #1
 8003b14:	2120      	movs	r1, #32
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffc3 	bl	8003aa2 <hts221_read_reg>
 8003b1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10f      	bne.n	8003b44 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	7a3b      	ldrb	r3, [r7, #8]
 8003b2e:	f362 0301 	bfi	r3, r2, #0, #2
 8003b32:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b34:	f107 0208 	add.w	r2, r7, #8
 8003b38:	2301      	movs	r3, #1
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ffc8 	bl	8003ad2 <hts221_write_reg>
 8003b42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b44:	68fb      	ldr	r3, [r7, #12]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003b5a:	f107 0208 	add.w	r2, r7, #8
 8003b5e:	2301      	movs	r3, #1
 8003b60:	2120      	movs	r1, #32
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ff9d 	bl	8003aa2 <hts221_read_reg>
 8003b68:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003b6a:	7a3b      	ldrb	r3, [r7, #8]
 8003b6c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d81a      	bhi.n	8003bac <hts221_data_rate_get+0x5c>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <hts221_data_rate_get+0x2c>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b95 	.word	0x08003b95
 8003b84:	08003b9d 	.word	0x08003b9d
 8003b88:	08003ba5 	.word	0x08003ba5
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
      break;
 8003b92:	e00f      	b.n	8003bb4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
      break;
 8003b9a:	e00b      	b.n	8003bb4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	701a      	strb	r2, [r3, #0]
      break;
 8003ba2:	e007      	b.n	8003bb4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	701a      	strb	r2, [r3, #0]
      break;
 8003baa:	e003      	b.n	8003bb4 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	701a      	strb	r2, [r3, #0]
      break;
 8003bb2:	bf00      	nop
  }

  return ret;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop

08003bc0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003bcc:	f107 0208 	add.w	r2, r7, #8
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff64 	bl	8003aa2 <hts221_read_reg>
 8003bda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	7a3b      	ldrb	r3, [r7, #8]
 8003bec:	f362 0382 	bfi	r3, r2, #2, #1
 8003bf0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003bf2:	f107 0208 	add.w	r2, r7, #8
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	2120      	movs	r1, #32
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ff69 	bl	8003ad2 <hts221_write_reg>
 8003c00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c02:	68fb      	ldr	r3, [r7, #12]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003c16:	f107 0208 	add.w	r2, r7, #8
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	2128      	movs	r1, #40	; 0x28
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ff3f 	bl	8003aa2 <hts221_read_reg>
 8003c24:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003c26:	7a7b      	ldrb	r3, [r7, #9]
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	7a3b      	ldrb	r3, [r7, #8]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003c5c:	f107 0208 	add.w	r2, r7, #8
 8003c60:	2302      	movs	r3, #2
 8003c62:	212a      	movs	r1, #42	; 0x2a
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff1c 	bl	8003aa2 <hts221_read_reg>
 8003c6a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003c6c:	7a7b      	ldrb	r3, [r7, #9]
 8003c6e:	b21a      	sxth	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	7a3b      	ldrb	r3, [r7, #8]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	210f      	movs	r1, #15
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fefa 	bl	8003aa2 <hts221_read_reg>
 8003cae:	60f8      	str	r0, [r7, #12]

  return ret;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003cc6:	f107 0208 	add.w	r2, r7, #8
 8003cca:	2301      	movs	r3, #1
 8003ccc:	2120      	movs	r1, #32
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fee7 	bl	8003aa2 <hts221_read_reg>
 8003cd4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10f      	bne.n	8003cfc <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	7a3b      	ldrb	r3, [r7, #8]
 8003ce6:	f362 13c7 	bfi	r3, r2, #7, #1
 8003cea:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003cec:	f107 0208 	add.w	r2, r7, #8
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff feec 	bl	8003ad2 <hts221_write_reg>
 8003cfa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003d10:	f107 020b 	add.w	r2, r7, #11
 8003d14:	2301      	movs	r3, #1
 8003d16:	2130      	movs	r1, #48	; 0x30
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fec2 	bl	8003aa2 <hts221_read_reg>
 8003d1e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003d38:	68fb      	ldr	r3, [r7, #12]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003d4c:	f107 020b 	add.w	r2, r7, #11
 8003d50:	2301      	movs	r3, #1
 8003d52:	2131      	movs	r1, #49	; 0x31
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fea4 	bl	8003aa2 <hts221_read_reg>
 8003d5a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003d88:	f107 020f 	add.w	r2, r7, #15
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	2132      	movs	r1, #50	; 0x32
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fe86 	bl	8003aa2 <hts221_read_reg>
 8003d96:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11b      	bne.n	8003dd6 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003d9e:	f107 0210 	add.w	r2, r7, #16
 8003da2:	2301      	movs	r3, #1
 8003da4:	2135      	movs	r1, #53	; 0x35
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe7b 	bl	8003aa2 <hts221_read_reg>
 8003dac:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003dae:	7c3b      	ldrb	r3, [r7, #16]
 8003db0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	ee07 3a90 	vmov	s15, r3
 8003dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003dd6:	697b      	ldr	r3, [r7, #20]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003dea:	f107 020f 	add.w	r2, r7, #15
 8003dee:	2301      	movs	r3, #1
 8003df0:	2133      	movs	r1, #51	; 0x33
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fe55 	bl	8003aa2 <hts221_read_reg>
 8003df8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11b      	bne.n	8003e38 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003e00:	f107 0210 	add.w	r2, r7, #16
 8003e04:	2301      	movs	r3, #1
 8003e06:	2135      	movs	r1, #53	; 0x35
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fe4a 	bl	8003aa2 <hts221_read_reg>
 8003e0e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003e10:	7c3b      	ldrb	r3, [r7, #16]
 8003e12:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	4413      	add	r3, r2
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003e38:	697b      	ldr	r3, [r7, #20]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003e4c:	f107 0208 	add.w	r2, r7, #8
 8003e50:	2302      	movs	r3, #2
 8003e52:	2136      	movs	r1, #54	; 0x36
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe24 	bl	8003aa2 <hts221_read_reg>
 8003e5a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003e5c:	7a7b      	ldrb	r3, [r7, #9]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	7a3b      	ldrb	r3, [r7, #8]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003e6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003e94:	f107 0208 	add.w	r2, r7, #8
 8003e98:	2302      	movs	r3, #2
 8003e9a:	213a      	movs	r1, #58	; 0x3a
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fe00 	bl	8003aa2 <hts221_read_reg>
 8003ea2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003ea4:	7a7b      	ldrb	r3, [r7, #9]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	7a3b      	ldrb	r3, [r7, #8]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003eb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003edc:	f107 0208 	add.w	r2, r7, #8
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	213c      	movs	r1, #60	; 0x3c
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fddc 	bl	8003aa2 <hts221_read_reg>
 8003eea:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003eec:	7a7b      	ldrb	r3, [r7, #9]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	7a3b      	ldrb	r3, [r7, #8]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003efe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003f10:	68fb      	ldr	r3, [r7, #12]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003f24:	f107 0208 	add.w	r2, r7, #8
 8003f28:	2302      	movs	r3, #2
 8003f2a:	213e      	movs	r1, #62	; 0x3e
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fdb8 	bl	8003aa2 <hts221_read_reg>
 8003f32:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003f34:	7a7b      	ldrb	r3, [r7, #9]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	7a3b      	ldrb	r3, [r7, #8]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003f46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003f58:	68fb      	ldr	r3, [r7, #12]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e051      	b.n	8004024 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	7b1a      	ldrb	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <LIS2DW12_RegisterBusIO+0xcc>)
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <LIS2DW12_RegisterBusIO+0xd0>)
 8003fc2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e020      	b.n	8004024 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4798      	blx	r3
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e016      	b.n	8004024 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d112      	bne.n	8004024 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8004008:	2305      	movs	r3, #5
 800400a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800400c:	7afb      	ldrb	r3, [r7, #11]
 800400e:	461a      	mov	r2, r3
 8004010:	2121      	movs	r1, #33	; 0x21
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fd87 	bl	8004b26 <LIS2DW12_Write_Reg>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004024:	68fb      	ldr	r3, [r7, #12]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	08004eb9 	.word	0x08004eb9
 8004034:	08004eef 	.word	0x08004eef

08004038 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3320      	adds	r3, #32
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f001 fa94 	bl	8005574 <lis2dw12_auto_increment_set>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	e04b      	b.n	80040f0 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3320      	adds	r3, #32
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f9a8 	bl	80053b4 <lis2dw12_block_data_update_set>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	e03f      	b.n	80040f0 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3320      	adds	r3, #32
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f001 faa2 	bl	80055c0 <lis2dw12_fifo_mode_set>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	e033      	b.n	80040f0 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3320      	adds	r3, #32
 800408c:	2104      	movs	r1, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff78 	bl	8004f84 <lis2dw12_power_mode_set>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	e027      	b.n	80040f0 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <LIS2DW12_Init+0xc0>)
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3320      	adds	r3, #32
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f869 	bl	8005194 <lis2dw12_data_rate_set>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e010      	b.n	80040f0 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3320      	adds	r3, #32
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f993 	bl	8005400 <lis2dw12_full_scale_set>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	e004      	b.n	80040f0 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	42c80000 	.word	0x42c80000

080040fc <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f888 	bl	800421a <LIS2DW12_ACC_Disable>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	e010      	b.n	8004138 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3320      	adds	r3, #32
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f001 f9fe 	bl	8005552 <lis2dw12_device_id_get>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	e000      	b.n	8004164 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2210      	movs	r2, #16
 8004198:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <LIS2DW12_GetCapabilities+0x58>)
 80041ac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	44c80000 	.word	0x44c80000

080041c8 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e019      	b.n	8004212 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f0:	461a      	mov	r2, r3
 80041f2:	eeb0 0a67 	vmov.f32	s0, s15
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fcb0 	bl	8004b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	e004      	b.n	8004212 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e010      	b.n	8004252 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3320      	adds	r3, #32
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f000 ffac 	bl	8005194 <lis2dw12_data_rate_set>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	e004      	b.n	8004252 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3320      	adds	r3, #32
 800426e:	f107 020b 	add.w	r2, r7, #11
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f8e9 	bl	800544c <lis2dw12_full_scale_get>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	e0a0      	b.n	80043c8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3320      	adds	r3, #32
 800428a:	f107 020a 	add.w	r2, r7, #10
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fec5 	bl	8005020 <lis2dw12_power_mode_get>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	e092      	b.n	80043c8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 80042a2:	7abb      	ldrb	r3, [r7, #10]
 80042a4:	2b1b      	cmp	r3, #27
 80042a6:	f200 8087 	bhi.w	80043b8 <LIS2DW12_ACC_GetSensitivity+0x15c>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <LIS2DW12_ACC_GetSensitivity+0x54>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	08004321 	.word	0x08004321
 80042b4:	0800436d 	.word	0x0800436d
 80042b8:	0800436d 	.word	0x0800436d
 80042bc:	0800436d 	.word	0x0800436d
 80042c0:	0800436d 	.word	0x0800436d
 80042c4:	080043b9 	.word	0x080043b9
 80042c8:	080043b9 	.word	0x080043b9
 80042cc:	080043b9 	.word	0x080043b9
 80042d0:	08004321 	.word	0x08004321
 80042d4:	0800436d 	.word	0x0800436d
 80042d8:	0800436d 	.word	0x0800436d
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	080043b9 	.word	0x080043b9
 80042e4:	080043b9 	.word	0x080043b9
 80042e8:	080043b9 	.word	0x080043b9
 80042ec:	080043b9 	.word	0x080043b9
 80042f0:	08004321 	.word	0x08004321
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	0800436d 	.word	0x0800436d
 80042fc:	0800436d 	.word	0x0800436d
 8004300:	0800436d 	.word	0x0800436d
 8004304:	080043b9 	.word	0x080043b9
 8004308:	080043b9 	.word	0x080043b9
 800430c:	080043b9 	.word	0x080043b9
 8004310:	08004321 	.word	0x08004321
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800436d 	.word	0x0800436d
 800431c:	0800436d 	.word	0x0800436d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d81a      	bhi.n	800435c <LIS2DW12_ACC_GetSensitivity+0x100>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	0800433d 	.word	0x0800433d
 8004330:	08004345 	.word	0x08004345
 8004334:	0800434d 	.word	0x0800434d
 8004338:	08004355 	.word	0x08004355
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8004340:	601a      	str	r2, [r3, #0]
          break;
 8004342:	e012      	b.n	800436a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8004348:	601a      	str	r2, [r3, #0]
          break;
 800434a:	e00e      	b.n	800436a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8004350:	601a      	str	r2, [r3, #0]
          break;
 8004352:	e00a      	b.n	800436a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <LIS2DW12_ACC_GetSensitivity+0x180>)
 8004358:	601a      	str	r2, [r3, #0]
          break;
 800435a:	e006      	b.n	800436a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8004360:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	60fb      	str	r3, [r7, #12]
          break;
 8004368:	bf00      	nop
      }
      break;
 800436a:	e02c      	b.n	80043c6 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	2b03      	cmp	r3, #3
 8004370:	d81a      	bhi.n	80043a8 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	08004389 	.word	0x08004389
 800437c:	08004391 	.word	0x08004391
 8004380:	08004399 	.word	0x08004399
 8004384:	080043a1 	.word	0x080043a1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 800438c:	601a      	str	r2, [r3, #0]
          break;
 800438e:	e012      	b.n	80043b6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8004394:	601a      	str	r2, [r3, #0]
          break;
 8004396:	e00e      	b.n	80043b6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 800439c:	601a      	str	r2, [r3, #0]
          break;
 800439e:	e00a      	b.n	80043b6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80043a4:	601a      	str	r2, [r3, #0]
          break;
 80043a6:	e006      	b.n	80043b6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80043ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	60fb      	str	r3, [r7, #12]
          break;
 80043b4:	bf00      	nop
      }
      break;
 80043b6:	e006      	b.n	80043c6 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80043bc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	60fb      	str	r3, [r7, #12]
      break;
 80043c4:	bf00      	nop
  }

  return ret;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	3f79db23 	.word	0x3f79db23
 80043d4:	3ff9db23 	.word	0x3ff9db23
 80043d8:	4079db23 	.word	0x4079db23
 80043dc:	40f9db23 	.word	0x40f9db23
 80043e0:	bf800000 	.word	0xbf800000
 80043e4:	3e79db23 	.word	0x3e79db23
 80043e8:	3ef9db23 	.word	0x3ef9db23

080043ec <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3320      	adds	r3, #32
 80043fe:	f107 020b 	add.w	r2, r7, #11
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f000 ff0b 	bl	8005220 <lis2dw12_data_rate_get>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	e1d4      	b.n	80047c0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3320      	adds	r3, #32
 800441a:	f107 020a 	add.w	r2, r7, #10
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fdfd 	bl	8005020 <lis2dw12_power_mode_get>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 800442c:	f04f 33ff 	mov.w	r3, #4294967295
 8004430:	e1c6      	b.n	80047c0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8004432:	7afb      	ldrb	r3, [r7, #11]
 8004434:	2b32      	cmp	r3, #50	; 0x32
 8004436:	f200 81bb 	bhi.w	80047b0 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	0800450d 	.word	0x0800450d
 8004444:	08004517 	.word	0x08004517
 8004448:	080045b5 	.word	0x080045b5
 800444c:	080045bd 	.word	0x080045bd
 8004450:	080045c5 	.word	0x080045c5
 8004454:	080045cd 	.word	0x080045cd
 8004458:	080045d5 	.word	0x080045d5
 800445c:	080045dd 	.word	0x080045dd
 8004460:	08004679 	.word	0x08004679
 8004464:	08004715 	.word	0x08004715
 8004468:	080047b1 	.word	0x080047b1
 800446c:	080047b1 	.word	0x080047b1
 8004470:	080047b1 	.word	0x080047b1
 8004474:	080047b1 	.word	0x080047b1
 8004478:	080047b1 	.word	0x080047b1
 800447c:	080047b1 	.word	0x080047b1
 8004480:	080047b1 	.word	0x080047b1
 8004484:	080047b1 	.word	0x080047b1
 8004488:	0800450d 	.word	0x0800450d
 800448c:	080047b1 	.word	0x080047b1
 8004490:	080047b1 	.word	0x080047b1
 8004494:	080047b1 	.word	0x080047b1
 8004498:	080047b1 	.word	0x080047b1
 800449c:	080047b1 	.word	0x080047b1
 80044a0:	080047b1 	.word	0x080047b1
 80044a4:	080047b1 	.word	0x080047b1
 80044a8:	080047b1 	.word	0x080047b1
 80044ac:	080047b1 	.word	0x080047b1
 80044b0:	080047b1 	.word	0x080047b1
 80044b4:	080047b1 	.word	0x080047b1
 80044b8:	080047b1 	.word	0x080047b1
 80044bc:	080047b1 	.word	0x080047b1
 80044c0:	080047b1 	.word	0x080047b1
 80044c4:	080047b1 	.word	0x080047b1
 80044c8:	080047b1 	.word	0x080047b1
 80044cc:	080047b1 	.word	0x080047b1
 80044d0:	080047b1 	.word	0x080047b1
 80044d4:	080047b1 	.word	0x080047b1
 80044d8:	080047b1 	.word	0x080047b1
 80044dc:	080047b1 	.word	0x080047b1
 80044e0:	080047b1 	.word	0x080047b1
 80044e4:	080047b1 	.word	0x080047b1
 80044e8:	080047b1 	.word	0x080047b1
 80044ec:	080047b1 	.word	0x080047b1
 80044f0:	080047b1 	.word	0x080047b1
 80044f4:	080047b1 	.word	0x080047b1
 80044f8:	080047b1 	.word	0x080047b1
 80044fc:	080047b1 	.word	0x080047b1
 8004500:	080047b1 	.word	0x080047b1
 8004504:	080047b1 	.word	0x080047b1
 8004508:	0800450d 	.word	0x0800450d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
      break;
 8004514:	e153      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8004516:	7abb      	ldrb	r3, [r7, #10]
 8004518:	2b1b      	cmp	r3, #27
 800451a:	d843      	bhi.n	80045a4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	0800459d 	.word	0x0800459d
 8004528:	0800459d 	.word	0x0800459d
 800452c:	0800459d 	.word	0x0800459d
 8004530:	0800459d 	.word	0x0800459d
 8004534:	08004595 	.word	0x08004595
 8004538:	080045a5 	.word	0x080045a5
 800453c:	080045a5 	.word	0x080045a5
 8004540:	080045a5 	.word	0x080045a5
 8004544:	0800459d 	.word	0x0800459d
 8004548:	0800459d 	.word	0x0800459d
 800454c:	0800459d 	.word	0x0800459d
 8004550:	0800459d 	.word	0x0800459d
 8004554:	080045a5 	.word	0x080045a5
 8004558:	080045a5 	.word	0x080045a5
 800455c:	080045a5 	.word	0x080045a5
 8004560:	080045a5 	.word	0x080045a5
 8004564:	0800459d 	.word	0x0800459d
 8004568:	0800459d 	.word	0x0800459d
 800456c:	0800459d 	.word	0x0800459d
 8004570:	0800459d 	.word	0x0800459d
 8004574:	08004595 	.word	0x08004595
 8004578:	080045a5 	.word	0x080045a5
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045a5 	.word	0x080045a5
 8004584:	0800459d 	.word	0x0800459d
 8004588:	0800459d 	.word	0x0800459d
 800458c:	0800459d 	.word	0x0800459d
 8004590:	0800459d 	.word	0x0800459d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4a8c      	ldr	r2, [pc, #560]	; (80047c8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8004598:	601a      	str	r2, [r3, #0]
          break;
 800459a:	e00a      	b.n	80045b2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4a8b      	ldr	r2, [pc, #556]	; (80047cc <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80045a0:	601a      	str	r2, [r3, #0]
          break;
 80045a2:	e006      	b.n	80045b2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4a8a      	ldr	r2, [pc, #552]	; (80047d0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80045a8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	60fb      	str	r3, [r7, #12]
          break;
 80045b0:	bf00      	nop
      }
      break;
 80045b2:	e104      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4a84      	ldr	r2, [pc, #528]	; (80047c8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80045b8:	601a      	str	r2, [r3, #0]
      break;
 80045ba:	e100      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4a85      	ldr	r2, [pc, #532]	; (80047d4 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80045c0:	601a      	str	r2, [r3, #0]
      break;
 80045c2:	e0fc      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4a84      	ldr	r2, [pc, #528]	; (80047d8 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80045c8:	601a      	str	r2, [r3, #0]
      break;
 80045ca:	e0f8      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4a83      	ldr	r2, [pc, #524]	; (80047dc <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80045d0:	601a      	str	r2, [r3, #0]
      break;
 80045d2:	e0f4      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4a82      	ldr	r2, [pc, #520]	; (80047e0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80045d8:	601a      	str	r2, [r3, #0]
      break;
 80045da:	e0f0      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80045dc:	7abb      	ldrb	r3, [r7, #10]
 80045de:	2b1b      	cmp	r3, #27
 80045e0:	d842      	bhi.n	8004668 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	08004661 	.word	0x08004661
 80045ec:	08004661 	.word	0x08004661
 80045f0:	08004661 	.word	0x08004661
 80045f4:	08004661 	.word	0x08004661
 80045f8:	08004659 	.word	0x08004659
 80045fc:	08004669 	.word	0x08004669
 8004600:	08004669 	.word	0x08004669
 8004604:	08004669 	.word	0x08004669
 8004608:	08004661 	.word	0x08004661
 800460c:	08004661 	.word	0x08004661
 8004610:	08004661 	.word	0x08004661
 8004614:	08004661 	.word	0x08004661
 8004618:	08004669 	.word	0x08004669
 800461c:	08004669 	.word	0x08004669
 8004620:	08004669 	.word	0x08004669
 8004624:	08004669 	.word	0x08004669
 8004628:	08004661 	.word	0x08004661
 800462c:	08004661 	.word	0x08004661
 8004630:	08004661 	.word	0x08004661
 8004634:	08004661 	.word	0x08004661
 8004638:	08004659 	.word	0x08004659
 800463c:	08004669 	.word	0x08004669
 8004640:	08004669 	.word	0x08004669
 8004644:	08004669 	.word	0x08004669
 8004648:	08004661 	.word	0x08004661
 800464c:	08004661 	.word	0x08004661
 8004650:	08004661 	.word	0x08004661
 8004654:	08004661 	.word	0x08004661
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4a62      	ldr	r2, [pc, #392]	; (80047e4 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 800465c:	601a      	str	r2, [r3, #0]
          break;
 800465e:	e00a      	b.n	8004676 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4a5f      	ldr	r2, [pc, #380]	; (80047e0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8004664:	601a      	str	r2, [r3, #0]
          break;
 8004666:	e006      	b.n	8004676 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4a59      	ldr	r2, [pc, #356]	; (80047d0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800466c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	60fb      	str	r3, [r7, #12]
          break;
 8004674:	bf00      	nop
      }
      break;
 8004676:	e0a2      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8004678:	7abb      	ldrb	r3, [r7, #10]
 800467a:	2b1b      	cmp	r3, #27
 800467c:	d842      	bhi.n	8004704 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046fd 	.word	0x080046fd
 8004688:	080046fd 	.word	0x080046fd
 800468c:	080046fd 	.word	0x080046fd
 8004690:	080046fd 	.word	0x080046fd
 8004694:	080046f5 	.word	0x080046f5
 8004698:	08004705 	.word	0x08004705
 800469c:	08004705 	.word	0x08004705
 80046a0:	08004705 	.word	0x08004705
 80046a4:	080046fd 	.word	0x080046fd
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	080046fd 	.word	0x080046fd
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	08004705 	.word	0x08004705
 80046c0:	08004705 	.word	0x08004705
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	080046f5 	.word	0x080046f5
 80046d8:	08004705 	.word	0x08004705
 80046dc:	08004705 	.word	0x08004705
 80046e0:	08004705 	.word	0x08004705
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	080046fd 	.word	0x080046fd
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	080046fd 	.word	0x080046fd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80046f8:	601a      	str	r2, [r3, #0]
          break;
 80046fa:	e00a      	b.n	8004712 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4a38      	ldr	r2, [pc, #224]	; (80047e0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8004700:	601a      	str	r2, [r3, #0]
          break;
 8004702:	e006      	b.n	8004712 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4a32      	ldr	r2, [pc, #200]	; (80047d0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8004708:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	60fb      	str	r3, [r7, #12]
          break;
 8004710:	bf00      	nop
      }
      break;
 8004712:	e054      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8004714:	7abb      	ldrb	r3, [r7, #10]
 8004716:	2b1b      	cmp	r3, #27
 8004718:	d842      	bhi.n	80047a0 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800471a:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004799 	.word	0x08004799
 8004724:	08004799 	.word	0x08004799
 8004728:	08004799 	.word	0x08004799
 800472c:	08004799 	.word	0x08004799
 8004730:	08004791 	.word	0x08004791
 8004734:	080047a1 	.word	0x080047a1
 8004738:	080047a1 	.word	0x080047a1
 800473c:	080047a1 	.word	0x080047a1
 8004740:	08004799 	.word	0x08004799
 8004744:	08004799 	.word	0x08004799
 8004748:	08004799 	.word	0x08004799
 800474c:	08004799 	.word	0x08004799
 8004750:	080047a1 	.word	0x080047a1
 8004754:	080047a1 	.word	0x080047a1
 8004758:	080047a1 	.word	0x080047a1
 800475c:	080047a1 	.word	0x080047a1
 8004760:	08004799 	.word	0x08004799
 8004764:	08004799 	.word	0x08004799
 8004768:	08004799 	.word	0x08004799
 800476c:	08004799 	.word	0x08004799
 8004770:	08004791 	.word	0x08004791
 8004774:	080047a1 	.word	0x080047a1
 8004778:	080047a1 	.word	0x080047a1
 800477c:	080047a1 	.word	0x080047a1
 8004780:	08004799 	.word	0x08004799
 8004784:	08004799 	.word	0x08004799
 8004788:	08004799 	.word	0x08004799
 800478c:	08004799 	.word	0x08004799
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8004794:	601a      	str	r2, [r3, #0]
          break;
 8004796:	e00a      	b.n	80047ae <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800479c:	601a      	str	r2, [r3, #0]
          break;
 800479e:	e006      	b.n	80047ae <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80047a4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	60fb      	str	r3, [r7, #12]
          break;
 80047ac:	bf00      	nop
      }
      break;
 80047ae:	e006      	b.n	80047be <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80047b4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	60fb      	str	r3, [r7, #12]
      break;
 80047bc:	bf00      	nop
  }

  return ret;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	41480000 	.word	0x41480000
 80047cc:	3fcccccd 	.word	0x3fcccccd
 80047d0:	bf800000 	.word	0xbf800000
 80047d4:	41c80000 	.word	0x41c80000
 80047d8:	42480000 	.word	0x42480000
 80047dc:	42c80000 	.word	0x42c80000
 80047e0:	43480000 	.word	0x43480000
 80047e4:	43c80000 	.word	0x43c80000
 80047e8:	44480000 	.word	0x44480000
 80047ec:	44c80000 	.word	0x44c80000

080047f0 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80047fc:	2200      	movs	r2, #0
 80047fe:	2100      	movs	r1, #0
 8004800:	ed97 0a00 	vldr	s0, [r7]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f805 	bl	8004814 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800480a:	4603      	mov	r3, r0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004820:	460b      	mov	r3, r1
 8004822:	71fb      	strb	r3, [r7, #7]
 8004824:	4613      	mov	r3, r2
 8004826:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800482e:	2b01      	cmp	r3, #1
 8004830:	d109      	bne.n	8004846 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8004832:	79ba      	ldrb	r2, [r7, #6]
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	4619      	mov	r1, r3
 8004838:	ed97 0a02 	vldr	s0, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f98d 	bl	8004b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8004842:	4603      	mov	r3, r0
 8004844:	e008      	b.n	8004858 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8004846:	79ba      	ldrb	r2, [r7, #6]
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	4619      	mov	r1, r3
 800484c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fa9f 	bl	8004d94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8004856:	4603      	mov	r3, r0
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3320      	adds	r3, #32
 8004872:	f107 020b 	add.w	r2, r7, #11
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fde7 	bl	800544c <lis2dw12_full_scale_get>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	e027      	b.n	80048da <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800488a:	7afb      	ldrb	r3, [r7, #11]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d81b      	bhi.n	80048c8 <LIS2DW12_ACC_GetFullScale+0x68>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <LIS2DW12_ACC_GetFullScale+0x38>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048b1 	.word	0x080048b1
 80048a0:	080048b9 	.word	0x080048b9
 80048a4:	080048c1 	.word	0x080048c1
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2202      	movs	r2, #2
 80048ac:	601a      	str	r2, [r3, #0]
      break;
 80048ae:	e013      	b.n	80048d8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2204      	movs	r2, #4
 80048b4:	601a      	str	r2, [r3, #0]
      break;
 80048b6:	e00f      	b.n	80048d8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	601a      	str	r2, [r3, #0]
      break;
 80048be:	e00b      	b.n	80048d8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	601a      	str	r2, [r3, #0]
      break;
 80048c6:	e007      	b.n	80048d8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	60fb      	str	r3, [r7, #12]
      break;
 80048d6:	bf00      	nop
  }

  return ret;
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop

080048e4 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	dd0b      	ble.n	800490c <LIS2DW12_ACC_SetFullScale+0x28>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	dd06      	ble.n	8004908 <LIS2DW12_ACC_SetFullScale+0x24>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	dc01      	bgt.n	8004904 <LIS2DW12_ACC_SetFullScale+0x20>
 8004900:	2302      	movs	r3, #2
 8004902:	e004      	b.n	800490e <LIS2DW12_ACC_SetFullScale+0x2a>
 8004904:	2303      	movs	r3, #3
 8004906:	e002      	b.n	800490e <LIS2DW12_ACC_SetFullScale+0x2a>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <LIS2DW12_ACC_SetFullScale+0x2a>
 800490c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800490e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3320      	adds	r3, #32
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fd71 	bl	8005400 <lis2dw12_full_scale_set>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	e000      	b.n	800492c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3320      	adds	r3, #32
 8004946:	f107 020b 	add.w	r2, r7, #11
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fb67 	bl	8005020 <lis2dw12_power_mode_get>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8004958:	f04f 33ff 	mov.w	r3, #4294967295
 800495c:	e089      	b.n	8004a72 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3320      	adds	r3, #32
 8004962:	f107 020c 	add.w	r2, r7, #12
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fda7 	bl	80054bc <lis2dw12_acceleration_raw_get>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	e07b      	b.n	8004a72 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	2b1b      	cmp	r3, #27
 800497e:	d873      	bhi.n	8004a68 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049f9 	.word	0x080049f9
 800498c:	08004a31 	.word	0x08004a31
 8004990:	08004a31 	.word	0x08004a31
 8004994:	08004a31 	.word	0x08004a31
 8004998:	08004a31 	.word	0x08004a31
 800499c:	08004a69 	.word	0x08004a69
 80049a0:	08004a69 	.word	0x08004a69
 80049a4:	08004a69 	.word	0x08004a69
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	08004a31 	.word	0x08004a31
 80049b0:	08004a31 	.word	0x08004a31
 80049b4:	08004a31 	.word	0x08004a31
 80049b8:	08004a69 	.word	0x08004a69
 80049bc:	08004a69 	.word	0x08004a69
 80049c0:	08004a69 	.word	0x08004a69
 80049c4:	08004a69 	.word	0x08004a69
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004a31 	.word	0x08004a31
 80049d4:	08004a31 	.word	0x08004a31
 80049d8:	08004a31 	.word	0x08004a31
 80049dc:	08004a69 	.word	0x08004a69
 80049e0:	08004a69 	.word	0x08004a69
 80049e4:	08004a69 	.word	0x08004a69
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004a31 	.word	0x08004a31
 80049f0:	08004a31 	.word	0x08004a31
 80049f4:	08004a31 	.word	0x08004a31
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80049f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da00      	bge.n	8004a02 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8004a00:	330f      	adds	r3, #15
 8004a02:	111b      	asrs	r3, r3, #4
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da00      	bge.n	8004a14 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8004a12:	330f      	adds	r3, #15
 8004a14:	111b      	asrs	r3, r3, #4
 8004a16:	b21a      	sxth	r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8004a1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	da00      	bge.n	8004a26 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8004a24:	330f      	adds	r3, #15
 8004a26:	111b      	asrs	r3, r3, #4
 8004a28:	b21a      	sxth	r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	809a      	strh	r2, [r3, #4]
      break;
 8004a2e:	e01f      	b.n	8004a70 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004a30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da00      	bge.n	8004a3a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8004a38:	3303      	adds	r3, #3
 8004a3a:	109b      	asrs	r3, r3, #2
 8004a3c:	b21a      	sxth	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da00      	bge.n	8004a4c <LIS2DW12_ACC_GetAxesRaw+0x118>
 8004a4a:	3303      	adds	r3, #3
 8004a4c:	109b      	asrs	r3, r3, #2
 8004a4e:	b21a      	sxth	r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004a54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	da00      	bge.n	8004a5e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8004a5c:	3303      	adds	r3, #3
 8004a5e:	109b      	asrs	r3, r3, #2
 8004a60:	b21a      	sxth	r2, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	809a      	strh	r2, [r3, #4]
      break;
 8004a66:	e003      	b.n	8004a70 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6c:	617b      	str	r3, [r7, #20]
      break;
 8004a6e:	bf00      	nop
  }

  return ret;
 8004a70:	697b      	ldr	r3, [r7, #20]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop

08004a7c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004a8c:	f107 0310 	add.w	r3, r7, #16
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ff4e 	bl	8004934 <LIS2DW12_ACC_GetAxesRaw>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	e03c      	b.n	8004b1e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004aa4:	f107 030c 	add.w	r3, r7, #12
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fbd6 	bl	800425c <LIS2DW12_ACC_GetSensitivity>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	e030      	b.n	8004b1e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004abc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad4:	ee17 2a90 	vmov	r2, s15
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004adc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af4:	ee17 2a90 	vmov	r2, s15
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004afc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b14:	ee17 2a90 	vmov	r2, s15
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	70fb      	strb	r3, [r7, #3]
 8004b32:	4613      	mov	r3, r2
 8004b34:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f103 0020 	add.w	r0, r3, #32
 8004b3c:	1cba      	adds	r2, r7, #2
 8004b3e:	78f9      	ldrb	r1, [r7, #3]
 8004b40:	2301      	movs	r3, #1
 8004b42:	f000 fa07 	bl	8004f54 <lis2dw12_write_reg>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b50:	e000      	b.n	8004b54 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	71fb      	strb	r3, [r7, #7]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d80b      	bhi.n	8004b90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c41 	.word	0x08004c41
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004b90:	79bb      	ldrb	r3, [r7, #6]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8004b96:	2304      	movs	r3, #4
 8004b98:	75fb      	strb	r3, [r7, #23]
          break;
 8004b9a:	e002      	b.n	8004ba2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004b9c:	2314      	movs	r3, #20
 8004b9e:	75fb      	strb	r3, [r7, #23]
          break;
 8004ba0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8004ba2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ba6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	d400      	bmi.n	8004bb6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8004bb4:	e05a      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8004bb6:	4b6f      	ldr	r3, [pc, #444]	; (8004d74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8004bb8:	60bb      	str	r3, [r7, #8]
      break;
 8004bba:	e057      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004bbc:	79bb      	ldrb	r3, [r7, #6]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d002      	beq.n	8004bc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004bc6:	e002      	b.n	8004bce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004bc8:	2313      	movs	r3, #19
 8004bca:	75fb      	strb	r3, [r7, #23]
          break;
 8004bcc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004bce:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bd2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	dc00      	bgt.n	8004be2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8004be0:	e044      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004be4:	60bb      	str	r3, [r7, #8]
      break;
 8004be6:	e041      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004be8:	79bb      	ldrb	r3, [r7, #6]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d002      	beq.n	8004bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8004bf2:	e002      	b.n	8004bfa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004bf4:	2312      	movs	r3, #18
 8004bf6:	75fb      	strb	r3, [r7, #23]
          break;
 8004bf8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bfe:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	dc00      	bgt.n	8004c0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004c0c:	e02e      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004c0e:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004c10:	60bb      	str	r3, [r7, #8]
      break;
 8004c12:	e02b      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004c14:	79bb      	ldrb	r3, [r7, #6]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d002      	beq.n	8004c20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c1e:	e002      	b.n	8004c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004c20:	2311      	movs	r3, #17
 8004c22:	75fb      	strb	r3, [r7, #23]
          break;
 8004c24:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c2a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	dc00      	bgt.n	8004c3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004c38:	e018      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004c3a:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004c3c:	60bb      	str	r3, [r7, #8]
      break;
 8004c3e:	e015      	b.n	8004c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004c40:	79bb      	ldrb	r3, [r7, #6]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d002      	beq.n	8004c4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]
          break;
 8004c4a:	e002      	b.n	8004c52 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	75fb      	strb	r3, [r7, #23]
          break;
 8004c50:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c56:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	dc00      	bgt.n	8004c66 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8004c64:	e001      	b.n	8004c6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8004c66:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004c68:	60bb      	str	r3, [r7, #8]
      break;
 8004c6a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c70:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004d80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8004c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7c:	d801      	bhi.n	8004c82 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e04d      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	d801      	bhi.n	8004c98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e042      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	d801      	bhi.n	8004cae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8004caa:	2303      	movs	r3, #3
 8004cac:	e037      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004cae:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cb2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004d84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8004cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cbe:	d801      	bhi.n	8004cc4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	e02c      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8004ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd4:	d801      	bhi.n	8004cda <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004cd6:	2305      	movs	r3, #5
 8004cd8:	e021      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cde:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cea:	d801      	bhi.n	8004cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8004cec:	2306      	movs	r3, #6
 8004cee:	e016      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cf4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004d8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	d801      	bhi.n	8004d06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004d02:	2307      	movs	r3, #7
 8004d04:	e00b      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d0a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004d90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8004d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d16:	d801      	bhi.n	8004d1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	e000      	b.n	8004d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004d1c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8004d1e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3320      	adds	r3, #32
 8004d24:	7dba      	ldrb	r2, [r7, #22]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fa33 	bl	8005194 <lis2dw12_data_rate_set>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295
 8004d38:	e018      	b.n	8004d6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3320      	adds	r3, #32
 8004d3e:	7dfa      	ldrb	r2, [r7, #23]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f91e 	bl	8004f84 <lis2dw12_power_mode_set>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	e00b      	b.n	8004d6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	79fa      	ldrb	r2, [r7, #7]
 8004d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	79ba      	ldrb	r2, [r7, #6]
 8004d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	41480000 	.word	0x41480000
 8004d78:	43480000 	.word	0x43480000
 8004d7c:	43480000 	.word	0x43480000
 8004d80:	3fcccccd 	.word	0x3fcccccd
 8004d84:	42480000 	.word	0x42480000
 8004d88:	42c80000 	.word	0x42c80000
 8004d8c:	43c80000 	.word	0x43c80000
 8004d90:	44480000 	.word	0x44480000

08004d94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004da0:	460b      	mov	r3, r1
 8004da2:	71fb      	strb	r3, [r7, #7]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	79fa      	ldrb	r2, [r7, #7]
 8004dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	79ba      	ldrb	r2, [r7, #6]
 8004db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8004db8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004e7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	d801      	bhi.n	8004dce <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8004dca:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8004dcc:	e04d      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8004dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dd2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d801      	bhi.n	8004de4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8004de0:	4b28      	ldr	r3, [pc, #160]	; (8004e84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8004de2:	e042      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004de8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df4:	d801      	bhi.n	8004dfa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004df6:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004df8:	e037      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8004dfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dfe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004e8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	d801      	bhi.n	8004e10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004e0c:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8004e0e:	e02c      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004e10:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e14:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004e94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	d801      	bhi.n	8004e26 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004e24:	e021      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e2a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004e9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	d801      	bhi.n	8004e3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8004e3a:	e016      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8004e3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e40:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4c:	d801      	bhi.n	8004e52 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8004e4e:	4b16      	ldr	r3, [pc, #88]	; (8004ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004e50:	e00b      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8004e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e56:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004eac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	d801      	bhi.n	8004e68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8004e66:	e000      	b.n	8004e6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004e68:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	3fcccccd 	.word	0x3fcccccd
 8004e80:	3fcccccd 	.word	0x3fcccccd
 8004e84:	41480000 	.word	0x41480000
 8004e88:	41c80000 	.word	0x41c80000
 8004e8c:	42480000 	.word	0x42480000
 8004e90:	42480000 	.word	0x42480000
 8004e94:	42c80000 	.word	0x42c80000
 8004e98:	42c80000 	.word	0x42c80000
 8004e9c:	43480000 	.word	0x43480000
 8004ea0:	43480000 	.word	0x43480000
 8004ea4:	43c80000 	.word	0x43c80000
 8004ea8:	43c80000 	.word	0x43c80000
 8004eac:	44480000 	.word	0x44480000
 8004eb0:	44480000 	.word	0x44480000
 8004eb4:	44c80000 	.word	0x44c80000

08004eb8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	72fb      	strb	r3, [r7, #11]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	695c      	ldr	r4, [r3, #20]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	7b1b      	ldrb	r3, [r3, #12]
 8004ed8:	b298      	uxth	r0, r3
 8004eda:	7afb      	ldrb	r3, [r7, #11]
 8004edc:	b299      	uxth	r1, r3
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	47a0      	blx	r4
 8004ee4:	4603      	mov	r3, r0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd90      	pop	{r4, r7, pc}

08004eee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004eee:	b590      	push	{r4, r7, lr}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	460b      	mov	r3, r1
 8004efc:	72fb      	strb	r3, [r7, #11]
 8004efe:	4613      	mov	r3, r2
 8004f00:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	691c      	ldr	r4, [r3, #16]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	7b1b      	ldrb	r3, [r3, #12]
 8004f0e:	b298      	uxth	r0, r3
 8004f10:	7afb      	ldrb	r3, [r7, #11]
 8004f12:	b299      	uxth	r1, r3
 8004f14:	893b      	ldrh	r3, [r7, #8]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	47a0      	blx	r4
 8004f1a:	4603      	mov	r3, r0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd90      	pop	{r4, r7, pc}

08004f24 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	460b      	mov	r3, r1
 8004f32:	72fb      	strb	r3, [r7, #11]
 8004f34:	4613      	mov	r3, r2
 8004f36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685c      	ldr	r4, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68d8      	ldr	r0, [r3, #12]
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	7af9      	ldrb	r1, [r7, #11]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	47a0      	blx	r4
 8004f48:	6178      	str	r0, [r7, #20]

  return ret;
 8004f4a:	697b      	ldr	r3, [r7, #20]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd90      	pop	{r4, r7, pc}

08004f54 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	460b      	mov	r3, r1
 8004f62:	72fb      	strb	r3, [r7, #11]
 8004f64:	4613      	mov	r3, r2
 8004f66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681c      	ldr	r4, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68d8      	ldr	r0, [r3, #12]
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	7af9      	ldrb	r1, [r7, #11]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	47a0      	blx	r4
 8004f78:	6178      	str	r0, [r7, #20]

  return ret;
 8004f7a:	697b      	ldr	r3, [r7, #20]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}

08004f84 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004f90:	f107 0210 	add.w	r2, r7, #16
 8004f94:	2301      	movs	r3, #1
 8004f96:	2120      	movs	r1, #32
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ffc3 	bl	8004f24 <lis2dw12_read_reg>
 8004f9e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d118      	bne.n	8004fd8 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	089b      	lsrs	r3, r3, #2
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	7c3b      	ldrb	r3, [r7, #16]
 8004fb2:	f362 0383 	bfi	r3, r2, #2, #2
 8004fb6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	7c3b      	ldrb	r3, [r7, #16]
 8004fc2:	f362 0301 	bfi	r3, r2, #0, #2
 8004fc6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004fc8:	f107 0210 	add.w	r2, r7, #16
 8004fcc:	2301      	movs	r3, #1
 8004fce:	2120      	movs	r1, #32
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ffbf 	bl	8004f54 <lis2dw12_write_reg>
 8004fd6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004fde:	f107 020c 	add.w	r2, r7, #12
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	2125      	movs	r1, #37	; 0x25
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ff9c 	bl	8004f24 <lis2dw12_read_reg>
 8004fec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d110      	bne.n	8005016 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	7b3b      	ldrb	r3, [r7, #12]
 8005000:	f362 0382 	bfi	r3, r2, #2, #1
 8005004:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8005006:	f107 020c 	add.w	r2, r7, #12
 800500a:	2301      	movs	r3, #1
 800500c:	2125      	movs	r1, #37	; 0x25
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff ffa0 	bl	8004f54 <lis2dw12_write_reg>
 8005014:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005016:	697b      	ldr	r3, [r7, #20]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800502a:	f107 0210 	add.w	r2, r7, #16
 800502e:	2301      	movs	r3, #1
 8005030:	2120      	movs	r1, #32
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff ff76 	bl	8004f24 <lis2dw12_read_reg>
 8005038:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 80a3 	bne.w	8005188 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8005042:	f107 020c 	add.w	r2, r7, #12
 8005046:	2301      	movs	r3, #1
 8005048:	2125      	movs	r1, #37	; 0x25
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff ff6a 	bl	8004f24 <lis2dw12_read_reg>
 8005050:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8005052:	7b3b      	ldrb	r3, [r7, #12]
 8005054:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	011a      	lsls	r2, r3, #4
 800505c:	7c3b      	ldrb	r3, [r7, #16]
 800505e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005062:	b2db      	uxtb	r3, r3
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8005068:	7c3a      	ldrb	r2, [r7, #16]
 800506a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800506e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8005070:	4413      	add	r3, r2
 8005072:	2b1b      	cmp	r3, #27
 8005074:	f200 8084 	bhi.w	8005180 <lis2dw12_power_mode_get+0x160>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <lis2dw12_power_mode_get+0x60>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	08005111 	.word	0x08005111
 8005084:	08005109 	.word	0x08005109
 8005088:	08005101 	.word	0x08005101
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080050f1 	.word	0x080050f1
 8005094:	08005181 	.word	0x08005181
 8005098:	08005181 	.word	0x08005181
 800509c:	08005181 	.word	0x08005181
 80050a0:	08005131 	.word	0x08005131
 80050a4:	08005129 	.word	0x08005129
 80050a8:	08005121 	.word	0x08005121
 80050ac:	08005119 	.word	0x08005119
 80050b0:	08005181 	.word	0x08005181
 80050b4:	08005181 	.word	0x08005181
 80050b8:	08005181 	.word	0x08005181
 80050bc:	08005181 	.word	0x08005181
 80050c0:	08005159 	.word	0x08005159
 80050c4:	08005151 	.word	0x08005151
 80050c8:	08005149 	.word	0x08005149
 80050cc:	08005141 	.word	0x08005141
 80050d0:	08005139 	.word	0x08005139
 80050d4:	08005181 	.word	0x08005181
 80050d8:	08005181 	.word	0x08005181
 80050dc:	08005181 	.word	0x08005181
 80050e0:	08005179 	.word	0x08005179
 80050e4:	08005171 	.word	0x08005171
 80050e8:	08005169 	.word	0x08005169
 80050ec:	08005161 	.word	0x08005161
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2204      	movs	r2, #4
 80050f4:	701a      	strb	r2, [r3, #0]
        break;
 80050f6:	e048      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2203      	movs	r2, #3
 80050fc:	701a      	strb	r2, [r3, #0]
        break;
 80050fe:	e044      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2202      	movs	r2, #2
 8005104:	701a      	strb	r2, [r3, #0]
        break;
 8005106:	e040      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
        break;
 800510e:	e03c      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
        break;
 8005116:	e038      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	220b      	movs	r2, #11
 800511c:	701a      	strb	r2, [r3, #0]
        break;
 800511e:	e034      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	220a      	movs	r2, #10
 8005124:	701a      	strb	r2, [r3, #0]
        break;
 8005126:	e030      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2209      	movs	r2, #9
 800512c:	701a      	strb	r2, [r3, #0]
        break;
 800512e:	e02c      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2208      	movs	r2, #8
 8005134:	701a      	strb	r2, [r3, #0]
        break;
 8005136:	e028      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2214      	movs	r2, #20
 800513c:	701a      	strb	r2, [r3, #0]
        break;
 800513e:	e024      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2213      	movs	r2, #19
 8005144:	701a      	strb	r2, [r3, #0]
        break;
 8005146:	e020      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2212      	movs	r2, #18
 800514c:	701a      	strb	r2, [r3, #0]
        break;
 800514e:	e01c      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2211      	movs	r2, #17
 8005154:	701a      	strb	r2, [r3, #0]
        break;
 8005156:	e018      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2210      	movs	r2, #16
 800515c:	701a      	strb	r2, [r3, #0]
        break;
 800515e:	e014      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	221b      	movs	r2, #27
 8005164:	701a      	strb	r2, [r3, #0]
        break;
 8005166:	e010      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	221a      	movs	r2, #26
 800516c:	701a      	strb	r2, [r3, #0]
        break;
 800516e:	e00c      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2219      	movs	r2, #25
 8005174:	701a      	strb	r2, [r3, #0]
        break;
 8005176:	e008      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2218      	movs	r2, #24
 800517c:	701a      	strb	r2, [r3, #0]
        break;
 800517e:	e004      	b.n	800518a <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2204      	movs	r2, #4
 8005184:	701a      	strb	r2, [r3, #0]
        break;
 8005186:	e000      	b.n	800518a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8005188:	bf00      	nop

  return ret;
 800518a:	697b      	ldr	r3, [r7, #20]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80051a0:	f107 0210 	add.w	r2, r7, #16
 80051a4:	2301      	movs	r3, #1
 80051a6:	2120      	movs	r1, #32
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff febb 	bl	8004f24 <lis2dw12_read_reg>
 80051ae:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	7c3b      	ldrb	r3, [r7, #16]
 80051c0:	f362 1307 	bfi	r3, r2, #4, #4
 80051c4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80051c6:	f107 0210 	add.w	r2, r7, #16
 80051ca:	2301      	movs	r3, #1
 80051cc:	2120      	movs	r1, #32
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fec0 	bl	8004f54 <lis2dw12_write_reg>
 80051d4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80051dc:	f107 020c 	add.w	r2, r7, #12
 80051e0:	2301      	movs	r3, #1
 80051e2:	2122      	movs	r1, #34	; 0x22
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fe9d 	bl	8004f24 <lis2dw12_read_reg>
 80051ea:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d110      	bne.n	8005214 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	7b3b      	ldrb	r3, [r7, #12]
 80051fe:	f362 0301 	bfi	r3, r2, #0, #2
 8005202:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8005204:	f107 020c 	add.w	r2, r7, #12
 8005208:	2301      	movs	r3, #1
 800520a:	2122      	movs	r1, #34	; 0x22
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fea1 	bl	8004f54 <lis2dw12_write_reg>
 8005212:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005214:	697b      	ldr	r3, [r7, #20]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800522a:	f107 0210 	add.w	r2, r7, #16
 800522e:	2301      	movs	r3, #1
 8005230:	2120      	movs	r1, #32
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fe76 	bl	8004f24 <lis2dw12_read_reg>
 8005238:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 80b3 	bne.w	80053a8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8005242:	f107 020c 	add.w	r2, r7, #12
 8005246:	2301      	movs	r3, #1
 8005248:	2122      	movs	r1, #34	; 0x22
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fe6a 	bl	8004f24 <lis2dw12_read_reg>
 8005250:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8005252:	7b3b      	ldrb	r3, [r7, #12]
 8005254:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005258:	b2db      	uxtb	r3, r3
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	7c3a      	ldrb	r2, [r7, #16]
 800525e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	4413      	add	r3, r2
 8005266:	2b32      	cmp	r3, #50	; 0x32
 8005268:	f200 809a 	bhi.w	80053a0 <lis2dw12_data_rate_get+0x180>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <lis2dw12_data_rate_get+0x54>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005341 	.word	0x08005341
 8005278:	08005349 	.word	0x08005349
 800527c:	08005351 	.word	0x08005351
 8005280:	08005359 	.word	0x08005359
 8005284:	08005361 	.word	0x08005361
 8005288:	08005369 	.word	0x08005369
 800528c:	08005371 	.word	0x08005371
 8005290:	08005379 	.word	0x08005379
 8005294:	08005381 	.word	0x08005381
 8005298:	08005389 	.word	0x08005389
 800529c:	080053a1 	.word	0x080053a1
 80052a0:	080053a1 	.word	0x080053a1
 80052a4:	080053a1 	.word	0x080053a1
 80052a8:	080053a1 	.word	0x080053a1
 80052ac:	080053a1 	.word	0x080053a1
 80052b0:	080053a1 	.word	0x080053a1
 80052b4:	080053a1 	.word	0x080053a1
 80052b8:	080053a1 	.word	0x080053a1
 80052bc:	08005399 	.word	0x08005399
 80052c0:	080053a1 	.word	0x080053a1
 80052c4:	080053a1 	.word	0x080053a1
 80052c8:	080053a1 	.word	0x080053a1
 80052cc:	080053a1 	.word	0x080053a1
 80052d0:	080053a1 	.word	0x080053a1
 80052d4:	080053a1 	.word	0x080053a1
 80052d8:	080053a1 	.word	0x080053a1
 80052dc:	080053a1 	.word	0x080053a1
 80052e0:	080053a1 	.word	0x080053a1
 80052e4:	080053a1 	.word	0x080053a1
 80052e8:	080053a1 	.word	0x080053a1
 80052ec:	080053a1 	.word	0x080053a1
 80052f0:	080053a1 	.word	0x080053a1
 80052f4:	080053a1 	.word	0x080053a1
 80052f8:	080053a1 	.word	0x080053a1
 80052fc:	080053a1 	.word	0x080053a1
 8005300:	080053a1 	.word	0x080053a1
 8005304:	080053a1 	.word	0x080053a1
 8005308:	080053a1 	.word	0x080053a1
 800530c:	080053a1 	.word	0x080053a1
 8005310:	080053a1 	.word	0x080053a1
 8005314:	080053a1 	.word	0x080053a1
 8005318:	080053a1 	.word	0x080053a1
 800531c:	080053a1 	.word	0x080053a1
 8005320:	080053a1 	.word	0x080053a1
 8005324:	080053a1 	.word	0x080053a1
 8005328:	080053a1 	.word	0x080053a1
 800532c:	080053a1 	.word	0x080053a1
 8005330:	080053a1 	.word	0x080053a1
 8005334:	080053a1 	.word	0x080053a1
 8005338:	080053a1 	.word	0x080053a1
 800533c:	08005391 	.word	0x08005391
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
        break;
 8005346:	e030      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2201      	movs	r2, #1
 800534c:	701a      	strb	r2, [r3, #0]
        break;
 800534e:	e02c      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2202      	movs	r2, #2
 8005354:	701a      	strb	r2, [r3, #0]
        break;
 8005356:	e028      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2203      	movs	r2, #3
 800535c:	701a      	strb	r2, [r3, #0]
        break;
 800535e:	e024      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2204      	movs	r2, #4
 8005364:	701a      	strb	r2, [r3, #0]
        break;
 8005366:	e020      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2205      	movs	r2, #5
 800536c:	701a      	strb	r2, [r3, #0]
        break;
 800536e:	e01c      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2206      	movs	r2, #6
 8005374:	701a      	strb	r2, [r3, #0]
        break;
 8005376:	e018      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2207      	movs	r2, #7
 800537c:	701a      	strb	r2, [r3, #0]
        break;
 800537e:	e014      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2208      	movs	r2, #8
 8005384:	701a      	strb	r2, [r3, #0]
        break;
 8005386:	e010      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2209      	movs	r2, #9
 800538c:	701a      	strb	r2, [r3, #0]
        break;
 800538e:	e00c      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2232      	movs	r2, #50	; 0x32
 8005394:	701a      	strb	r2, [r3, #0]
        break;
 8005396:	e008      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2212      	movs	r2, #18
 800539c:	701a      	strb	r2, [r3, #0]
        break;
 800539e:	e004      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
        break;
 80053a6:	e000      	b.n	80053aa <lis2dw12_data_rate_get+0x18a>
    }
  }
 80053a8:	bf00      	nop

  return ret;
 80053aa:	697b      	ldr	r3, [r7, #20]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80053c0:	f107 0208 	add.w	r2, r7, #8
 80053c4:	2301      	movs	r3, #1
 80053c6:	2121      	movs	r1, #33	; 0x21
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fdab 	bl	8004f24 <lis2dw12_read_reg>
 80053ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	7a3b      	ldrb	r3, [r7, #8]
 80053e0:	f362 03c3 	bfi	r3, r2, #3, #1
 80053e4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80053e6:	f107 0208 	add.w	r2, r7, #8
 80053ea:	2301      	movs	r3, #1
 80053ec:	2121      	movs	r1, #33	; 0x21
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff fdb0 	bl	8004f54 <lis2dw12_write_reg>
 80053f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800540c:	f107 0208 	add.w	r2, r7, #8
 8005410:	2301      	movs	r3, #1
 8005412:	2125      	movs	r1, #37	; 0x25
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fd85 	bl	8004f24 <lis2dw12_read_reg>
 800541a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10f      	bne.n	8005442 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	b2da      	uxtb	r2, r3
 800542a:	7a3b      	ldrb	r3, [r7, #8]
 800542c:	f362 1305 	bfi	r3, r2, #4, #2
 8005430:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8005432:	f107 0208 	add.w	r2, r7, #8
 8005436:	2301      	movs	r3, #1
 8005438:	2125      	movs	r1, #37	; 0x25
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fd8a 	bl	8004f54 <lis2dw12_write_reg>
 8005440:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8005456:	f107 0208 	add.w	r2, r7, #8
 800545a:	2301      	movs	r3, #1
 800545c:	2125      	movs	r1, #37	; 0x25
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fd60 	bl	8004f24 <lis2dw12_read_reg>
 8005464:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8005466:	7a3b      	ldrb	r3, [r7, #8]
 8005468:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b03      	cmp	r3, #3
 8005470:	d81a      	bhi.n	80054a8 <lis2dw12_full_scale_get+0x5c>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <lis2dw12_full_scale_get+0x2c>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005489 	.word	0x08005489
 800547c:	08005491 	.word	0x08005491
 8005480:	08005499 	.word	0x08005499
 8005484:	080054a1 	.word	0x080054a1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
      break;
 800548e:	e00f      	b.n	80054b0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
      break;
 8005496:	e00b      	b.n	80054b0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]
      break;
 800549e:	e007      	b.n	80054b0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2203      	movs	r2, #3
 80054a4:	701a      	strb	r2, [r3, #0]
      break;
 80054a6:	e003      	b.n	80054b0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
      break;
 80054ae:	bf00      	nop
  }

  return ret;
 80054b0:	68fb      	ldr	r3, [r7, #12]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop

080054bc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80054c6:	f107 020c 	add.w	r2, r7, #12
 80054ca:	2306      	movs	r3, #6
 80054cc:	2128      	movs	r1, #40	; 0x28
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fd28 	bl	8004f24 <lis2dw12_read_reg>
 80054d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80054d6:	7b7b      	ldrb	r3, [r7, #13]
 80054d8:	b21a      	sxth	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	7b3b      	ldrb	r3, [r7, #12]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	b21a      	sxth	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	3302      	adds	r3, #2
 80054fe:	b212      	sxth	r2, r2
 8005500:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3302      	adds	r3, #2
 8005506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800550a:	b29b      	uxth	r3, r3
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	b29a      	uxth	r2, r3
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	b29b      	uxth	r3, r3
 8005514:	4413      	add	r3, r2
 8005516:	b29a      	uxth	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3302      	adds	r3, #2
 800551c:	b212      	sxth	r2, r2
 800551e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005520:	7c7a      	ldrb	r2, [r7, #17]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3304      	adds	r3, #4
 8005526:	b212      	sxth	r2, r2
 8005528:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	3304      	adds	r3, #4
 800552e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005532:	b29b      	uxth	r3, r3
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	b29a      	uxth	r2, r3
 8005538:	7c3b      	ldrb	r3, [r7, #16]
 800553a:	b29b      	uxth	r3, r3
 800553c:	4413      	add	r3, r2
 800553e:	b29a      	uxth	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3304      	adds	r3, #4
 8005544:	b212      	sxth	r2, r2
 8005546:	801a      	strh	r2, [r3, #0]

  return ret;
 8005548:	697b      	ldr	r3, [r7, #20]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800555c:	2301      	movs	r3, #1
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	210f      	movs	r1, #15
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fcde 	bl	8004f24 <lis2dw12_read_reg>
 8005568:	60f8      	str	r0, [r7, #12]

  return ret;
 800556a:	68fb      	ldr	r3, [r7, #12]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8005580:	f107 0208 	add.w	r2, r7, #8
 8005584:	2301      	movs	r3, #1
 8005586:	2121      	movs	r1, #33	; 0x21
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fccb 	bl	8004f24 <lis2dw12_read_reg>
 800558e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	b2da      	uxtb	r2, r3
 800559e:	7a3b      	ldrb	r3, [r7, #8]
 80055a0:	f362 0382 	bfi	r3, r2, #2, #1
 80055a4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80055a6:	f107 0208 	add.w	r2, r7, #8
 80055aa:	2301      	movs	r3, #1
 80055ac:	2121      	movs	r1, #33	; 0x21
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fcd0 	bl	8004f54 <lis2dw12_write_reg>
 80055b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80055cc:	f107 0208 	add.w	r2, r7, #8
 80055d0:	2301      	movs	r3, #1
 80055d2:	212e      	movs	r1, #46	; 0x2e
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fca5 	bl	8004f24 <lis2dw12_read_reg>
 80055da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	7a3b      	ldrb	r3, [r7, #8]
 80055ec:	f362 1347 	bfi	r3, r2, #5, #3
 80055f0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80055f2:	f107 0208 	add.w	r2, r7, #8
 80055f6:	2301      	movs	r3, #1
 80055f8:	212e      	movs	r1, #46	; 0x2e
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fcaa 	bl	8004f54 <lis2dw12_write_reg>
 8005600:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8005620:	f04f 33ff 	mov.w	r3, #4294967295
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e067      	b.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	7b1a      	ldrb	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <LIS2MDL_RegisterBusIO+0xf8>)
 8005664:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a27      	ldr	r2, [pc, #156]	; (8005708 <LIS2MDL_RegisterBusIO+0xfc>)
 800566a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e036      	b.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4798      	blx	r3
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8005696:	f04f 33ff 	mov.w	r3, #4294967295
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e02c      	b.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d028      	beq.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d123      	bne.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10d      	bne.n	80056d4 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80056b8:	2334      	movs	r3, #52	; 0x34
 80056ba:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	461a      	mov	r2, r3
 80056c0:	2162      	movs	r1, #98	; 0x62
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fb1b 	bl	8005cfe <LIS2MDL_Write_Reg>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d014      	beq.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	e012      	b.n	80056fa <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d101      	bne.n	80056e0 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	e00c      	b.n	80056fa <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3320      	adds	r3, #32
 80056e4:	2101      	movs	r1, #1
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ff70 	bl	80065cc <lis2mdl_i2c_interface_set>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80056f2:	f04f 33ff 	mov.w	r3, #4294967295
 80056f6:	e000      	b.n	80056fa <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	08005d55 	.word	0x08005d55
 8005708:	08005dd7 	.word	0x08005dd7

0800570c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d144      	bne.n	80057a6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800571c:	f107 0208 	add.w	r2, r7, #8
 8005720:	2301      	movs	r3, #1
 8005722:	2162      	movs	r1, #98	; 0x62
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fb97 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	e06c      	b.n	8005810 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005736:	f107 020c 	add.w	r2, r7, #12
 800573a:	2301      	movs	r3, #1
 800573c:	2160      	movs	r1, #96	; 0x60
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb8a 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e05f      	b.n	8005810 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8005750:	7a3b      	ldrb	r3, [r7, #8]
 8005752:	f043 0310 	orr.w	r3, r3, #16
 8005756:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8005758:	7a3b      	ldrb	r3, [r7, #8]
 800575a:	f36f 0341 	bfc	r3, #1, #1
 800575e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005760:	7b3b      	ldrb	r3, [r7, #12]
 8005762:	2202      	movs	r2, #2
 8005764:	f362 0301 	bfi	r3, r2, #0, #2
 8005768:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800576a:	7b3b      	ldrb	r3, [r7, #12]
 800576c:	f043 030c 	orr.w	r3, r3, #12
 8005770:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8005772:	f107 0208 	add.w	r2, r7, #8
 8005776:	2301      	movs	r3, #1
 8005778:	2162      	movs	r1, #98	; 0x62
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fcab 	bl	80060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8005786:	f04f 33ff 	mov.w	r3, #4294967295
 800578a:	e041      	b.n	8005810 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800578c:	f107 020c 	add.w	r2, r7, #12
 8005790:	2301      	movs	r3, #1
 8005792:	2160      	movs	r1, #96	; 0x60
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fc9e 	bl	80060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d032      	beq.n	8005806 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80057a0:	f04f 33ff 	mov.w	r3, #4294967295
 80057a4:	e034      	b.n	8005810 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3320      	adds	r3, #32
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fe65 	bl	800647c <lis2mdl_block_data_update_set>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	e028      	b.n	8005810 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3320      	adds	r3, #32
 80057c2:	2102      	movs	r1, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fdd4 	bl	8006372 <lis2mdl_operating_mode_set>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80057d0:	f04f 33ff 	mov.w	r3, #4294967295
 80057d4:	e01c      	b.n	8005810 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3320      	adds	r3, #32
 80057da:	2103      	movs	r1, #3
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fdee 	bl	80063be <lis2mdl_data_rate_set>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ec:	e010      	b.n	8005810 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3320      	adds	r3, #32
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fec3 	bl	8006580 <lis2mdl_self_test_set>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	e004      	b.n	8005810 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8a5 	bl	8005970 <LIS2MDL_MAG_Disable>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	e004      	b.n	800583c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d10b      	bne.n	800586e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8005856:	2301      	movs	r3, #1
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	214f      	movs	r1, #79	; 0x4f
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fafb 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	e00c      	b.n	8005888 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3320      	adds	r3, #32
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fe72 	bl	800655e <lis2mdl_device_id_get>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005880:	f04f 33ff 	mov.w	r3, #4294967295
 8005884:	e000      	b.n	8005888 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2200      	movs	r2, #0
 80058b0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2232      	movs	r2, #50	; 0x32
 80058c2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <LIS2MDL_GetCapabilities+0x58>)
 80058d8:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	42c80000 	.word	0x42c80000

080058ec <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e032      	b.n	8005968 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d11d      	bne.n	8005946 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800590a:	f107 020c 	add.w	r2, r7, #12
 800590e:	2301      	movs	r3, #1
 8005910:	2160      	movs	r1, #96	; 0x60
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 faa0 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	e021      	b.n	8005968 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005924:	7b3b      	ldrb	r3, [r7, #12]
 8005926:	f36f 0301 	bfc	r3, #0, #2
 800592a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800592c:	f107 020c 	add.w	r2, r7, #12
 8005930:	2301      	movs	r3, #1
 8005932:	2160      	movs	r1, #96	; 0x60
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fbce 	bl	80060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	e010      	b.n	8005968 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3320      	adds	r3, #32
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fd10 	bl	8006372 <lis2mdl_operating_mode_set>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
 800595c:	e004      	b.n	8005968 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e033      	b.n	80059ee <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d11e      	bne.n	80059cc <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800598e:	f107 020c 	add.w	r2, r7, #12
 8005992:	2301      	movs	r3, #1
 8005994:	2160      	movs	r1, #96	; 0x60
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa5e 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e022      	b.n	80059ee <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80059a8:	7b3b      	ldrb	r3, [r7, #12]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f362 0301 	bfi	r3, r2, #0, #2
 80059b0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80059b2:	f107 020c 	add.w	r2, r7, #12
 80059b6:	2301      	movs	r3, #1
 80059b8:	2160      	movs	r1, #96	; 0x60
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fb8b 	bl	80060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	e010      	b.n	80059ee <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3320      	adds	r3, #32
 80059d0:	2102      	movs	r1, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fccd 	bl	8006372 <lis2mdl_operating_mode_set>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	e004      	b.n	80059ee <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005a06:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3320      	adds	r3, #32
 8005a2a:	f107 020b 	add.w	r2, r7, #11
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fceb 	bl	800640c <lis2mdl_data_rate_get>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	e023      	b.n	8005a8a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d81b      	bhi.n	8005a80 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a69 	.word	0x08005a69
 8005a58:	08005a71 	.word	0x08005a71
 8005a5c:	08005a79 	.word	0x08005a79
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8005a64:	601a      	str	r2, [r3, #0]
      break;
 8005a66:	e00f      	b.n	8005a88 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005a6c:	601a      	str	r2, [r3, #0]
      break;
 8005a6e:	e00b      	b.n	8005a88 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8005a74:	601a      	str	r2, [r3, #0]
      break;
 8005a76:	e007      	b.n	8005a88 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8005a7c:	601a      	str	r2, [r3, #0]
      break;
 8005a7e:	e003      	b.n	8005a88 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295
 8005a84:	60fb      	str	r3, [r7, #12]
      break;
 8005a86:	bf00      	nop
  }

  return ret;
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	41200000 	.word	0x41200000
 8005a98:	41a00000 	.word	0x41a00000
 8005a9c:	42480000 	.word	0x42480000
 8005aa0:	42c80000 	.word	0x42c80000

08005aa4 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005ab0:	edd7 7a00 	vldr	s15, [r7]
 8005ab4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac0:	d801      	bhi.n	8005ac6 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e016      	b.n	8005af4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005ac6:	edd7 7a00 	vldr	s15, [r7]
 8005aca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad6:	d801      	bhi.n	8005adc <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e00b      	b.n	8005af4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005adc:	edd7 7a00 	vldr	s15, [r7]
 8005ae0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005b68 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aec:	d801      	bhi.n	8005af2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e000      	b.n	8005af4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005af2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005af4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d121      	bne.n	8005b42 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005afe:	f107 020c 	add.w	r2, r7, #12
 8005b02:	2301      	movs	r3, #1
 8005b04:	2160      	movs	r1, #96	; 0x60
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f9a6 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	e022      	b.n	8005b5e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	7b3b      	ldrb	r3, [r7, #12]
 8005b22:	f362 0383 	bfi	r3, r2, #2, #2
 8005b26:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005b28:	f107 020c 	add.w	r2, r7, #12
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	2160      	movs	r1, #96	; 0x60
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fad0 	bl	80060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	e00d      	b.n	8005b5e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3320      	adds	r3, #32
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fc37 	bl	80063be <lis2mdl_data_rate_set>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	e000      	b.n	8005b5e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	42480000 	.word	0x42480000

08005b6c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2232      	movs	r2, #50	; 0x32
 8005b7a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3320      	adds	r3, #32
 8005bb0:	f107 0208 	add.w	r2, r7, #8
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fc86 	bl	80064c8 <lis2mdl_magnetic_raw_get>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	e00c      	b.n	8005be2 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005bc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005bd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005bd8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b088      	sub	sp, #32
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d137      	bne.n	8005c6c <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005bfc:	f107 0218 	add.w	r2, r7, #24
 8005c00:	2306      	movs	r3, #6
 8005c02:	2168      	movs	r1, #104	; 0x68
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f927 	bl	8005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	e06f      	b.n	8005cf6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005c16:	7e7b      	ldrb	r3, [r7, #25]
 8005c18:	b21b      	sxth	r3, r3
 8005c1a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005c1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	7e3b      	ldrb	r3, [r7, #24]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	b21b      	sxth	r3, r3
 8005c30:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8005c32:	7efb      	ldrb	r3, [r7, #27]
 8005c34:	b21b      	sxth	r3, r3
 8005c36:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005c38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	7ebb      	ldrb	r3, [r7, #26]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	b21b      	sxth	r3, r3
 8005c4c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005c4e:	7f7b      	ldrb	r3, [r7, #29]
 8005c50:	b21b      	sxth	r3, r3
 8005c52:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8005c54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	7f3b      	ldrb	r3, [r7, #28]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b21b      	sxth	r3, r3
 8005c68:	82bb      	strh	r3, [r7, #20]
 8005c6a:	e00d      	b.n	8005c88 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3320      	adds	r3, #32
 8005c70:	f107 0210 	add.w	r2, r7, #16
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fc26 	bl	80064c8 <lis2mdl_magnetic_raw_get>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	e036      	b.n	8005cf6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff feb1 	bl	80059f6 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005c94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ca0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cac:	ee17 2a90 	vmov	r2, s15
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cb8:	ee07 3a90 	vmov	s15, r3
 8005cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ccc:	ee17 2a90 	vmov	r2, s15
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005cd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cd8:	ee07 3a90 	vmov	s15, r3
 8005cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cec:	ee17 2a90 	vmov	r2, s15
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d10b      	bne.n	8005d2e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005d16:	1cba      	adds	r2, r7, #2
 8005d18:	78f9      	ldrb	r1, [r7, #3]
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9da 	bl	80060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2c:	e00e      	b.n	8005d4c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f103 0020 	add.w	r0, r3, #32
 8005d34:	1cba      	adds	r2, r7, #2
 8005d36:	78f9      	ldrb	r1, [r7, #3]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f000 fb02 	bl	8006342 <lis2mdl_write_reg>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	e000      	b.n	8005d4c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	460b      	mov	r3, r1
 8005d62:	72fb      	strb	r3, [r7, #11]
 8005d64:	4613      	mov	r3, r2
 8005d66:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10e      	bne.n	8005d92 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	695c      	ldr	r4, [r3, #20]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	7b1b      	ldrb	r3, [r3, #12]
 8005d7c:	b298      	uxth	r0, r3
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	b299      	uxth	r1, r3
 8005d88:	893b      	ldrh	r3, [r7, #8]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	47a0      	blx	r4
 8005d8e:	4603      	mov	r3, r0
 8005d90:	e01d      	b.n	8005dce <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d10b      	bne.n	8005db2 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	695c      	ldr	r4, [r3, #20]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	7b1b      	ldrb	r3, [r3, #12]
 8005da2:	b298      	uxth	r0, r3
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	b299      	uxth	r1, r3
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	47a0      	blx	r4
 8005dae:	4603      	mov	r3, r0
 8005db0:	e00d      	b.n	8005dce <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	695c      	ldr	r4, [r3, #20]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	7b1b      	ldrb	r3, [r3, #12]
 8005dba:	b298      	uxth	r0, r3
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	b299      	uxth	r1, r3
 8005dc6:	893b      	ldrh	r3, [r7, #8]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	47a0      	blx	r4
 8005dcc:	4603      	mov	r3, r0
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd90      	pop	{r4, r7, pc}

08005dd6 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005dd6:	b590      	push	{r4, r7, lr}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	461a      	mov	r2, r3
 8005de2:	460b      	mov	r3, r1
 8005de4:	72fb      	strb	r3, [r7, #11]
 8005de6:	4613      	mov	r3, r2
 8005de8:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10e      	bne.n	8005e14 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	691c      	ldr	r4, [r3, #16]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	7b1b      	ldrb	r3, [r3, #12]
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	893b      	ldrh	r3, [r7, #8]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	47a0      	blx	r4
 8005e10:	4603      	mov	r3, r0
 8005e12:	e01d      	b.n	8005e50 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d10b      	bne.n	8005e34 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	691c      	ldr	r4, [r3, #16]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	7b1b      	ldrb	r3, [r3, #12]
 8005e24:	b298      	uxth	r0, r3
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	b299      	uxth	r1, r3
 8005e2a:	893b      	ldrh	r3, [r7, #8]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	47a0      	blx	r4
 8005e30:	4603      	mov	r3, r0
 8005e32:	e00d      	b.n	8005e50 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	691c      	ldr	r4, [r3, #16]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	7b1b      	ldrb	r3, [r3, #12]
 8005e3c:	b298      	uxth	r0, r3
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	b299      	uxth	r1, r3
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	47a0      	blx	r4
 8005e4e:	4603      	mov	r3, r0
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd90      	pop	{r4, r7, pc}

08005e58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	460b      	mov	r3, r1
 8005e66:	72fb      	strb	r3, [r7, #11]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005e7e:	233d      	movs	r3, #61	; 0x3d
 8005e80:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005e82:	2315      	movs	r3, #21
 8005e84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005e88:	2316      	movs	r3, #22
 8005e8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005e8e:	2317      	movs	r3, #23
 8005e90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8005e94:	2314      	movs	r3, #20
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005e9a:	2344      	movs	r3, #68	; 0x44
 8005e9c:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8005ea4:	2339      	movs	r3, #57	; 0x39
 8005ea6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005eb0:	2329      	movs	r3, #41	; 0x29
 8005eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005eb6:	231e      	movs	r3, #30
 8005eb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8005ec2:	893b      	ldrh	r3, [r7, #8]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005ed4:	2340      	movs	r3, #64	; 0x40
 8005ed6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f103 0020 	add.w	r0, r3, #32
 8005ee0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005ee4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f000 fa2a 	bl	8006342 <lis2mdl_write_reg>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	e0e9      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f103 0020 	add.w	r0, r3, #32
 8005f00:	f107 021f 	add.w	r2, r7, #31
 8005f04:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f000 fa1a 	bl	8006342 <lis2mdl_write_reg>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8005f14:	f04f 33ff 	mov.w	r3, #4294967295
 8005f18:	e0d9      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f103 0020 	add.w	r0, r3, #32
 8005f20:	f107 020b 	add.w	r2, r7, #11
 8005f24:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f000 fa0a 	bl	8006342 <lis2mdl_write_reg>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295
 8005f38:	e0c9      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f103 0020 	add.w	r0, r3, #32
 8005f40:	f107 021d 	add.w	r2, r7, #29
 8005f44:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f000 f9fa 	bl	8006342 <lis2mdl_write_reg>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295
 8005f58:	e0b9      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f103 0020 	add.w	r0, r3, #32
 8005f60:	f107 021e 	add.w	r2, r7, #30
 8005f64:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f000 f9ea 	bl	8006342 <lis2mdl_write_reg>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	e0a9      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f103 0020 	add.w	r0, r3, #32
 8005f80:	f107 0220 	add.w	r2, r7, #32
 8005f84:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f000 f9da 	bl	8006342 <lis2mdl_write_reg>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	e099      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f103 0020 	add.w	r0, r3, #32
 8005fa0:	f107 021c 	add.w	r2, r7, #28
 8005fa4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f000 f9b2 	bl	8006312 <lis2mdl_read_reg>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	e089      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005fba:	7f3b      	ldrb	r3, [r7, #28]
 8005fbc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d102      	bne.n	8005fca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005fc8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f103 0020 	add.w	r0, r3, #32
 8005fd0:	f107 021c 	add.w	r2, r7, #28
 8005fd4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f000 f9b2 	bl	8006342 <lis2mdl_write_reg>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe8:	e071      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f103 0020 	add.w	r0, r3, #32
 8005ff0:	f107 0214 	add.w	r2, r7, #20
 8005ff4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005ff8:	2306      	movs	r3, #6
 8005ffa:	f000 f98a 	bl	8006312 <lis2mdl_read_reg>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	e061      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f103 0020 	add.w	r0, r3, #32
 8006010:	f107 021b 	add.w	r2, r7, #27
 8006014:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006018:	2301      	movs	r3, #1
 800601a:	f000 f97a 	bl	8006312 <lis2mdl_read_reg>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	e051      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800602a:	7efa      	ldrb	r2, [r7, #27]
 800602c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006030:	4013      	ands	r3, r2
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006038:	429a      	cmp	r2, r3
 800603a:	d1e6      	bne.n	800600a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f103 0020 	add.w	r0, r3, #32
 8006042:	f107 021b 	add.w	r2, r7, #27
 8006046:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800604a:	2301      	movs	r3, #1
 800604c:	f000 f961 	bl	8006312 <lis2mdl_read_reg>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8006056:	f04f 33ff 	mov.w	r3, #4294967295
 800605a:	e038      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800605c:	7efa      	ldrb	r2, [r7, #27]
 800605e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006062:	4013      	ands	r3, r2
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800606a:	429a      	cmp	r2, r3
 800606c:	d1e6      	bne.n	800603c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f103 0020 	add.w	r0, r3, #32
 8006074:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8006078:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800607c:	2301      	movs	r3, #1
 800607e:	f000 f960 	bl	8006342 <lis2mdl_write_reg>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	e01f      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f103 0020 	add.w	r0, r3, #32
 8006094:	893b      	ldrh	r3, [r7, #8]
 8006096:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	f000 f939 	bl	8006312 <lis2mdl_read_reg>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80060a6:	f04f 33ff 	mov.w	r3, #4294967295
 80060aa:	e010      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f103 0020 	add.w	r0, r3, #32
 80060b2:	f107 0220 	add.w	r2, r7, #32
 80060b6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80060ba:	2301      	movs	r3, #1
 80060bc:	f000 f941 	bl	8006342 <lis2mdl_write_reg>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ca:	e000      	b.n	80060ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3730      	adds	r7, #48	; 0x30
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b08c      	sub	sp, #48	; 0x30
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	461a      	mov	r2, r3
 80060e2:	460b      	mov	r3, r1
 80060e4:	72fb      	strb	r3, [r7, #11]
 80060e6:	4613      	mov	r3, r2
 80060e8:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80060fc:	233c      	movs	r3, #60	; 0x3c
 80060fe:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8006100:	2315      	movs	r3, #21
 8006102:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8006106:	2316      	movs	r3, #22
 8006108:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800610c:	2317      	movs	r3, #23
 800610e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8006112:	2300      	movs	r3, #0
 8006114:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8006116:	2314      	movs	r3, #20
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800611c:	2344      	movs	r3, #68	; 0x44
 800611e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8006120:	2339      	movs	r3, #57	; 0x39
 8006122:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800612c:	2329      	movs	r3, #41	; 0x29
 800612e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8006132:	231e      	movs	r3, #30
 8006134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800613e:	2310      	movs	r3, #16
 8006140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800614a:	2340      	movs	r3, #64	; 0x40
 800614c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8006150:	230e      	movs	r3, #14
 8006152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f103 0020 	add.w	r0, r3, #32
 800615c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8006160:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006164:	2301      	movs	r3, #1
 8006166:	f000 f8ec 	bl	8006342 <lis2mdl_write_reg>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8006170:	f04f 33ff 	mov.w	r3, #4294967295
 8006174:	e0c9      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f103 0020 	add.w	r0, r3, #32
 800617c:	f107 021f 	add.w	r2, r7, #31
 8006180:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8006184:	2301      	movs	r3, #1
 8006186:	f000 f8dc 	bl	8006342 <lis2mdl_write_reg>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8006190:	f04f 33ff 	mov.w	r3, #4294967295
 8006194:	e0b9      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f103 0020 	add.w	r0, r3, #32
 800619c:	f107 020b 	add.w	r2, r7, #11
 80061a0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80061a4:	2301      	movs	r3, #1
 80061a6:	f000 f8cc 	bl	8006342 <lis2mdl_write_reg>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	e0a9      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f103 0020 	add.w	r0, r3, #32
 80061bc:	f107 021e 	add.w	r2, r7, #30
 80061c0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80061c4:	2301      	movs	r3, #1
 80061c6:	f000 f8bc 	bl	8006342 <lis2mdl_write_reg>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	e099      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f103 0020 	add.w	r0, r3, #32
 80061dc:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80061e0:	2301      	movs	r3, #1
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	f000 f8ad 	bl	8006342 <lis2mdl_write_reg>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
 80061f2:	e08a      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f103 0020 	add.w	r0, r3, #32
 80061fa:	f107 021d 	add.w	r2, r7, #29
 80061fe:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8006202:	2301      	movs	r3, #1
 8006204:	f000 f89d 	bl	8006342 <lis2mdl_write_reg>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
 8006212:	e07a      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f103 0020 	add.w	r0, r3, #32
 800621a:	f107 0220 	add.w	r2, r7, #32
 800621e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006222:	2301      	movs	r3, #1
 8006224:	f000 f88d 	bl	8006342 <lis2mdl_write_reg>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800622e:	f04f 33ff 	mov.w	r3, #4294967295
 8006232:	e06a      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f103 0020 	add.w	r0, r3, #32
 800623a:	f107 021c 	add.w	r2, r7, #28
 800623e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006242:	2301      	movs	r3, #1
 8006244:	f000 f865 	bl	8006312 <lis2mdl_read_reg>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	e05a      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8006254:	7f3b      	ldrb	r3, [r7, #28]
 8006256:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800625a:	429a      	cmp	r2, r3
 800625c:	d102      	bne.n	8006264 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800625e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006262:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f103 0020 	add.w	r0, r3, #32
 800626a:	f107 021c 	add.w	r2, r7, #28
 800626e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006272:	2301      	movs	r3, #1
 8006274:	f000 f865 	bl	8006342 <lis2mdl_write_reg>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	e042      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f103 0020 	add.w	r0, r3, #32
 800628a:	f107 0214 	add.w	r2, r7, #20
 800628e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006292:	2306      	movs	r3, #6
 8006294:	f000 f83d 	bl	8006312 <lis2mdl_read_reg>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295
 80062a2:	e032      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f103 0020 	add.w	r0, r3, #32
 80062aa:	f107 021b 	add.w	r2, r7, #27
 80062ae:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80062b2:	2301      	movs	r3, #1
 80062b4:	f000 f82d 	bl	8006312 <lis2mdl_read_reg>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80062be:	f04f 33ff 	mov.w	r3, #4294967295
 80062c2:	e022      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80062c4:	7efa      	ldrb	r2, [r7, #27]
 80062c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062ca:	4013      	ands	r3, r2
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d1e6      	bne.n	80062a4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f103 0020 	add.w	r0, r3, #32
 80062dc:	f107 021b 	add.w	r2, r7, #27
 80062e0:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80062e4:	2301      	movs	r3, #1
 80062e6:	f000 f814 	bl	8006312 <lis2mdl_read_reg>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
 80062f4:	e009      	b.n	800630a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80062f6:	7efa      	ldrb	r2, [r7, #27]
 80062f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062fc:	4013      	ands	r3, r2
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006304:	429a      	cmp	r2, r3
 8006306:	d1e6      	bne.n	80062d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3730      	adds	r7, #48	; 0x30
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006312:	b590      	push	{r4, r7, lr}
 8006314:	b087      	sub	sp, #28
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	461a      	mov	r2, r3
 800631e:	460b      	mov	r3, r1
 8006320:	72fb      	strb	r3, [r7, #11]
 8006322:	4613      	mov	r3, r2
 8006324:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685c      	ldr	r4, [r3, #4]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68d8      	ldr	r0, [r3, #12]
 800632e:	893b      	ldrh	r3, [r7, #8]
 8006330:	7af9      	ldrb	r1, [r7, #11]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	47a0      	blx	r4
 8006336:	6178      	str	r0, [r7, #20]

  return ret;
 8006338:	697b      	ldr	r3, [r7, #20]
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	bd90      	pop	{r4, r7, pc}

08006342 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006342:	b590      	push	{r4, r7, lr}
 8006344:	b087      	sub	sp, #28
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	461a      	mov	r2, r3
 800634e:	460b      	mov	r3, r1
 8006350:	72fb      	strb	r3, [r7, #11]
 8006352:	4613      	mov	r3, r2
 8006354:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681c      	ldr	r4, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68d8      	ldr	r0, [r3, #12]
 800635e:	893b      	ldrh	r3, [r7, #8]
 8006360:	7af9      	ldrb	r1, [r7, #11]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	47a0      	blx	r4
 8006366:	6178      	str	r0, [r7, #20]

  return ret;
 8006368:	697b      	ldr	r3, [r7, #20]
}
 800636a:	4618      	mov	r0, r3
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	bd90      	pop	{r4, r7, pc}

08006372 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800637e:	f107 0208 	add.w	r2, r7, #8
 8006382:	2301      	movs	r3, #1
 8006384:	2160      	movs	r1, #96	; 0x60
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ffc3 	bl	8006312 <lis2mdl_read_reg>
 800638c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10f      	bne.n	80063b4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	b2da      	uxtb	r2, r3
 800639c:	7a3b      	ldrb	r3, [r7, #8]
 800639e:	f362 0301 	bfi	r3, r2, #0, #2
 80063a2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80063a4:	f107 0208 	add.w	r2, r7, #8
 80063a8:	2301      	movs	r3, #1
 80063aa:	2160      	movs	r1, #96	; 0x60
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ffc8 	bl	8006342 <lis2mdl_write_reg>
 80063b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80063ca:	f107 0208 	add.w	r2, r7, #8
 80063ce:	2301      	movs	r3, #1
 80063d0:	2160      	movs	r1, #96	; 0x60
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff ff9d 	bl	8006312 <lis2mdl_read_reg>
 80063d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10f      	bne.n	8006400 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	7a3b      	ldrb	r3, [r7, #8]
 80063ea:	f362 0383 	bfi	r3, r2, #2, #2
 80063ee:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80063f0:	f107 0208 	add.w	r2, r7, #8
 80063f4:	2301      	movs	r3, #1
 80063f6:	2160      	movs	r1, #96	; 0x60
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ffa2 	bl	8006342 <lis2mdl_write_reg>
 80063fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8006416:	f107 0208 	add.w	r2, r7, #8
 800641a:	2301      	movs	r3, #1
 800641c:	2160      	movs	r1, #96	; 0x60
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ff77 	bl	8006312 <lis2mdl_read_reg>
 8006424:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8006426:	7a3b      	ldrb	r3, [r7, #8]
 8006428:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d81a      	bhi.n	8006468 <lis2mdl_data_rate_get+0x5c>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <lis2mdl_data_rate_get+0x2c>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006449 	.word	0x08006449
 800643c:	08006451 	.word	0x08006451
 8006440:	08006459 	.word	0x08006459
 8006444:	08006461 	.word	0x08006461
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
      break;
 800644e:	e00f      	b.n	8006470 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
      break;
 8006456:	e00b      	b.n	8006470 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2202      	movs	r2, #2
 800645c:	701a      	strb	r2, [r3, #0]
      break;
 800645e:	e007      	b.n	8006470 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2203      	movs	r2, #3
 8006464:	701a      	strb	r2, [r3, #0]
      break;
 8006466:	e003      	b.n	8006470 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
      break;
 800646e:	bf00      	nop
  }

  return ret;
 8006470:	68fb      	ldr	r3, [r7, #12]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop

0800647c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8006488:	f107 0208 	add.w	r2, r7, #8
 800648c:	2301      	movs	r3, #1
 800648e:	2162      	movs	r1, #98	; 0x62
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ff3e 	bl	8006312 <lis2mdl_read_reg>
 8006496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	7a3b      	ldrb	r3, [r7, #8]
 80064a8:	f362 1304 	bfi	r3, r2, #4, #1
 80064ac:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80064ae:	f107 0208 	add.w	r2, r7, #8
 80064b2:	2301      	movs	r3, #1
 80064b4:	2162      	movs	r1, #98	; 0x62
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff ff43 	bl	8006342 <lis2mdl_write_reg>
 80064bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80064d2:	f107 020c 	add.w	r2, r7, #12
 80064d6:	2306      	movs	r3, #6
 80064d8:	2168      	movs	r1, #104	; 0x68
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff ff19 	bl	8006312 <lis2mdl_read_reg>
 80064e0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80064e2:	7b7b      	ldrb	r3, [r7, #13]
 80064e4:	b21a      	sxth	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	7b3b      	ldrb	r3, [r7, #12]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	b21a      	sxth	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006504:	7bfa      	ldrb	r2, [r7, #15]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	3302      	adds	r3, #2
 800650a:	b212      	sxth	r2, r2
 800650c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	3302      	adds	r3, #2
 8006512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006516:	b29b      	uxth	r3, r3
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	b29a      	uxth	r2, r3
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	b29b      	uxth	r3, r3
 8006520:	4413      	add	r3, r2
 8006522:	b29a      	uxth	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	3302      	adds	r3, #2
 8006528:	b212      	sxth	r2, r2
 800652a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800652c:	7c7a      	ldrb	r2, [r7, #17]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	3304      	adds	r3, #4
 8006532:	b212      	sxth	r2, r2
 8006534:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	3304      	adds	r3, #4
 800653a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800653e:	b29b      	uxth	r3, r3
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	b29a      	uxth	r2, r3
 8006544:	7c3b      	ldrb	r3, [r7, #16]
 8006546:	b29b      	uxth	r3, r3
 8006548:	4413      	add	r3, r2
 800654a:	b29a      	uxth	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	3304      	adds	r3, #4
 8006550:	b212      	sxth	r2, r2
 8006552:	801a      	strh	r2, [r3, #0]

  return ret;
 8006554:	697b      	ldr	r3, [r7, #20]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8006568:	2301      	movs	r3, #1
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	214f      	movs	r1, #79	; 0x4f
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fecf 	bl	8006312 <lis2mdl_read_reg>
 8006574:	60f8      	str	r0, [r7, #12]

  return ret;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800658c:	f107 0208 	add.w	r2, r7, #8
 8006590:	2301      	movs	r3, #1
 8006592:	2162      	movs	r1, #98	; 0x62
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff febc 	bl	8006312 <lis2mdl_read_reg>
 800659a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	7a3b      	ldrb	r3, [r7, #8]
 80065ac:	f362 0341 	bfi	r3, r2, #1, #1
 80065b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80065b2:	f107 0208 	add.w	r2, r7, #8
 80065b6:	2301      	movs	r3, #1
 80065b8:	2162      	movs	r1, #98	; 0x62
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fec1 	bl	8006342 <lis2mdl_write_reg>
 80065c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80065d8:	f107 0208 	add.w	r2, r7, #8
 80065dc:	2301      	movs	r3, #1
 80065de:	2162      	movs	r1, #98	; 0x62
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fe96 	bl	8006312 <lis2mdl_read_reg>
 80065e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10f      	bne.n	800660e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	7a3b      	ldrb	r3, [r7, #8]
 80065f8:	f362 1345 	bfi	r3, r2, #5, #1
 80065fc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80065fe:	f107 0208 	add.w	r2, r7, #8
 8006602:	2301      	movs	r3, #1
 8006604:	2162      	movs	r1, #98	; 0x62
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff fe9b 	bl	8006342 <lis2mdl_write_reg>
 800660c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800660e:	68fb      	ldr	r3, [r7, #12]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d103      	bne.n	8006634 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e051      	b.n	80066d8 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	7b1a      	ldrb	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <LPS22HH_RegisterBusIO+0xcc>)
 8006670:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <LPS22HH_RegisterBusIO+0xd0>)
 8006676:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 800668e:	f04f 33ff 	mov.w	r3, #4294967295
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e020      	b.n	80066d8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4798      	blx	r3
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e016      	b.n	80066d8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d112      	bne.n	80066d8 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10d      	bne.n	80066d8 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80066bc:	2301      	movs	r3, #1
 80066be:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	461a      	mov	r2, r3
 80066c4:	2110      	movs	r1, #16
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9df 	bl	8006a8a <LPS22HH_Write_Reg>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295
 80066d6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	08006db3 	.word	0x08006db3
 80066e8:	08006de9 	.word	0x08006de9

080066ec <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d108      	bne.n	8006710 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fb0e 	bl	8006d20 <LPS22HH_Initialize>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
 800670e:	e004      	b.n	800671a <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006730:	2b01      	cmp	r3, #1
 8006732:	d111      	bne.n	8006758 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f877 	bl	8006828 <LPS22HH_PRESS_Disable>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8006740:	f04f 33ff 	mov.w	r3, #4294967295
 8006744:	e00d      	b.n	8006762 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f918 	bl	800697c <LPS22HH_TEMP_Disable>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	e004      	b.n	8006762 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3320      	adds	r3, #32
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fd1a 	bl	80071b4 <lps22hh_device_id_get>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8006786:	f04f 33ff 	mov.w	r3, #4294967295
 800678a:	e000      	b.n	800678e <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2200      	movs	r2, #0
 80067a6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2201      	movs	r2, #1
 80067ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	4a05      	ldr	r2, [pc, #20]	; (80067dc <LPS22HH_GetCapabilities+0x44>)
 80067c6:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4a04      	ldr	r2, [pc, #16]	; (80067dc <LPS22HH_GetCapabilities+0x44>)
 80067cc:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	43480000 	.word	0x43480000

080067e0 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e014      	b.n	8006820 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f103 0220 	add.w	r2, r3, #32
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 fb93 	bl	8006f30 <lps22hh_data_rate_set>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006810:	f04f 33ff 	mov.w	r3, #4294967295
 8006814:	e004      	b.n	8006820 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e024      	b.n	8006888 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11a      	bne.n	800687e <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f103 0220 	add.w	r2, r3, #32
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3333      	adds	r3, #51	; 0x33
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f000 fbb9 	bl	8006fcc <lps22hh_data_rate_get>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	e010      	b.n	8006888 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3320      	adds	r3, #32
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fb5f 	bl	8006f30 <lps22hh_data_rate_set>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006878:	f04f 33ff 	mov.w	r3, #4294967295
 800687c:	e004      	b.n	8006888 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f90f 	bl	8006ac0 <LPS22HH_GetOutputDataRate>
 80068a2:	4603      	mov	r3, r0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d106      	bne.n	80068d0 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80068c2:	ed97 0a00 	vldr	s0, [r7]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f95e 	bl	8006b88 <LPS22HH_SetOutputDataRate_When_Enabled>
 80068cc:	4603      	mov	r3, r0
 80068ce:	e005      	b.n	80068dc <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80068d0:	ed97 0a00 	vldr	s0, [r7]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f9c9 	bl	8006c6c <LPS22HH_SetOutputDataRate_When_Disabled>
 80068da:	4603      	mov	r3, r0
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	2204      	movs	r2, #4
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f00d fbb2 	bl	8014060 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3320      	adds	r3, #32
 8006900:	f107 020c 	add.w	r2, r7, #12
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fc08 	bl	800711c <lps22hh_pressure_raw_get>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	e009      	b.n	800692c <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fab0 	bl	8006e80 <lps22hh_from_lsb_to_hpa>
 8006920:	eef0 7a40 	vmov.f32	s15, s0
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e014      	b.n	8006974 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f103 0220 	add.w	r2, r3, #32
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 fae9 	bl	8006f30 <lps22hh_data_rate_set>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006964:	f04f 33ff 	mov.w	r3, #4294967295
 8006968:	e004      	b.n	8006974 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e024      	b.n	80069dc <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11a      	bne.n	80069d2 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f103 0220 	add.w	r2, r3, #32
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3333      	adds	r3, #51	; 0x33
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 fb0f 	bl	8006fcc <lps22hh_data_rate_get>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80069b4:	f04f 33ff 	mov.w	r3, #4294967295
 80069b8:	e010      	b.n	80069dc <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3320      	adds	r3, #32
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fab5 	bl	8006f30 <lps22hh_data_rate_set>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	e004      	b.n	80069dc <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f865 	bl	8006ac0 <LPS22HH_GetOutputDataRate>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d106      	bne.n	8006a24 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006a16:	ed97 0a00 	vldr	s0, [r7]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f8b4 	bl	8006b88 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006a20:	4603      	mov	r3, r0
 8006a22:	e005      	b.n	8006a30 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006a24:	ed97 0a00 	vldr	s0, [r7]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f91f 	bl	8006c6c <LPS22HH_SetOutputDataRate_When_Disabled>
 8006a2e:	4603      	mov	r3, r0
  }
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	2202      	movs	r2, #2
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f00d fb08 	bl	8014060 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3320      	adds	r3, #32
 8006a54:	f107 020c 	add.w	r2, r7, #12
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fb87 	bl	800716e <lps22hh_temperature_raw_get>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6a:	e00a      	b.n	8006a82 <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8006a6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fa1d 	bl	8006eb0 <lps22hh_from_lsb_to_celsius>
 8006a76:	eef0 7a40 	vmov.f32	s15, s0
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
 8006a96:	4613      	mov	r3, r2
 8006a98:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f103 0020 	add.w	r0, r3, #32
 8006aa0:	1cba      	adds	r2, r7, #2
 8006aa2:	78f9      	ldrb	r1, [r7, #3]
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f000 f9d2 	bl	8006e4e <lps22hh_write_reg>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab4:	e000      	b.n	8006ab8 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3320      	adds	r3, #32
 8006ad2:	f107 020b 	add.w	r2, r7, #11
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fa77 	bl	8006fcc <lps22hh_data_rate_get>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	e03d      	b.n	8006b66 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	2b07      	cmp	r3, #7
 8006aee:	d835      	bhi.n	8006b5c <LPS22HH_GetOutputDataRate+0x9c>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <LPS22HH_GetOutputDataRate+0x38>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b23 	.word	0x08006b23
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b35 	.word	0x08006b35
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006b45 	.word	0x08006b45
 8006b10:	08006b4d 	.word	0x08006b4d
 8006b14:	08006b55 	.word	0x08006b55
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
      break;
 8006b20:	e020      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b28:	601a      	str	r2, [r3, #0]
      break;
 8006b2a:	e01b      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <LPS22HH_GetOutputDataRate+0xb0>)
 8006b30:	601a      	str	r2, [r3, #0]
      break;
 8006b32:	e017      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4a0f      	ldr	r2, [pc, #60]	; (8006b74 <LPS22HH_GetOutputDataRate+0xb4>)
 8006b38:	601a      	str	r2, [r3, #0]
      break;
 8006b3a:	e013      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <LPS22HH_GetOutputDataRate+0xb8>)
 8006b40:	601a      	str	r2, [r3, #0]
      break;
 8006b42:	e00f      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <LPS22HH_GetOutputDataRate+0xbc>)
 8006b48:	601a      	str	r2, [r3, #0]
      break;
 8006b4a:	e00b      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	4a0c      	ldr	r2, [pc, #48]	; (8006b80 <LPS22HH_GetOutputDataRate+0xc0>)
 8006b50:	601a      	str	r2, [r3, #0]
      break;
 8006b52:	e007      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4a0b      	ldr	r2, [pc, #44]	; (8006b84 <LPS22HH_GetOutputDataRate+0xc4>)
 8006b58:	601a      	str	r2, [r3, #0]
      break;
 8006b5a:	e003      	b.n	8006b64 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8006b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b60:	60fb      	str	r3, [r7, #12]
      break;
 8006b62:	bf00      	nop
  }

  return ret;
 8006b64:	68fb      	ldr	r3, [r7, #12]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	41200000 	.word	0x41200000
 8006b74:	41c80000 	.word	0x41c80000
 8006b78:	42480000 	.word	0x42480000
 8006b7c:	42960000 	.word	0x42960000
 8006b80:	42c80000 	.word	0x42c80000
 8006b84:	43480000 	.word	0x43480000

08006b88 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006b94:	edd7 7a00 	vldr	s15, [r7]
 8006b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba4:	d801      	bhi.n	8006baa <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e037      	b.n	8006c1a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006baa:	edd7 7a00 	vldr	s15, [r7]
 8006bae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bba:	d801      	bhi.n	8006bc0 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e02c      	b.n	8006c1a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006bc0:	edd7 7a00 	vldr	s15, [r7]
 8006bc4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd0:	d801      	bhi.n	8006bd6 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e021      	b.n	8006c1a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006bd6:	edd7 7a00 	vldr	s15, [r7]
 8006bda:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006c60 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8006bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be6:	d801      	bhi.n	8006bec <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8006be8:	2304      	movs	r3, #4
 8006bea:	e016      	b.n	8006c1a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006bec:	edd7 7a00 	vldr	s15, [r7]
 8006bf0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006c64 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8006bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfc:	d801      	bhi.n	8006c02 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006bfe:	2305      	movs	r3, #5
 8006c00:	e00b      	b.n	8006c1a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006c02:	edd7 7a00 	vldr	s15, [r7]
 8006c06:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006c68 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8006c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c12:	d801      	bhi.n	8006c18 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8006c14:	2306      	movs	r3, #6
 8006c16:	e000      	b.n	8006c1a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006c18:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006c1a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3320      	adds	r3, #32
 8006c20:	7bfa      	ldrb	r2, [r7, #15]
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f983 	bl	8006f30 <lps22hh_data_rate_set>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	e00f      	b.n	8006c56 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f103 0220 	add.w	r2, r3, #32
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3333      	adds	r3, #51	; 0x33
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 f9c2 	bl	8006fcc <lps22hh_data_rate_get>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c52:	e000      	b.n	8006c56 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	42480000 	.word	0x42480000
 8006c64:	42960000 	.word	0x42960000
 8006c68:	42c80000 	.word	0x42c80000

08006c6c <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006c78:	edd7 7a00 	vldr	s15, [r7]
 8006c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c88:	d801      	bhi.n	8006c8e <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e037      	b.n	8006cfe <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006c8e:	edd7 7a00 	vldr	s15, [r7]
 8006c92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9e:	d801      	bhi.n	8006ca4 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e02c      	b.n	8006cfe <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006ca4:	edd7 7a00 	vldr	s15, [r7]
 8006ca8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb4:	d801      	bhi.n	8006cba <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e021      	b.n	8006cfe <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006cba:	edd7 7a00 	vldr	s15, [r7]
 8006cbe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006d14 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8006cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cca:	d801      	bhi.n	8006cd0 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	e016      	b.n	8006cfe <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006cd0:	edd7 7a00 	vldr	s15, [r7]
 8006cd4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006d18 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8006cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce0:	d801      	bhi.n	8006ce6 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006ce2:	2305      	movs	r3, #5
 8006ce4:	e00b      	b.n	8006cfe <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006ce6:	edd7 7a00 	vldr	s15, [r7]
 8006cea:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006d1c <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8006cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf6:	d801      	bhi.n	8006cfc <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8006cf8:	2306      	movs	r3, #6
 8006cfa:	e000      	b.n	8006cfe <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8006cfc:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	42480000 	.word	0x42480000
 8006d18:	42960000 	.word	0x42960000
 8006d1c:	42c80000 	.word	0x42c80000

08006d20 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3320      	adds	r3, #32
 8006d2c:	2111      	movs	r1, #17
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fa9d 	bl	800726e <lps22hh_i3c_interface_set>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3e:	e034      	b.n	8006daa <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3320      	adds	r3, #32
 8006d44:	2110      	movs	r1, #16
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f8f2 	bl	8006f30 <lps22hh_data_rate_set>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295
 8006d56:	e028      	b.n	8006daa <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3320      	adds	r3, #32
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fa5f 	bl	8007222 <lps22hh_lp_bandwidth_set>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	e01c      	b.n	8006daa <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3320      	adds	r3, #32
 8006d74:	2101      	movs	r1, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f8b4 	bl	8006ee4 <lps22hh_block_data_update_set>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	e010      	b.n	8006daa <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3320      	adds	r3, #32
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fa21 	bl	80071d6 <lps22hh_auto_increment_set>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	e004      	b.n	8006daa <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2203      	movs	r2, #3
 8006da4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006db2:	b590      	push	{r4, r7, lr}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	72fb      	strb	r3, [r7, #11]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	695c      	ldr	r4, [r3, #20]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	7b1b      	ldrb	r3, [r3, #12]
 8006dd2:	b298      	uxth	r0, r3
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	b299      	uxth	r1, r3
 8006dd8:	893b      	ldrh	r3, [r7, #8]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	47a0      	blx	r4
 8006dde:	4603      	mov	r3, r0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	371c      	adds	r7, #28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd90      	pop	{r4, r7, pc}

08006de8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	461a      	mov	r2, r3
 8006df4:	460b      	mov	r3, r1
 8006df6:	72fb      	strb	r3, [r7, #11]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	691c      	ldr	r4, [r3, #16]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	7b1b      	ldrb	r3, [r3, #12]
 8006e08:	b298      	uxth	r0, r3
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	b299      	uxth	r1, r3
 8006e0e:	893b      	ldrh	r3, [r7, #8]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	47a0      	blx	r4
 8006e14:	4603      	mov	r3, r0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd90      	pop	{r4, r7, pc}

08006e1e <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006e1e:	b590      	push	{r4, r7, lr}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	72fb      	strb	r3, [r7, #11]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685c      	ldr	r4, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68d8      	ldr	r0, [r3, #12]
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	7af9      	ldrb	r1, [r7, #11]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	47a0      	blx	r4
 8006e42:	6178      	str	r0, [r7, #20]

  return ret;
 8006e44:	697b      	ldr	r3, [r7, #20]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}

08006e4e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006e4e:	b590      	push	{r4, r7, lr}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	72fb      	strb	r3, [r7, #11]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681c      	ldr	r4, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68d8      	ldr	r0, [r3, #12]
 8006e6a:	893b      	ldrh	r3, [r7, #8]
 8006e6c:	7af9      	ldrb	r1, [r7, #11]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	47a0      	blx	r4
 8006e72:	6178      	str	r0, [r7, #20]

  return ret;
 8006e74:	697b      	ldr	r3, [r7, #20]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd90      	pop	{r4, r7, pc}
	...

08006e80 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006eac <lps22hh_from_lsb_to_hpa+0x2c>
 8006e96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e9a:	eef0 7a66 	vmov.f32	s15, s13
}
 8006e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	49800000 	.word	0x49800000

08006eb0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ec6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006ee0 <lps22hh_from_lsb_to_celsius+0x30>
 8006eca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ece:	eef0 7a66 	vmov.f32	s15, s13
}
 8006ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	42c80000 	.word	0x42c80000

08006ee4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006ef0:	f107 0208 	add.w	r2, r7, #8
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	2110      	movs	r1, #16
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff90 	bl	8006e1e <lps22hh_read_reg>
 8006efe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10f      	bne.n	8006f26 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	7a3b      	ldrb	r3, [r7, #8]
 8006f10:	f362 0341 	bfi	r3, r2, #1, #1
 8006f14:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006f16:	f107 0208 	add.w	r2, r7, #8
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	2110      	movs	r1, #16
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ff95 	bl	8006e4e <lps22hh_write_reg>
 8006f24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f26:	68fb      	ldr	r3, [r7, #12]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006f3c:	f107 0210 	add.w	r2, r7, #16
 8006f40:	2301      	movs	r3, #1
 8006f42:	2110      	movs	r1, #16
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ff6a 	bl	8006e1e <lps22hh_read_reg>
 8006f4a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d107      	bne.n	8006f62 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006f52:	f107 020c 	add.w	r2, r7, #12
 8006f56:	2301      	movs	r3, #1
 8006f58:	2111      	movs	r1, #17
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ff5f 	bl	8006e1e <lps22hh_read_reg>
 8006f60:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10f      	bne.n	8006f88 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	7c3b      	ldrb	r3, [r7, #16]
 8006f72:	f362 1306 	bfi	r3, r2, #4, #3
 8006f76:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006f78:	f107 0210 	add.w	r2, r7, #16
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	2110      	movs	r1, #16
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff ff64 	bl	8006e4e <lps22hh_write_reg>
 8006f86:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d119      	bne.n	8006fc2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	7b3b      	ldrb	r3, [r7, #12]
 8006f9a:	f362 0341 	bfi	r3, r2, #1, #1
 8006f9e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	08db      	lsrs	r3, r3, #3
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	7b3b      	ldrb	r3, [r7, #12]
 8006fac:	f362 0300 	bfi	r3, r2, #0, #1
 8006fb0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006fb2:	f107 020c 	add.w	r2, r7, #12
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	2111      	movs	r1, #17
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff ff47 	bl	8006e4e <lps22hh_write_reg>
 8006fc0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006fc2:	697b      	ldr	r3, [r7, #20]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006fd6:	f107 0210 	add.w	r2, r7, #16
 8006fda:	2301      	movs	r3, #1
 8006fdc:	2110      	movs	r1, #16
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff ff1d 	bl	8006e1e <lps22hh_read_reg>
 8006fe4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006fec:	f107 020c 	add.w	r2, r7, #12
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	2111      	movs	r1, #17
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff12 	bl	8006e1e <lps22hh_read_reg>
 8006ffa:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 8086 	bne.w	8007110 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007004:	f107 020c 	add.w	r2, r7, #12
 8007008:	2301      	movs	r3, #1
 800700a:	2111      	movs	r1, #17
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ff06 	bl	8006e1e <lps22hh_read_reg>
 8007012:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8007014:	7b3b      	ldrb	r3, [r7, #12]
 8007016:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800701a:	b2db      	uxtb	r3, r3
 800701c:	011a      	lsls	r2, r3, #4
 800701e:	7b3b      	ldrb	r3, [r7, #12]
 8007020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800702a:	7c3a      	ldrb	r2, [r7, #16]
 800702c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007030:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8007032:	4413      	add	r3, r2
 8007034:	2b15      	cmp	r3, #21
 8007036:	d867      	bhi.n	8007108 <lps22hh_data_rate_get+0x13c>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <lps22hh_data_rate_get+0x74>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007099 	.word	0x08007099
 8007044:	080070a9 	.word	0x080070a9
 8007048:	080070b1 	.word	0x080070b1
 800704c:	080070b9 	.word	0x080070b9
 8007050:	080070c1 	.word	0x080070c1
 8007054:	080070c9 	.word	0x080070c9
 8007058:	080070f9 	.word	0x080070f9
 800705c:	08007101 	.word	0x08007101
 8007060:	080070a1 	.word	0x080070a1
 8007064:	08007109 	.word	0x08007109
 8007068:	08007109 	.word	0x08007109
 800706c:	08007109 	.word	0x08007109
 8007070:	08007109 	.word	0x08007109
 8007074:	08007109 	.word	0x08007109
 8007078:	08007109 	.word	0x08007109
 800707c:	08007109 	.word	0x08007109
 8007080:	08007109 	.word	0x08007109
 8007084:	080070d1 	.word	0x080070d1
 8007088:	080070d9 	.word	0x080070d9
 800708c:	080070e1 	.word	0x080070e1
 8007090:	080070e9 	.word	0x080070e9
 8007094:	080070f1 	.word	0x080070f1
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
        break;
 800709e:	e038      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2208      	movs	r2, #8
 80070a4:	701a      	strb	r2, [r3, #0]
        break;
 80070a6:	e034      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2201      	movs	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
        break;
 80070ae:	e030      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2202      	movs	r2, #2
 80070b4:	701a      	strb	r2, [r3, #0]
        break;
 80070b6:	e02c      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2203      	movs	r2, #3
 80070bc:	701a      	strb	r2, [r3, #0]
        break;
 80070be:	e028      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2204      	movs	r2, #4
 80070c4:	701a      	strb	r2, [r3, #0]
        break;
 80070c6:	e024      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2205      	movs	r2, #5
 80070cc:	701a      	strb	r2, [r3, #0]
        break;
 80070ce:	e020      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2211      	movs	r2, #17
 80070d4:	701a      	strb	r2, [r3, #0]
        break;
 80070d6:	e01c      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2212      	movs	r2, #18
 80070dc:	701a      	strb	r2, [r3, #0]
        break;
 80070de:	e018      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2213      	movs	r2, #19
 80070e4:	701a      	strb	r2, [r3, #0]
        break;
 80070e6:	e014      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2214      	movs	r2, #20
 80070ec:	701a      	strb	r2, [r3, #0]
        break;
 80070ee:	e010      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2215      	movs	r2, #21
 80070f4:	701a      	strb	r2, [r3, #0]
        break;
 80070f6:	e00c      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2206      	movs	r2, #6
 80070fc:	701a      	strb	r2, [r3, #0]
        break;
 80070fe:	e008      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2207      	movs	r2, #7
 8007104:	701a      	strb	r2, [r3, #0]
        break;
 8007106:	e004      	b.n	8007112 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
        break;
 800710e:	e000      	b.n	8007112 <lps22hh_data_rate_get+0x146>
    }
  }
 8007110:	bf00      	nop

  return ret;
 8007112:	697b      	ldr	r3, [r7, #20]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	2303      	movs	r3, #3
 800712c:	2128      	movs	r1, #40	; 0x28
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fe75 	bl	8006e1e <lps22hh_read_reg>
 8007134:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8007136:	7abb      	ldrb	r3, [r7, #10]
 8007138:	461a      	mov	r2, r3
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	7a7a      	ldrb	r2, [r7, #9]
 8007146:	441a      	add	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	7a3a      	ldrb	r2, [r7, #8]
 8007154:	441a      	add	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	601a      	str	r2, [r3, #0]

  return ret;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8007178:	f107 0208 	add.w	r2, r7, #8
 800717c:	2302      	movs	r3, #2
 800717e:	212b      	movs	r1, #43	; 0x2b
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fe4c 	bl	8006e1e <lps22hh_read_reg>
 8007186:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8007188:	7a7b      	ldrb	r3, [r7, #9]
 800718a:	b21a      	sxth	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007196:	b29b      	uxth	r3, r3
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	b29a      	uxth	r2, r3
 800719c:	7a3b      	ldrb	r3, [r7, #8]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b21a      	sxth	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80071aa:	68fb      	ldr	r3, [r7, #12]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80071be:	2301      	movs	r3, #1
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	210f      	movs	r1, #15
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fe2a 	bl	8006e1e <lps22hh_read_reg>
 80071ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80071cc:	68fb      	ldr	r3, [r7, #12]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80071e2:	f107 0208 	add.w	r2, r7, #8
 80071e6:	2301      	movs	r3, #1
 80071e8:	2111      	movs	r1, #17
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fe17 	bl	8006e1e <lps22hh_read_reg>
 80071f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10f      	bne.n	8007218 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	7a3b      	ldrb	r3, [r7, #8]
 8007202:	f362 1304 	bfi	r3, r2, #4, #1
 8007206:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007208:	f107 0208 	add.w	r2, r7, #8
 800720c:	2301      	movs	r3, #1
 800720e:	2111      	movs	r1, #17
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fe1c 	bl	8006e4e <lps22hh_write_reg>
 8007216:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007218:	68fb      	ldr	r3, [r7, #12]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800722e:	f107 0208 	add.w	r2, r7, #8
 8007232:	2301      	movs	r3, #1
 8007234:	2110      	movs	r1, #16
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fdf1 	bl	8006e1e <lps22hh_read_reg>
 800723c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10f      	bne.n	8007264 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	b2da      	uxtb	r2, r3
 800724c:	7a3b      	ldrb	r3, [r7, #8]
 800724e:	f362 0383 	bfi	r3, r2, #2, #2
 8007252:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007254:	f107 0208 	add.w	r2, r7, #8
 8007258:	2301      	movs	r3, #1
 800725a:	2110      	movs	r1, #16
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff fdf6 	bl	8006e4e <lps22hh_write_reg>
 8007262:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007264:	68fb      	ldr	r3, [r7, #12]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800727a:	f107 0208 	add.w	r2, r7, #8
 800727e:	2301      	movs	r3, #1
 8007280:	210e      	movs	r1, #14
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fdcb 	bl	8006e1e <lps22hh_read_reg>
 8007288:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d118      	bne.n	80072c2 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	7a3b      	ldrb	r3, [r7, #8]
 800729a:	f362 0341 	bfi	r3, r2, #1, #1
 800729e:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	7a3b      	ldrb	r3, [r7, #8]
 80072ac:	f362 13c7 	bfi	r3, r2, #7, #1
 80072b0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80072b2:	f107 0208 	add.w	r2, r7, #8
 80072b6:	2301      	movs	r3, #1
 80072b8:	210e      	movs	r1, #14
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fdc7 	bl	8006e4e <lps22hh_write_reg>
 80072c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80072c2:	68fb      	ldr	r3, [r7, #12]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d103      	bne.n	80072e8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80072e0:	f04f 33ff 	mov.w	r3, #4294967295
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e051      	b.n	800738c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	7b1a      	ldrb	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <LSM6DSO_RegisterBusIO+0xcc>)
 8007324:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a1c      	ldr	r2, [pc, #112]	; (800739c <LSM6DSO_RegisterBusIO+0xd0>)
 800732a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e020      	b.n	800738c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8007356:	f04f 33ff 	mov.w	r3, #4294967295
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e016      	b.n	800738c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d112      	bne.n	800738c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8007370:	230c      	movs	r3, #12
 8007372:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	461a      	mov	r2, r3
 8007378:	2112      	movs	r1, #18
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 ff59 	bl	8008232 <LSM6DSO_Write_Reg>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800738c:	68fb      	ldr	r3, [r7, #12]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	080086d5 	.word	0x080086d5
 800739c:	0800870b 	.word	0x0800870b

080073a0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3320      	adds	r3, #32
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fe97 	bl	80090e2 <lsm6dso_i3c_disable_set>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80073ba:	f04f 33ff 	mov.w	r3, #4294967295
 80073be:	e060      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3320      	adds	r3, #32
 80073c4:	2101      	movs	r1, #1
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fe65 	bl	8009096 <lsm6dso_auto_increment_set>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	e054      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3320      	adds	r3, #32
 80073dc:	2101      	movs	r1, #1
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fd66 	bl	8008eb0 <lsm6dso_block_data_update_set>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80073ea:	f04f 33ff 	mov.w	r3, #4294967295
 80073ee:	e048      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3320      	adds	r3, #32
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 feb9 	bl	800916e <lsm6dso_fifo_mode_set>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
 8007406:	e03c      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2204      	movs	r2, #4
 800740c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3320      	adds	r3, #32
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f001 fa20 	bl	800885c <lsm6dso_xl_data_rate_set>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8007422:	f04f 33ff 	mov.w	r3, #4294967295
 8007426:	e02c      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3320      	adds	r3, #32
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f001 f9b6 	bl	80087a0 <lsm6dso_xl_full_scale_set>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	e020      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2204      	movs	r2, #4
 8007444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3320      	adds	r3, #32
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fbd0 	bl	8008bf4 <lsm6dso_gy_data_rate_set>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
 800745e:	e010      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3320      	adds	r3, #32
 8007464:	2106      	movs	r1, #6
 8007466:	4618      	mov	r0, r3
 8007468:	f001 fb5c 	bl	8008b24 <lsm6dso_gy_full_scale_set>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	e004      	b.n	8007482 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f888 	bl	80075a8 <LSM6DSO_ACC_Disable>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800749e:	f04f 33ff 	mov.w	r3, #4294967295
 80074a2:	e015      	b.n	80074d0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fc2e 	bl	8007d06 <LSM6DSO_GYRO_Disable>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80074b0:	f04f 33ff 	mov.w	r3, #4294967295
 80074b4:	e00c      	b.n	80074d0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3320      	adds	r3, #32
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 fdc3 	bl	8009074 <lsm6dso_device_id_get>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	e000      	b.n	80074fc <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2201      	movs	r2, #1
 8007518:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2200      	movs	r2, #0
 800751e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800752c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2210      	movs	r2, #16
 8007532:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	4a07      	ldr	r2, [pc, #28]	; (800755c <LSM6DSO_GetCapabilities+0x58>)
 800753e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	4a06      	ldr	r2, [pc, #24]	; (800755c <LSM6DSO_GetCapabilities+0x58>)
 8007544:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	45d02000 	.word	0x45d02000

08007560 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e014      	b.n	80075a0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f103 0220 	add.w	r2, r3, #32
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f001 f969 	bl	800885c <lsm6dso_xl_data_rate_set>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8007590:	f04f 33ff 	mov.w	r3, #4294967295
 8007594:	e004      	b.n	80075a0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e01f      	b.n	80075fe <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f103 0220 	add.w	r2, r3, #32
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3333      	adds	r3, #51	; 0x33
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f001 fa42 	bl	8008a54 <lsm6dso_xl_data_rate_get>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295
 80075da:	e010      	b.n	80075fe <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3320      	adds	r3, #32
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 f93a 	bl	800885c <lsm6dso_xl_data_rate_set>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	e004      	b.n	80075fe <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3320      	adds	r3, #32
 800761a:	f107 020b 	add.w	r2, r7, #11
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f001 f8e3 	bl	80087ec <lsm6dso_xl_full_scale_get>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800762c:	f04f 33ff 	mov.w	r3, #4294967295
 8007630:	e023      	b.n	800767a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d81b      	bhi.n	8007670 <LSM6DSO_ACC_GetSensitivity+0x68>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007651 	.word	0x08007651
 8007644:	08007669 	.word	0x08007669
 8007648:	08007659 	.word	0x08007659
 800764c:	08007661 	.word	0x08007661
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	4a0c      	ldr	r2, [pc, #48]	; (8007684 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8007654:	601a      	str	r2, [r3, #0]
      break;
 8007656:	e00f      	b.n	8007678 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	4a0b      	ldr	r2, [pc, #44]	; (8007688 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800765c:	601a      	str	r2, [r3, #0]
      break;
 800765e:	e00b      	b.n	8007678 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	4a0a      	ldr	r2, [pc, #40]	; (800768c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8007664:	601a      	str	r2, [r3, #0]
      break;
 8007666:	e007      	b.n	8007678 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	4a09      	ldr	r2, [pc, #36]	; (8007690 <LSM6DSO_ACC_GetSensitivity+0x88>)
 800766c:	601a      	str	r2, [r3, #0]
      break;
 800766e:	e003      	b.n	8007678 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8007670:	f04f 33ff 	mov.w	r3, #4294967295
 8007674:	60fb      	str	r3, [r7, #12]
      break;
 8007676:	bf00      	nop
  }

  return ret;
 8007678:	68fb      	ldr	r3, [r7, #12]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	3d79db23 	.word	0x3d79db23
 8007688:	3df9db23 	.word	0x3df9db23
 800768c:	3e79db23 	.word	0x3e79db23
 8007690:	3ef9db23 	.word	0x3ef9db23

08007694 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3320      	adds	r3, #32
 80076a6:	f107 020b 	add.w	r2, r7, #11
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 f9d1 	bl	8008a54 <lsm6dso_xl_data_rate_get>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80076b8:	f04f 33ff 	mov.w	r3, #4294967295
 80076bc:	e054      	b.n	8007768 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	2b0b      	cmp	r3, #11
 80076c2:	d84c      	bhi.n	800775e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076fd 	.word	0x080076fd
 80076d0:	0800770f 	.word	0x0800770f
 80076d4:	08007717 	.word	0x08007717
 80076d8:	0800771f 	.word	0x0800771f
 80076dc:	08007727 	.word	0x08007727
 80076e0:	0800772f 	.word	0x0800772f
 80076e4:	08007737 	.word	0x08007737
 80076e8:	0800773f 	.word	0x0800773f
 80076ec:	08007747 	.word	0x08007747
 80076f0:	0800774f 	.word	0x0800774f
 80076f4:	08007757 	.word	0x08007757
 80076f8:	08007707 	.word	0x08007707
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
      break;
 8007704:	e02f      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	4a19      	ldr	r2, [pc, #100]	; (8007770 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800770a:	601a      	str	r2, [r3, #0]
      break;
 800770c:	e02b      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	4a18      	ldr	r2, [pc, #96]	; (8007774 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8007712:	601a      	str	r2, [r3, #0]
      break;
 8007714:	e027      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	4a17      	ldr	r2, [pc, #92]	; (8007778 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800771a:	601a      	str	r2, [r3, #0]
      break;
 800771c:	e023      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	4a16      	ldr	r2, [pc, #88]	; (800777c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8007722:	601a      	str	r2, [r3, #0]
      break;
 8007724:	e01f      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	4a15      	ldr	r2, [pc, #84]	; (8007780 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800772a:	601a      	str	r2, [r3, #0]
      break;
 800772c:	e01b      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	4a14      	ldr	r2, [pc, #80]	; (8007784 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8007732:	601a      	str	r2, [r3, #0]
      break;
 8007734:	e017      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800773a:	601a      	str	r2, [r3, #0]
      break;
 800773c:	e013      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	4a12      	ldr	r2, [pc, #72]	; (800778c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8007742:	601a      	str	r2, [r3, #0]
      break;
 8007744:	e00f      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800774a:	601a      	str	r2, [r3, #0]
      break;
 800774c:	e00b      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	4a10      	ldr	r2, [pc, #64]	; (8007794 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8007752:	601a      	str	r2, [r3, #0]
      break;
 8007754:	e007      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	4a0f      	ldr	r2, [pc, #60]	; (8007798 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800775a:	601a      	str	r2, [r3, #0]
      break;
 800775c:	e003      	b.n	8007766 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	60fb      	str	r3, [r7, #12]
      break;
 8007764:	bf00      	nop
  }

  return ret;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	3fcccccd 	.word	0x3fcccccd
 8007774:	41480000 	.word	0x41480000
 8007778:	41d00000 	.word	0x41d00000
 800777c:	42500000 	.word	0x42500000
 8007780:	42d00000 	.word	0x42d00000
 8007784:	43500000 	.word	0x43500000
 8007788:	43d08000 	.word	0x43d08000
 800778c:	44504000 	.word	0x44504000
 8007790:	44d06000 	.word	0x44d06000
 8007794:	45505000 	.word	0x45505000
 8007798:	45d05800 	.word	0x45d05800

0800779c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80077a8:	2100      	movs	r1, #0
 80077aa:	ed97 0a00 	vldr	s0, [r7]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f806 	bl	80077c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80077b4:	4603      	mov	r3, r0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08c      	sub	sp, #48	; 0x30
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80077cc:	460b      	mov	r3, r1
 80077ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	f000 80ea 	beq.w	80079b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	f300 8163 	bgt.w	8007aac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d074      	beq.n	80078d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80077ee:	e15d      	b.n	8007aac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f103 0020 	add.w	r0, r3, #32
 80077f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80077fa:	2301      	movs	r3, #1
 80077fc:	2114      	movs	r1, #20
 80077fe:	f000 ff9f 	bl	8008740 <lsm6dso_read_reg>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8007808:	f04f 33ff 	mov.w	r3, #4294967295
 800780c:	e16c      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800780e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d025      	beq.n	8007868 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007822:	2b01      	cmp	r3, #1
 8007824:	d10b      	bne.n	800783e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3320      	adds	r3, #32
 800782a:	2100      	movs	r1, #0
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f815 	bl	800885c <lsm6dso_xl_data_rate_set>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8007838:	f04f 33ff 	mov.w	r3, #4294967295
 800783c:	e154      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800783e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007842:	f36f 13c7 	bfc	r3, #7, #1
 8007846:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f103 0020 	add.w	r0, r3, #32
 8007850:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007854:	2301      	movs	r3, #1
 8007856:	2114      	movs	r1, #20
 8007858:	f000 ff8a 	bl	8008770 <lsm6dso_write_reg>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
 8007866:	e13f      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f103 0020 	add.w	r0, r3, #32
 800786e:	f107 0220 	add.w	r2, r7, #32
 8007872:	2301      	movs	r3, #1
 8007874:	2115      	movs	r1, #21
 8007876:	f000 ff63 	bl	8008740 <lsm6dso_read_reg>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8007880:	f04f 33ff 	mov.w	r3, #4294967295
 8007884:	e130      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8007886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d014      	beq.n	80078be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8007894:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007898:	f36f 1304 	bfc	r3, #4, #1
 800789c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f103 0020 	add.w	r0, r3, #32
 80078a6:	f107 0220 	add.w	r2, r7, #32
 80078aa:	2301      	movs	r3, #1
 80078ac:	2115      	movs	r1, #21
 80078ae:	f000 ff5f 	bl	8008770 <lsm6dso_write_reg>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295
 80078bc:	e114      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80078be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80078c2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80078c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ce:	d400      	bmi.n	80078d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80078d0:	e0f0      	b.n	8007ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80078d2:	4b87      	ldr	r3, [pc, #540]	; (8007af0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d6:	e0ed      	b.n	8007ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f103 0020 	add.w	r0, r3, #32
 80078de:	f107 021c 	add.w	r2, r7, #28
 80078e2:	2301      	movs	r3, #1
 80078e4:	2114      	movs	r1, #20
 80078e6:	f000 ff2b 	bl	8008740 <lsm6dso_read_reg>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	e0f8      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80078f6:	7f3b      	ldrb	r3, [r7, #28]
 80078f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d023      	beq.n	800794a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007908:	2b01      	cmp	r3, #1
 800790a:	d10b      	bne.n	8007924 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3320      	adds	r3, #32
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f000 ffa2 	bl	800885c <lsm6dso_xl_data_rate_set>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
 8007922:	e0e1      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8007924:	7f3b      	ldrb	r3, [r7, #28]
 8007926:	f36f 13c7 	bfc	r3, #7, #1
 800792a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f103 0020 	add.w	r0, r3, #32
 8007932:	f107 021c 	add.w	r2, r7, #28
 8007936:	2301      	movs	r3, #1
 8007938:	2114      	movs	r1, #20
 800793a:	f000 ff19 	bl	8008770 <lsm6dso_write_reg>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8007944:	f04f 33ff 	mov.w	r3, #4294967295
 8007948:	e0ce      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f103 0020 	add.w	r0, r3, #32
 8007950:	f107 0218 	add.w	r2, r7, #24
 8007954:	2301      	movs	r3, #1
 8007956:	2115      	movs	r1, #21
 8007958:	f000 fef2 	bl	8008740 <lsm6dso_read_reg>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8007962:	f04f 33ff 	mov.w	r3, #4294967295
 8007966:	e0bf      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8007968:	7e3b      	ldrb	r3, [r7, #24]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d112      	bne.n	800799a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8007974:	7e3b      	ldrb	r3, [r7, #24]
 8007976:	f043 0310 	orr.w	r3, r3, #16
 800797a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f103 0020 	add.w	r0, r3, #32
 8007982:	f107 0218 	add.w	r2, r7, #24
 8007986:	2301      	movs	r3, #1
 8007988:	2115      	movs	r1, #21
 800798a:	f000 fef1 	bl	8008770 <lsm6dso_write_reg>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	e0a6      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800799a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800799e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007af4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80079a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079aa:	dc00      	bgt.n	80079ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80079ac:	e082      	b.n	8007ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80079ae:	4b52      	ldr	r3, [pc, #328]	; (8007af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b2:	e07f      	b.n	8007ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f103 0020 	add.w	r0, r3, #32
 80079ba:	f107 0210 	add.w	r2, r7, #16
 80079be:	2301      	movs	r3, #1
 80079c0:	2115      	movs	r1, #21
 80079c2:	f000 febd 	bl	8008740 <lsm6dso_read_reg>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	e08a      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80079d2:	7c3b      	ldrb	r3, [r7, #16]
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d012      	beq.n	8007a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80079de:	7c3b      	ldrb	r3, [r7, #16]
 80079e0:	f36f 1304 	bfc	r3, #4, #1
 80079e4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f103 0020 	add.w	r0, r3, #32
 80079ec:	f107 0210 	add.w	r2, r7, #16
 80079f0:	2301      	movs	r3, #1
 80079f2:	2115      	movs	r1, #21
 80079f4:	f000 febc 	bl	8008770 <lsm6dso_write_reg>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	e071      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d108      	bne.n	8007a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f979 	bl	8007d06 <LSM6DSO_GYRO_Disable>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	e063      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f103 0020 	add.w	r0, r3, #32
 8007a26:	f107 0214 	add.w	r2, r7, #20
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	2114      	movs	r1, #20
 8007a2e:	f000 fe87 	bl	8008740 <lsm6dso_read_reg>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e054      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8007a3e:	7d3b      	ldrb	r3, [r7, #20]
 8007a40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d123      	bne.n	8007a92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10b      	bne.n	8007a6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3320      	adds	r3, #32
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fefe 	bl	800885c <lsm6dso_xl_data_rate_set>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8007a66:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6a:	e03d      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8007a6c:	7d3b      	ldrb	r3, [r7, #20]
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a72:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f103 0020 	add.w	r0, r3, #32
 8007a7a:	f107 0214 	add.w	r2, r7, #20
 8007a7e:	2301      	movs	r3, #1
 8007a80:	2114      	movs	r1, #20
 8007a82:	f000 fe75 	bl	8008770 <lsm6dso_write_reg>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	e02a      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007a92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007a96:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007af4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8007a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa2:	dc00      	bgt.n	8007aa6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8007aa4:	e006      	b.n	8007ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aaa:	e003      	b.n	8007ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007ab2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d102      	bne.n	8007ac2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac0:	e012      	b.n	8007ae8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d106      	bne.n	8007ada <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007acc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fbc9 	bl	8008268 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8007ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007ad8:	e005      	b.n	8007ae6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8007ada:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fc5a 	bl	8008398 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8007ae4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3730      	adds	r7, #48	; 0x30
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	41480000 	.word	0x41480000
 8007af4:	43500000 	.word	0x43500000
 8007af8:	43500000 	.word	0x43500000

08007afc <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3320      	adds	r3, #32
 8007b0e:	f107 020b 	add.w	r2, r7, #11
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fe69 	bl	80087ec <lsm6dso_xl_full_scale_get>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295
 8007b24:	e023      	b.n	8007b6e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d81b      	bhi.n	8007b64 <LSM6DSO_ACC_GetFullScale+0x68>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <LSM6DSO_ACC_GetFullScale+0x38>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b55 	.word	0x08007b55
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2202      	movs	r2, #2
 8007b48:	601a      	str	r2, [r3, #0]
      break;
 8007b4a:	e00f      	b.n	8007b6c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2204      	movs	r2, #4
 8007b50:	601a      	str	r2, [r3, #0]
      break;
 8007b52:	e00b      	b.n	8007b6c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2208      	movs	r2, #8
 8007b58:	601a      	str	r2, [r3, #0]
      break;
 8007b5a:	e007      	b.n	8007b6c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	601a      	str	r2, [r3, #0]
      break;
 8007b62:	e003      	b.n	8007b6c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8007b64:	f04f 33ff 	mov.w	r3, #4294967295
 8007b68:	60fb      	str	r3, [r7, #12]
      break;
 8007b6a:	bf00      	nop
  }

  return ret;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop

08007b78 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	dd0b      	ble.n	8007ba0 <LSM6DSO_ACC_SetFullScale+0x28>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	dd06      	ble.n	8007b9c <LSM6DSO_ACC_SetFullScale+0x24>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	dc01      	bgt.n	8007b98 <LSM6DSO_ACC_SetFullScale+0x20>
 8007b94:	2303      	movs	r3, #3
 8007b96:	e004      	b.n	8007ba2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e002      	b.n	8007ba2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e000      	b.n	8007ba2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8007ba0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8007ba2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3320      	adds	r3, #32
 8007ba8:	7bfa      	ldrb	r2, [r7, #15]
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fdf7 	bl	80087a0 <lsm6dso_xl_full_scale_set>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	e000      	b.n	8007bc0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3320      	adds	r3, #32
 8007bd6:	f107 0208 	add.w	r2, r7, #8
 8007bda:	4611      	mov	r1, r2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f9d8 	bl	8008f92 <lsm6dso_acceleration_raw_get>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bec:	e00c      	b.n	8007c08 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007bee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007bf6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007bfe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3320      	adds	r3, #32
 8007c24:	f107 0210 	add.w	r2, r7, #16
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 f9b1 	bl	8008f92 <lsm6dso_acceleration_raw_get>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	e03c      	b.n	8007cb6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007c3c:	f107 030c 	add.w	r3, r7, #12
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fce0 	bl	8007608 <LSM6DSO_ACC_GetSensitivity>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	e030      	b.n	8007cb6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007c54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c6c:	ee17 2a90 	vmov	r2, s15
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c8c:	ee17 2a90 	vmov	r2, s15
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007c94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ca0:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cac:	ee17 2a90 	vmov	r2, s15
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e014      	b.n	8007cfe <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f103 0220 	add.w	r2, r3, #32
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f000 ff86 	bl	8008bf4 <lsm6dso_gy_data_rate_set>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf2:	e004      	b.n	8007cfe <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e01f      	b.n	8007d5c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f103 0220 	add.w	r2, r3, #32
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3334      	adds	r3, #52	; 0x34
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f001 f85f 	bl	8008dec <lsm6dso_gy_data_rate_get>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295
 8007d38:	e010      	b.n	8007d5c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3320      	adds	r3, #32
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 ff57 	bl	8008bf4 <lsm6dso_gy_data_rate_set>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d50:	e004      	b.n	8007d5c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3320      	adds	r3, #32
 8007d76:	f107 020b 	add.w	r2, r7, #11
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fef7 	bl	8008b70 <lsm6dso_gy_full_scale_get>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	e02d      	b.n	8007dea <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	d825      	bhi.n	8007de0 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8007d94:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007db9 	.word	0x08007db9
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007de1 	.word	0x08007de1
 8007dac:	08007dd1 	.word	0x08007dd1
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007dd9 	.word	0x08007dd9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	4a0e      	ldr	r2, [pc, #56]	; (8007df4 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007dbc:	601a      	str	r2, [r3, #0]
      break;
 8007dbe:	e013      	b.n	8007de8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	4a0d      	ldr	r2, [pc, #52]	; (8007df8 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007dc4:	601a      	str	r2, [r3, #0]
      break;
 8007dc6:	e00f      	b.n	8007de8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	4a0c      	ldr	r2, [pc, #48]	; (8007dfc <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007dcc:	601a      	str	r2, [r3, #0]
      break;
 8007dce:	e00b      	b.n	8007de8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	4a0b      	ldr	r2, [pc, #44]	; (8007e00 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007dd4:	601a      	str	r2, [r3, #0]
      break;
 8007dd6:	e007      	b.n	8007de8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	4a0a      	ldr	r2, [pc, #40]	; (8007e04 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007ddc:	601a      	str	r2, [r3, #0]
      break;
 8007dde:	e003      	b.n	8007de8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	60fb      	str	r3, [r7, #12]
      break;
 8007de6:	bf00      	nop
  }

  return ret;
 8007de8:	68fb      	ldr	r3, [r7, #12]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	408c0000 	.word	0x408c0000
 8007df8:	410c0000 	.word	0x410c0000
 8007dfc:	418c0000 	.word	0x418c0000
 8007e00:	420c0000 	.word	0x420c0000
 8007e04:	428c0000 	.word	0x428c0000

08007e08 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3320      	adds	r3, #32
 8007e1a:	f107 020b 	add.w	r2, r7, #11
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 ffe3 	bl	8008dec <lsm6dso_gy_data_rate_get>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e30:	e04e      	b.n	8007ed0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	2b0a      	cmp	r3, #10
 8007e36:	d846      	bhi.n	8007ec6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8007e38:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e77 	.word	0x08007e77
 8007e48:	08007e7f 	.word	0x08007e7f
 8007e4c:	08007e87 	.word	0x08007e87
 8007e50:	08007e8f 	.word	0x08007e8f
 8007e54:	08007e97 	.word	0x08007e97
 8007e58:	08007e9f 	.word	0x08007e9f
 8007e5c:	08007ea7 	.word	0x08007ea7
 8007e60:	08007eaf 	.word	0x08007eaf
 8007e64:	08007eb7 	.word	0x08007eb7
 8007e68:	08007ebf 	.word	0x08007ebf
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
      break;
 8007e74:	e02b      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8007e7a:	601a      	str	r2, [r3, #0]
      break;
 8007e7c:	e027      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	4a16      	ldr	r2, [pc, #88]	; (8007edc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8007e82:	601a      	str	r2, [r3, #0]
      break;
 8007e84:	e023      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	4a15      	ldr	r2, [pc, #84]	; (8007ee0 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8007e8a:	601a      	str	r2, [r3, #0]
      break;
 8007e8c:	e01f      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	4a14      	ldr	r2, [pc, #80]	; (8007ee4 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8007e92:	601a      	str	r2, [r3, #0]
      break;
 8007e94:	e01b      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	4a13      	ldr	r2, [pc, #76]	; (8007ee8 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8007e9a:	601a      	str	r2, [r3, #0]
      break;
 8007e9c:	e017      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	4a12      	ldr	r2, [pc, #72]	; (8007eec <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8007ea2:	601a      	str	r2, [r3, #0]
      break;
 8007ea4:	e013      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	4a11      	ldr	r2, [pc, #68]	; (8007ef0 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8007eaa:	601a      	str	r2, [r3, #0]
      break;
 8007eac:	e00f      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8007eb2:	601a      	str	r2, [r3, #0]
      break;
 8007eb4:	e00b      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	4a0f      	ldr	r2, [pc, #60]	; (8007ef8 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8007eba:	601a      	str	r2, [r3, #0]
      break;
 8007ebc:	e007      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	4a0e      	ldr	r2, [pc, #56]	; (8007efc <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8007ec2:	601a      	str	r2, [r3, #0]
      break;
 8007ec4:	e003      	b.n	8007ece <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8007ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eca:	60fb      	str	r3, [r7, #12]
      break;
 8007ecc:	bf00      	nop
  }

  return ret;
 8007ece:	68fb      	ldr	r3, [r7, #12]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	41480000 	.word	0x41480000
 8007edc:	41d00000 	.word	0x41d00000
 8007ee0:	42500000 	.word	0x42500000
 8007ee4:	42d00000 	.word	0x42d00000
 8007ee8:	43500000 	.word	0x43500000
 8007eec:	43d08000 	.word	0x43d08000
 8007ef0:	44504000 	.word	0x44504000
 8007ef4:	44d06000 	.word	0x44d06000
 8007ef8:	45505000 	.word	0x45505000
 8007efc:	45d05800 	.word	0x45d05800

08007f00 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	ed97 0a00 	vldr	s0, [r7]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f806 	bl	8007f24 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007f30:	460b      	mov	r3, r1
 8007f32:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d028      	beq.n	8007f98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8007f46:	e05c      	b.n	8008002 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f103 0020 	add.w	r0, r3, #32
 8007f4e:	f107 0214 	add.w	r2, r7, #20
 8007f52:	2301      	movs	r3, #1
 8007f54:	2116      	movs	r1, #22
 8007f56:	f000 fbf3 	bl	8008740 <lsm6dso_read_reg>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	e06c      	b.n	8008040 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8007f66:	7d3b      	ldrb	r3, [r7, #20]
 8007f68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04b      	beq.n	800800a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8007f72:	7d3b      	ldrb	r3, [r7, #20]
 8007f74:	f36f 13c7 	bfc	r3, #7, #1
 8007f78:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f103 0020 	add.w	r0, r3, #32
 8007f80:	f107 0214 	add.w	r2, r7, #20
 8007f84:	2301      	movs	r3, #1
 8007f86:	2116      	movs	r1, #22
 8007f88:	f000 fbf2 	bl	8008770 <lsm6dso_write_reg>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d03b      	beq.n	800800a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	e053      	b.n	8008040 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f103 0020 	add.w	r0, r3, #32
 8007f9e:	f107 0210 	add.w	r2, r7, #16
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	2116      	movs	r1, #22
 8007fa6:	f000 fbcb 	bl	8008740 <lsm6dso_read_reg>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8007fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb4:	e044      	b.n	8008040 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8007fb6:	7c3b      	ldrb	r3, [r7, #16]
 8007fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d112      	bne.n	8007fe8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8007fc2:	7c3b      	ldrb	r3, [r7, #16]
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f103 0020 	add.w	r0, r3, #32
 8007fd0:	f107 0210 	add.w	r2, r7, #16
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	2116      	movs	r1, #22
 8007fd8:	f000 fbca 	bl	8008770 <lsm6dso_write_reg>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	e02b      	b.n	8008040 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007fe8:	edd7 7a06 	vldr	s15, [r7, #24]
 8007fec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008048 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8007ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff8:	dc00      	bgt.n	8007ffc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8007ffa:	e007      	b.n	800800c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8007ffc:	4b13      	ldr	r3, [pc, #76]	; (800804c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	e004      	b.n	800800c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	61fb      	str	r3, [r7, #28]
      break;
 8008008:	e000      	b.n	800800c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800800a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008012:	d102      	bne.n	800801a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8008014:	f04f 33ff 	mov.w	r3, #4294967295
 8008018:	e012      	b.n	8008040 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008020:	2b01      	cmp	r3, #1
 8008022:	d106      	bne.n	8008032 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8008024:	ed97 0a06 	vldr	s0, [r7, #24]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fa45 	bl	80084b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800802e:	61f8      	str	r0, [r7, #28]
 8008030:	e005      	b.n	800803e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8008032:	ed97 0a06 	vldr	s0, [r7, #24]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 faca 	bl	80085d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800803c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800803e:	69fb      	ldr	r3, [r7, #28]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	43500000 	.word	0x43500000
 800804c:	43500000 	.word	0x43500000

08008050 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3320      	adds	r3, #32
 8008062:	f107 020b 	add.w	r2, r7, #11
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fd81 	bl	8008b70 <lsm6dso_gy_full_scale_get>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8008074:	f04f 33ff 	mov.w	r3, #4294967295
 8008078:	e030      	b.n	80080dc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	2b06      	cmp	r3, #6
 800807e:	d828      	bhi.n	80080d2 <LSM6DSO_GYRO_GetFullScale+0x82>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080a5 	.word	0x080080a5
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080d3 	.word	0x080080d3
 8008098:	080080bf 	.word	0x080080bf
 800809c:	080080d3 	.word	0x080080d3
 80080a0:	080080c9 	.word	0x080080c9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	227d      	movs	r2, #125	; 0x7d
 80080a8:	601a      	str	r2, [r3, #0]
      break;
 80080aa:	e016      	b.n	80080da <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	22fa      	movs	r2, #250	; 0xfa
 80080b0:	601a      	str	r2, [r3, #0]
      break;
 80080b2:	e012      	b.n	80080da <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80080ba:	601a      	str	r2, [r3, #0]
      break;
 80080bc:	e00d      	b.n	80080da <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080c4:	601a      	str	r2, [r3, #0]
      break;
 80080c6:	e008      	b.n	80080da <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80080ce:	601a      	str	r2, [r3, #0]
      break;
 80080d0:	e003      	b.n	80080da <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80080d2:	f04f 33ff 	mov.w	r3, #4294967295
 80080d6:	60fb      	str	r3, [r7, #12]
      break;
 80080d8:	bf00      	nop
  }

  return ret;
 80080da:	68fb      	ldr	r3, [r7, #12]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b7d      	cmp	r3, #125	; 0x7d
 80080f2:	dd12      	ble.n	800811a <LSM6DSO_GYRO_SetFullScale+0x36>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2bfa      	cmp	r3, #250	; 0xfa
 80080f8:	dd0d      	ble.n	8008116 <LSM6DSO_GYRO_SetFullScale+0x32>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008100:	dd07      	ble.n	8008112 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008108:	dc01      	bgt.n	800810e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800810a:	2304      	movs	r3, #4
 800810c:	e006      	b.n	800811c <LSM6DSO_GYRO_SetFullScale+0x38>
 800810e:	2306      	movs	r3, #6
 8008110:	e004      	b.n	800811c <LSM6DSO_GYRO_SetFullScale+0x38>
 8008112:	2302      	movs	r3, #2
 8008114:	e002      	b.n	800811c <LSM6DSO_GYRO_SetFullScale+0x38>
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <LSM6DSO_GYRO_SetFullScale+0x38>
 800811a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800811c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3320      	adds	r3, #32
 8008122:	7bfa      	ldrb	r2, [r7, #15]
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fcfc 	bl	8008b24 <lsm6dso_gy_full_scale_set>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295
 8008136:	e000      	b.n	800813a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3320      	adds	r3, #32
 8008150:	f107 0208 	add.w	r2, r7, #8
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fed0 	bl	8008efc <lsm6dso_angular_rate_raw_get>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8008162:	f04f 33ff 	mov.w	r3, #4294967295
 8008166:	e00c      	b.n	8008182 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008168:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008170:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008178:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3320      	adds	r3, #32
 8008198:	f107 0210 	add.w	r2, r7, #16
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 feac 	bl	8008efc <lsm6dso_angular_rate_raw_get>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	e03c      	b.n	800822a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fdd4 	bl	8007d64 <LSM6DSO_GYRO_GetSensitivity>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	e030      	b.n	800822a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80081c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80081cc:	ee07 3a90 	vmov	s15, r3
 80081d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80081d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081e0:	ee17 2a90 	vmov	r2, s15
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80081e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80081f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008200:	ee17 2a90 	vmov	r2, s15
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8008208:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008214:	edd7 7a03 	vldr	s15, [r7, #12]
 8008218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008220:	ee17 2a90 	vmov	r2, s15
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
 800823e:	4613      	mov	r3, r2
 8008240:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f103 0020 	add.w	r0, r3, #32
 8008248:	1cba      	adds	r2, r7, #2
 800824a:	78f9      	ldrb	r1, [r7, #3]
 800824c:	2301      	movs	r3, #1
 800824e:	f000 fa8f 	bl	8008770 <lsm6dso_write_reg>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8008258:	f04f 33ff 	mov.w	r3, #4294967295
 800825c:	e000      	b.n	8008260 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008274:	edd7 7a00 	vldr	s15, [r7]
 8008278:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008378 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800827c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008284:	d801      	bhi.n	800828a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008286:	230b      	movs	r3, #11
 8008288:	e063      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800828a:	edd7 7a00 	vldr	s15, [r7]
 800828e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8008292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829a:	d801      	bhi.n	80082a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 800829c:	2301      	movs	r3, #1
 800829e:	e058      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80082a0:	edd7 7a00 	vldr	s15, [r7]
 80082a4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80082a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b0:	d801      	bhi.n	80082b6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e04d      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80082b6:	edd7 7a00 	vldr	s15, [r7]
 80082ba:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800837c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80082be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	d801      	bhi.n	80082cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80082c8:	2303      	movs	r3, #3
 80082ca:	e042      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80082cc:	edd7 7a00 	vldr	s15, [r7]
 80082d0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008380 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80082d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082dc:	d801      	bhi.n	80082e2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80082de:	2304      	movs	r3, #4
 80082e0:	e037      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80082e2:	edd7 7a00 	vldr	s15, [r7]
 80082e6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008384 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80082ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f2:	d801      	bhi.n	80082f8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80082f4:	2305      	movs	r3, #5
 80082f6:	e02c      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80082f8:	edd7 7a00 	vldr	s15, [r7]
 80082fc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008388 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8008300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008308:	d801      	bhi.n	800830e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800830a:	2306      	movs	r3, #6
 800830c:	e021      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800830e:	edd7 7a00 	vldr	s15, [r7]
 8008312:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800838c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8008316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831e:	d801      	bhi.n	8008324 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008320:	2307      	movs	r3, #7
 8008322:	e016      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008324:	edd7 7a00 	vldr	s15, [r7]
 8008328:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008390 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800832c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008334:	d801      	bhi.n	800833a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008336:	2308      	movs	r3, #8
 8008338:	e00b      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800833a:	edd7 7a00 	vldr	s15, [r7]
 800833e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008394 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834a:	d801      	bhi.n	8008350 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800834c:	2309      	movs	r3, #9
 800834e:	e000      	b.n	8008352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008350:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8008352:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3320      	adds	r3, #32
 8008358:	7bfa      	ldrb	r2, [r7, #15]
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fa7d 	bl	800885c <lsm6dso_xl_data_rate_set>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8008368:	f04f 33ff 	mov.w	r3, #4294967295
 800836c:	e000      	b.n	8008370 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	3fcccccd 	.word	0x3fcccccd
 800837c:	42500000 	.word	0x42500000
 8008380:	42d00000 	.word	0x42d00000
 8008384:	43500000 	.word	0x43500000
 8008388:	43d08000 	.word	0x43d08000
 800838c:	44504000 	.word	0x44504000
 8008390:	44d06000 	.word	0x44d06000
 8008394:	45505000 	.word	0x45505000

08008398 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80083a4:	edd7 7a00 	vldr	s15, [r7]
 80083a8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008498 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80083ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b4:	d801      	bhi.n	80083ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80083b6:	230b      	movs	r3, #11
 80083b8:	e063      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80083ba:	edd7 7a00 	vldr	s15, [r7]
 80083be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80083c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ca:	d801      	bhi.n	80083d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e058      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80083d0:	edd7 7a00 	vldr	s15, [r7]
 80083d4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80083d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	d801      	bhi.n	80083e6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e04d      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80083e6:	edd7 7a00 	vldr	s15, [r7]
 80083ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800849c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80083ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f6:	d801      	bhi.n	80083fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80083f8:	2303      	movs	r3, #3
 80083fa:	e042      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80083fc:	edd7 7a00 	vldr	s15, [r7]
 8008400:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80084a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8008404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840c:	d801      	bhi.n	8008412 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800840e:	2304      	movs	r3, #4
 8008410:	e037      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008412:	edd7 7a00 	vldr	s15, [r7]
 8008416:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80084a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800841a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008422:	d801      	bhi.n	8008428 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008424:	2305      	movs	r3, #5
 8008426:	e02c      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008428:	edd7 7a00 	vldr	s15, [r7]
 800842c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80084a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8008430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008438:	d801      	bhi.n	800843e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800843a:	2306      	movs	r3, #6
 800843c:	e021      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800843e:	edd7 7a00 	vldr	s15, [r7]
 8008442:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80084ac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844e:	d801      	bhi.n	8008454 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008450:	2307      	movs	r3, #7
 8008452:	e016      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008454:	edd7 7a00 	vldr	s15, [r7]
 8008458:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80084b0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800845c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008464:	d801      	bhi.n	800846a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008466:	2308      	movs	r3, #8
 8008468:	e00b      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800846a:	edd7 7a00 	vldr	s15, [r7]
 800846e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80084b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847a:	d801      	bhi.n	8008480 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800847c:	2309      	movs	r3, #9
 800847e:	e000      	b.n	8008482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008480:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	3fcccccd 	.word	0x3fcccccd
 800849c:	42500000 	.word	0x42500000
 80084a0:	42d00000 	.word	0x42d00000
 80084a4:	43500000 	.word	0x43500000
 80084a8:	43d08000 	.word	0x43d08000
 80084ac:	44504000 	.word	0x44504000
 80084b0:	44d06000 	.word	0x44d06000
 80084b4:	45505000 	.word	0x45505000

080084b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80084c4:	edd7 7a00 	vldr	s15, [r7]
 80084c8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80084cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d4:	d801      	bhi.n	80084da <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e058      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80084da:	edd7 7a00 	vldr	s15, [r7]
 80084de:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80084e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ea:	d801      	bhi.n	80084f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e04d      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80084f0:	edd7 7a00 	vldr	s15, [r7]
 80084f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80085b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80084f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	d801      	bhi.n	8008506 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8008502:	2303      	movs	r3, #3
 8008504:	e042      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008506:	edd7 7a00 	vldr	s15, [r7]
 800850a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80085b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800850e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008516:	d801      	bhi.n	800851c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008518:	2304      	movs	r3, #4
 800851a:	e037      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800851c:	edd7 7a00 	vldr	s15, [r7]
 8008520:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80085bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8008524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d801      	bhi.n	8008532 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800852e:	2305      	movs	r3, #5
 8008530:	e02c      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008532:	edd7 7a00 	vldr	s15, [r7]
 8008536:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80085c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800853a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	d801      	bhi.n	8008548 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008544:	2306      	movs	r3, #6
 8008546:	e021      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008548:	edd7 7a00 	vldr	s15, [r7]
 800854c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80085c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8008550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008558:	d801      	bhi.n	800855e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800855a:	2307      	movs	r3, #7
 800855c:	e016      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800855e:	edd7 7a00 	vldr	s15, [r7]
 8008562:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80085c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856e:	d801      	bhi.n	8008574 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8008570:	2308      	movs	r3, #8
 8008572:	e00b      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008574:	edd7 7a00 	vldr	s15, [r7]
 8008578:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80085cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800857c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	d801      	bhi.n	800858a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8008586:	2309      	movs	r3, #9
 8008588:	e000      	b.n	800858c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800858a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800858c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3320      	adds	r3, #32
 8008592:	7bfa      	ldrb	r2, [r7, #15]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fb2c 	bl	8008bf4 <lsm6dso_gy_data_rate_set>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295
 80085a6:	e000      	b.n	80085aa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	42500000 	.word	0x42500000
 80085b8:	42d00000 	.word	0x42d00000
 80085bc:	43500000 	.word	0x43500000
 80085c0:	43d08000 	.word	0x43d08000
 80085c4:	44504000 	.word	0x44504000
 80085c8:	44d06000 	.word	0x44d06000
 80085cc:	45505000 	.word	0x45505000

080085d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80085dc:	edd7 7a00 	vldr	s15, [r7]
 80085e0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80085e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ec:	d801      	bhi.n	80085f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e058      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80085f2:	edd7 7a00 	vldr	s15, [r7]
 80085f6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80085fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008602:	d801      	bhi.n	8008608 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8008604:	2302      	movs	r3, #2
 8008606:	e04d      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008608:	edd7 7a00 	vldr	s15, [r7]
 800860c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80086b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8008610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008618:	d801      	bhi.n	800861e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800861a:	2303      	movs	r3, #3
 800861c:	e042      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800861e:	edd7 7a00 	vldr	s15, [r7]
 8008622:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80086bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8008626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862e:	d801      	bhi.n	8008634 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8008630:	2304      	movs	r3, #4
 8008632:	e037      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008634:	edd7 7a00 	vldr	s15, [r7]
 8008638:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80086c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800863c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008644:	d801      	bhi.n	800864a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8008646:	2305      	movs	r3, #5
 8008648:	e02c      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800864a:	edd7 7a00 	vldr	s15, [r7]
 800864e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80086c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8008652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865a:	d801      	bhi.n	8008660 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800865c:	2306      	movs	r3, #6
 800865e:	e021      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008660:	edd7 7a00 	vldr	s15, [r7]
 8008664:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80086c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8008668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800866c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008670:	d801      	bhi.n	8008676 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8008672:	2307      	movs	r3, #7
 8008674:	e016      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008676:	edd7 7a00 	vldr	s15, [r7]
 800867a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80086cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800867e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008686:	d801      	bhi.n	800868c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8008688:	2308      	movs	r3, #8
 800868a:	e00b      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800868c:	edd7 7a00 	vldr	s15, [r7]
 8008690:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80086d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8008694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	d801      	bhi.n	80086a2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800869e:	2309      	movs	r3, #9
 80086a0:	e000      	b.n	80086a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80086a2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	42500000 	.word	0x42500000
 80086bc:	42d00000 	.word	0x42d00000
 80086c0:	43500000 	.word	0x43500000
 80086c4:	43d08000 	.word	0x43d08000
 80086c8:	44504000 	.word	0x44504000
 80086cc:	44d06000 	.word	0x44d06000
 80086d0:	45505000 	.word	0x45505000

080086d4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80086d4:	b590      	push	{r4, r7, lr}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	461a      	mov	r2, r3
 80086e0:	460b      	mov	r3, r1
 80086e2:	72fb      	strb	r3, [r7, #11]
 80086e4:	4613      	mov	r3, r2
 80086e6:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	695c      	ldr	r4, [r3, #20]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	7b1b      	ldrb	r3, [r3, #12]
 80086f4:	b298      	uxth	r0, r3
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	b299      	uxth	r1, r3
 80086fa:	893b      	ldrh	r3, [r7, #8]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	47a0      	blx	r4
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	bd90      	pop	{r4, r7, pc}

0800870a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800870a:	b590      	push	{r4, r7, lr}
 800870c:	b087      	sub	sp, #28
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	461a      	mov	r2, r3
 8008716:	460b      	mov	r3, r1
 8008718:	72fb      	strb	r3, [r7, #11]
 800871a:	4613      	mov	r3, r2
 800871c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	691c      	ldr	r4, [r3, #16]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	7b1b      	ldrb	r3, [r3, #12]
 800872a:	b298      	uxth	r0, r3
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	b299      	uxth	r1, r3
 8008730:	893b      	ldrh	r3, [r7, #8]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	47a0      	blx	r4
 8008736:	4603      	mov	r3, r0
}
 8008738:	4618      	mov	r0, r3
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	bd90      	pop	{r4, r7, pc}

08008740 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	461a      	mov	r2, r3
 800874c:	460b      	mov	r3, r1
 800874e:	72fb      	strb	r3, [r7, #11]
 8008750:	4613      	mov	r3, r2
 8008752:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	685c      	ldr	r4, [r3, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68d8      	ldr	r0, [r3, #12]
 800875c:	893b      	ldrh	r3, [r7, #8]
 800875e:	7af9      	ldrb	r1, [r7, #11]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	47a0      	blx	r4
 8008764:	6178      	str	r0, [r7, #20]

  return ret;
 8008766:	697b      	ldr	r3, [r7, #20]
}
 8008768:	4618      	mov	r0, r3
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	bd90      	pop	{r4, r7, pc}

08008770 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8008770:	b590      	push	{r4, r7, lr}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	461a      	mov	r2, r3
 800877c:	460b      	mov	r3, r1
 800877e:	72fb      	strb	r3, [r7, #11]
 8008780:	4613      	mov	r3, r2
 8008782:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681c      	ldr	r4, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68d8      	ldr	r0, [r3, #12]
 800878c:	893b      	ldrh	r3, [r7, #8]
 800878e:	7af9      	ldrb	r1, [r7, #11]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	47a0      	blx	r4
 8008794:	6178      	str	r0, [r7, #20]

  return ret;
 8008796:	697b      	ldr	r3, [r7, #20]
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	bd90      	pop	{r4, r7, pc}

080087a0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80087ac:	f107 0208 	add.w	r2, r7, #8
 80087b0:	2301      	movs	r3, #1
 80087b2:	2110      	movs	r1, #16
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ffc3 	bl	8008740 <lsm6dso_read_reg>
 80087ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10f      	bne.n	80087e2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	7a3b      	ldrb	r3, [r7, #8]
 80087cc:	f362 0383 	bfi	r3, r2, #2, #2
 80087d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80087d2:	f107 0208 	add.w	r2, r7, #8
 80087d6:	2301      	movs	r3, #1
 80087d8:	2110      	movs	r1, #16
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff ffc8 	bl	8008770 <lsm6dso_write_reg>
 80087e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80087f6:	f107 0208 	add.w	r2, r7, #8
 80087fa:	2301      	movs	r3, #1
 80087fc:	2110      	movs	r1, #16
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff ff9e 	bl	8008740 <lsm6dso_read_reg>
 8008804:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8008806:	7a3b      	ldrb	r3, [r7, #8]
 8008808:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b03      	cmp	r3, #3
 8008810:	d81a      	bhi.n	8008848 <lsm6dso_xl_full_scale_get+0x5c>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <lsm6dso_xl_full_scale_get+0x2c>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	08008829 	.word	0x08008829
 800881c:	08008831 	.word	0x08008831
 8008820:	08008839 	.word	0x08008839
 8008824:	08008841 	.word	0x08008841
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
      break;
 800882e:	e00f      	b.n	8008850 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2201      	movs	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
      break;
 8008836:	e00b      	b.n	8008850 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2202      	movs	r2, #2
 800883c:	701a      	strb	r2, [r3, #0]
      break;
 800883e:	e007      	b.n	8008850 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2203      	movs	r2, #3
 8008844:	701a      	strb	r2, [r3, #0]
      break;
 8008846:	e003      	b.n	8008850 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	68fb      	ldr	r3, [r7, #12]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop

0800885c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800886c:	f107 030c 	add.w	r3, r7, #12
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fca1 	bl	80091ba <lsm6dso_fsm_enable_get>
 8008878:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 80c4 	bne.w	8008a0a <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008882:	7b3b      	ldrb	r3, [r7, #12]
 8008884:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008888:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800888a:	7b3b      	ldrb	r3, [r7, #12]
 800888c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008890:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008892:	4313      	orrs	r3, r2
 8008894:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008896:	7b3b      	ldrb	r3, [r7, #12]
 8008898:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800889c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800889e:	4313      	orrs	r3, r2
 80088a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80088a2:	7b3b      	ldrb	r3, [r7, #12]
 80088a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80088aa:	4313      	orrs	r3, r2
 80088ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80088ae:	7b3b      	ldrb	r3, [r7, #12]
 80088b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80088b6:	4313      	orrs	r3, r2
 80088b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80088ba:	7b3b      	ldrb	r3, [r7, #12]
 80088bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80088c6:	7b3b      	ldrb	r3, [r7, #12]
 80088c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80088ce:	4313      	orrs	r3, r2
 80088d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80088d2:	7b3b      	ldrb	r3, [r7, #12]
 80088d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80088da:	4313      	orrs	r3, r2
 80088dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80088de:	7b7b      	ldrb	r3, [r7, #13]
 80088e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80088e6:	4313      	orrs	r3, r2
 80088e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80088ea:	7b7b      	ldrb	r3, [r7, #13]
 80088ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80088f6:	7b7b      	ldrb	r3, [r7, #13]
 80088f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80088fe:	4313      	orrs	r3, r2
 8008900:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008902:	7b7b      	ldrb	r3, [r7, #13]
 8008904:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008908:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800890a:	4313      	orrs	r3, r2
 800890c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800890e:	7b7b      	ldrb	r3, [r7, #13]
 8008910:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008914:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008916:	4313      	orrs	r3, r2
 8008918:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800891a:	7b7b      	ldrb	r3, [r7, #13]
 800891c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008920:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008922:	4313      	orrs	r3, r2
 8008924:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008926:	7b7b      	ldrb	r3, [r7, #13]
 8008928:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800892c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800892e:	4313      	orrs	r3, r2
 8008930:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008932:	7b7b      	ldrb	r3, [r7, #13]
 8008934:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008938:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800893a:	4313      	orrs	r3, r2
 800893c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800893e:	2b01      	cmp	r3, #1
 8008940:	d163      	bne.n	8008a0a <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008942:	f107 030b 	add.w	r3, r7, #11
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fc57 	bl	80091fc <lsm6dso_fsm_data_rate_get>
 800894e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d159      	bne.n	8008a0a <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8008956:	7afb      	ldrb	r3, [r7, #11]
 8008958:	2b03      	cmp	r3, #3
 800895a:	d853      	bhi.n	8008a04 <lsm6dso_xl_data_rate_set+0x1a8>
 800895c:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <lsm6dso_xl_data_rate_set+0x108>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	08008975 	.word	0x08008975
 8008968:	08008987 	.word	0x08008987
 800896c:	080089a5 	.word	0x080089a5
 8008970:	080089cf 	.word	0x080089cf
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8008974:	78fb      	ldrb	r3, [r7, #3]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800897a:	2301      	movs	r3, #1
 800897c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800897e:	e045      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	75fb      	strb	r3, [r7, #23]
            break;
 8008984:	e042      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800898c:	2302      	movs	r3, #2
 800898e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8008990:	e03c      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d102      	bne.n	800899e <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8008998:	2302      	movs	r3, #2
 800899a:	75fb      	strb	r3, [r7, #23]
            break;
 800899c:	e036      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	75fb      	strb	r3, [r7, #23]
            break;
 80089a2:	e033      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80089aa:	2303      	movs	r3, #3
 80089ac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80089ae:	e02d      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d102      	bne.n	80089bc <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80089b6:	2303      	movs	r3, #3
 80089b8:	75fb      	strb	r3, [r7, #23]
            break;
 80089ba:	e027      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d102      	bne.n	80089c8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80089c2:	2303      	movs	r3, #3
 80089c4:	75fb      	strb	r3, [r7, #23]
            break;
 80089c6:	e021      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	75fb      	strb	r3, [r7, #23]
            break;
 80089cc:	e01e      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80089d4:	2304      	movs	r3, #4
 80089d6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80089d8:	e018      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d102      	bne.n	80089e6 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80089e0:	2304      	movs	r3, #4
 80089e2:	75fb      	strb	r3, [r7, #23]
            break;
 80089e4:	e012      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80089e6:	78fb      	ldrb	r3, [r7, #3]
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d102      	bne.n	80089f2 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80089ec:	2304      	movs	r3, #4
 80089ee:	75fb      	strb	r3, [r7, #23]
            break;
 80089f0:	e00c      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80089f2:	78fb      	ldrb	r3, [r7, #3]
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d102      	bne.n	80089fe <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80089f8:	2304      	movs	r3, #4
 80089fa:	75fb      	strb	r3, [r7, #23]
            break;
 80089fc:	e006      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	75fb      	strb	r3, [r7, #23]
            break;
 8008a02:	e003      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	75fb      	strb	r3, [r7, #23]
            break;
 8008a08:	e000      	b.n	8008a0c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8008a0a:	bf00      	nop
    }
  }

  if (ret == 0)
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d107      	bne.n	8008a22 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	2301      	movs	r3, #1
 8008a18:	2110      	movs	r1, #16
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff fe90 	bl	8008740 <lsm6dso_read_reg>
 8008a20:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10f      	bne.n	8008a48 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	7a3b      	ldrb	r3, [r7, #8]
 8008a32:	f362 1307 	bfi	r3, r2, #4, #4
 8008a36:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008a38:	f107 0208 	add.w	r2, r7, #8
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	2110      	movs	r1, #16
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fe95 	bl	8008770 <lsm6dso_write_reg>
 8008a46:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8008a48:	693b      	ldr	r3, [r7, #16]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop

08008a54 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008a5e:	f107 0208 	add.w	r2, r7, #8
 8008a62:	2301      	movs	r3, #1
 8008a64:	2110      	movs	r1, #16
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fe6a 	bl	8008740 <lsm6dso_read_reg>
 8008a6c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8008a6e:	7a3b      	ldrb	r3, [r7, #8]
 8008a70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b0b      	cmp	r3, #11
 8008a78:	d84a      	bhi.n	8008b10 <lsm6dso_xl_data_rate_get+0xbc>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <lsm6dso_xl_data_rate_get+0x2c>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008ab9 	.word	0x08008ab9
 8008a88:	08008ac1 	.word	0x08008ac1
 8008a8c:	08008ac9 	.word	0x08008ac9
 8008a90:	08008ad1 	.word	0x08008ad1
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ae1 	.word	0x08008ae1
 8008a9c:	08008ae9 	.word	0x08008ae9
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	08008af9 	.word	0x08008af9
 8008aa8:	08008b01 	.word	0x08008b01
 8008aac:	08008b09 	.word	0x08008b09
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
      break;
 8008ab6:	e02f      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2201      	movs	r2, #1
 8008abc:	701a      	strb	r2, [r3, #0]
      break;
 8008abe:	e02b      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	701a      	strb	r2, [r3, #0]
      break;
 8008ac6:	e027      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2203      	movs	r2, #3
 8008acc:	701a      	strb	r2, [r3, #0]
      break;
 8008ace:	e023      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	701a      	strb	r2, [r3, #0]
      break;
 8008ad6:	e01f      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2205      	movs	r2, #5
 8008adc:	701a      	strb	r2, [r3, #0]
      break;
 8008ade:	e01b      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2206      	movs	r2, #6
 8008ae4:	701a      	strb	r2, [r3, #0]
      break;
 8008ae6:	e017      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2207      	movs	r2, #7
 8008aec:	701a      	strb	r2, [r3, #0]
      break;
 8008aee:	e013      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2208      	movs	r2, #8
 8008af4:	701a      	strb	r2, [r3, #0]
      break;
 8008af6:	e00f      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2209      	movs	r2, #9
 8008afc:	701a      	strb	r2, [r3, #0]
      break;
 8008afe:	e00b      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	220a      	movs	r2, #10
 8008b04:	701a      	strb	r2, [r3, #0]
      break;
 8008b06:	e007      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	220b      	movs	r2, #11
 8008b0c:	701a      	strb	r2, [r3, #0]
      break;
 8008b0e:	e003      	b.n	8008b18 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
      break;
 8008b16:	bf00      	nop
  }

  return ret;
 8008b18:	68fb      	ldr	r3, [r7, #12]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop

08008b24 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008b30:	f107 0208 	add.w	r2, r7, #8
 8008b34:	2301      	movs	r3, #1
 8008b36:	2111      	movs	r1, #17
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff fe01 	bl	8008740 <lsm6dso_read_reg>
 8008b3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10f      	bne.n	8008b66 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	7a3b      	ldrb	r3, [r7, #8]
 8008b50:	f362 0343 	bfi	r3, r2, #1, #3
 8008b54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008b56:	f107 0208 	add.w	r2, r7, #8
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	2111      	movs	r1, #17
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7ff fe06 	bl	8008770 <lsm6dso_write_reg>
 8008b64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008b66:	68fb      	ldr	r3, [r7, #12]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008b7a:	f107 0208 	add.w	r2, r7, #8
 8008b7e:	2301      	movs	r3, #1
 8008b80:	2111      	movs	r1, #17
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff fddc 	bl	8008740 <lsm6dso_read_reg>
 8008b88:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8008b8a:	7a3b      	ldrb	r3, [r7, #8]
 8008b8c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b06      	cmp	r3, #6
 8008b94:	d824      	bhi.n	8008be0 <lsm6dso_gy_full_scale_get+0x70>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <lsm6dso_gy_full_scale_get+0x2c>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bb9 	.word	0x08008bb9
 8008ba0:	08008bc1 	.word	0x08008bc1
 8008ba4:	08008bc9 	.word	0x08008bc9
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008be1 	.word	0x08008be1
 8008bb4:	08008bd9 	.word	0x08008bd9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e013      	b.n	8008be8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
      break;
 8008bc6:	e00f      	b.n	8008be8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	701a      	strb	r2, [r3, #0]
      break;
 8008bce:	e00b      	b.n	8008be8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	e007      	b.n	8008be8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2206      	movs	r2, #6
 8008bdc:	701a      	strb	r2, [r3, #0]
      break;
 8008bde:	e003      	b.n	8008be8 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
      break;
 8008be6:	bf00      	nop
  }

  return ret;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008c04:	f107 030c 	add.w	r3, r7, #12
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fad5 	bl	80091ba <lsm6dso_fsm_enable_get>
 8008c10:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 80c4 	bne.w	8008da2 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008c1a:	7b3b      	ldrb	r3, [r7, #12]
 8008c1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008c22:	7b3b      	ldrb	r3, [r7, #12]
 8008c24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c28:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008c2e:	7b3b      	ldrb	r3, [r7, #12]
 8008c30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008c3a:	7b3b      	ldrb	r3, [r7, #12]
 8008c3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8008c46:	7b3b      	ldrb	r3, [r7, #12]
 8008c48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008c4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008c52:	7b3b      	ldrb	r3, [r7, #12]
 8008c54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008c58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008c5e:	7b3b      	ldrb	r3, [r7, #12]
 8008c60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008c64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8008c66:	4313      	orrs	r3, r2
 8008c68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008c6a:	7b3b      	ldrb	r3, [r7, #12]
 8008c6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008c70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8008c76:	7b7b      	ldrb	r3, [r7, #13]
 8008c78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008c82:	7b7b      	ldrb	r3, [r7, #13]
 8008c84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008c8e:	7b7b      	ldrb	r3, [r7, #13]
 8008c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8008c96:	4313      	orrs	r3, r2
 8008c98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008c9a:	7b7b      	ldrb	r3, [r7, #13]
 8008c9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ca0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008ca6:	7b7b      	ldrb	r3, [r7, #13]
 8008ca8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008cac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008cb2:	7b7b      	ldrb	r3, [r7, #13]
 8008cb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008cb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008cbe:	7b7b      	ldrb	r3, [r7, #13]
 8008cc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008cc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008cca:	7b7b      	ldrb	r3, [r7, #13]
 8008ccc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008cd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d163      	bne.n	8008da2 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008cda:	f107 030b 	add.w	r3, r7, #11
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fa8b 	bl	80091fc <lsm6dso_fsm_data_rate_get>
 8008ce6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d159      	bne.n	8008da2 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d853      	bhi.n	8008d9c <lsm6dso_gy_data_rate_set+0x1a8>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <lsm6dso_gy_data_rate_set+0x108>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d1f 	.word	0x08008d1f
 8008d04:	08008d3d 	.word	0x08008d3d
 8008d08:	08008d67 	.word	0x08008d67
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8008d12:	2301      	movs	r3, #1
 8008d14:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008d16:	e045      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d1c:	e042      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008d24:	2302      	movs	r3, #2
 8008d26:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008d28:	e03c      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008d30:	2302      	movs	r3, #2
 8008d32:	75fb      	strb	r3, [r7, #23]
            break;
 8008d34:	e036      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	75fb      	strb	r3, [r7, #23]
            break;
 8008d3a:	e033      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008d42:	2303      	movs	r3, #3
 8008d44:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008d46:	e02d      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d102      	bne.n	8008d54 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
            break;
 8008d52:	e027      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d102      	bne.n	8008d60 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	75fb      	strb	r3, [r7, #23]
            break;
 8008d5e:	e021      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	75fb      	strb	r3, [r7, #23]
            break;
 8008d64:	e01e      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008d6c:	2304      	movs	r3, #4
 8008d6e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8008d70:	e018      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d102      	bne.n	8008d7e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008d78:	2304      	movs	r3, #4
 8008d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d7c:	e012      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d102      	bne.n	8008d8a <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008d84:	2304      	movs	r3, #4
 8008d86:	75fb      	strb	r3, [r7, #23]
            break;
 8008d88:	e00c      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d102      	bne.n	8008d96 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008d90:	2304      	movs	r3, #4
 8008d92:	75fb      	strb	r3, [r7, #23]
            break;
 8008d94:	e006      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	75fb      	strb	r3, [r7, #23]
            break;
 8008d9a:	e003      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	75fb      	strb	r3, [r7, #23]
            break;
 8008da0:	e000      	b.n	8008da4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8008da2:	bf00      	nop
    }
  }

  if (ret == 0)
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d107      	bne.n	8008dba <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	2301      	movs	r3, #1
 8008db0:	2111      	movs	r1, #17
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fcc4 	bl	8008740 <lsm6dso_read_reg>
 8008db8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10f      	bne.n	8008de0 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	7a3b      	ldrb	r3, [r7, #8]
 8008dca:	f362 1307 	bfi	r3, r2, #4, #4
 8008dce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	2111      	movs	r1, #17
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fcc9 	bl	8008770 <lsm6dso_write_reg>
 8008dde:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8008de0:	693b      	ldr	r3, [r7, #16]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop

08008dec <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	2111      	movs	r1, #17
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fc9e 	bl	8008740 <lsm6dso_read_reg>
 8008e04:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8008e06:	7a3b      	ldrb	r3, [r7, #8]
 8008e08:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b0a      	cmp	r3, #10
 8008e10:	d844      	bhi.n	8008e9c <lsm6dso_gy_data_rate_get+0xb0>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <lsm6dso_gy_data_rate_get+0x2c>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	08008e4d 	.word	0x08008e4d
 8008e20:	08008e55 	.word	0x08008e55
 8008e24:	08008e5d 	.word	0x08008e5d
 8008e28:	08008e65 	.word	0x08008e65
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e8d 	.word	0x08008e8d
 8008e40:	08008e95 	.word	0x08008e95
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
      break;
 8008e4a:	e02b      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
      break;
 8008e52:	e027      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
      break;
 8008e5a:	e023      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	e01f      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2204      	movs	r2, #4
 8008e68:	701a      	strb	r2, [r3, #0]
      break;
 8008e6a:	e01b      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2205      	movs	r2, #5
 8008e70:	701a      	strb	r2, [r3, #0]
      break;
 8008e72:	e017      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2206      	movs	r2, #6
 8008e78:	701a      	strb	r2, [r3, #0]
      break;
 8008e7a:	e013      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2207      	movs	r2, #7
 8008e80:	701a      	strb	r2, [r3, #0]
      break;
 8008e82:	e00f      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2208      	movs	r2, #8
 8008e88:	701a      	strb	r2, [r3, #0]
      break;
 8008e8a:	e00b      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2209      	movs	r2, #9
 8008e90:	701a      	strb	r2, [r3, #0]
      break;
 8008e92:	e007      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	220a      	movs	r2, #10
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e003      	b.n	8008ea4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
      break;
 8008ea2:	bf00      	nop
  }

  return ret;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop

08008eb0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008ebc:	f107 0208 	add.w	r2, r7, #8
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	2112      	movs	r1, #18
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff fc3b 	bl	8008740 <lsm6dso_read_reg>
 8008eca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10f      	bne.n	8008ef2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	7a3b      	ldrb	r3, [r7, #8]
 8008edc:	f362 1386 	bfi	r3, r2, #6, #1
 8008ee0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008ee2:	f107 0208 	add.w	r2, r7, #8
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	2112      	movs	r1, #18
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff fc40 	bl	8008770 <lsm6dso_write_reg>
 8008ef0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8008f06:	f107 020c 	add.w	r2, r7, #12
 8008f0a:	2306      	movs	r3, #6
 8008f0c:	2122      	movs	r1, #34	; 0x22
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fc16 	bl	8008740 <lsm6dso_read_reg>
 8008f14:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008f16:	7b7b      	ldrb	r3, [r7, #13]
 8008f18:	b21a      	sxth	r2, r3
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	7b3b      	ldrb	r3, [r7, #12]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	4413      	add	r3, r2
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	b21a      	sxth	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008f38:	7bfa      	ldrb	r2, [r7, #15]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	b212      	sxth	r2, r2
 8008f40:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	3302      	adds	r3, #2
 8008f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4413      	add	r3, r2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	3302      	adds	r3, #2
 8008f5c:	b212      	sxth	r2, r2
 8008f5e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008f60:	7c7a      	ldrb	r2, [r7, #17]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	3304      	adds	r3, #4
 8008f66:	b212      	sxth	r2, r2
 8008f68:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	7c3b      	ldrb	r3, [r7, #16]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3304      	adds	r3, #4
 8008f84:	b212      	sxth	r2, r2
 8008f86:	801a      	strh	r2, [r3, #0]

  return ret;
 8008f88:	697b      	ldr	r3, [r7, #20]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8008f9c:	f107 020c 	add.w	r2, r7, #12
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	2128      	movs	r1, #40	; 0x28
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fbcb 	bl	8008740 <lsm6dso_read_reg>
 8008faa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008fac:	7b7b      	ldrb	r3, [r7, #13]
 8008fae:	b21a      	sxth	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	7b3b      	ldrb	r3, [r7, #12]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	b21a      	sxth	r2, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008fce:	7bfa      	ldrb	r2, [r7, #15]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	b212      	sxth	r2, r2
 8008fd6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	3302      	adds	r3, #2
 8008fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	b212      	sxth	r2, r2
 8008ff4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008ff6:	7c7a      	ldrb	r2, [r7, #17]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	b212      	sxth	r2, r2
 8008ffe:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	3304      	adds	r3, #4
 8009004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009008:	b29b      	uxth	r3, r3
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	b29a      	uxth	r2, r3
 800900e:	7c3b      	ldrb	r3, [r7, #16]
 8009010:	b29b      	uxth	r3, r3
 8009012:	4413      	add	r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	3304      	adds	r3, #4
 800901a:	b212      	sxth	r2, r2
 800901c:	801a      	strh	r2, [r3, #0]

  return ret;
 800901e:	697b      	ldr	r3, [r7, #20]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8009034:	f107 0208 	add.w	r2, r7, #8
 8009038:	2301      	movs	r3, #1
 800903a:	2101      	movs	r1, #1
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fb7f 	bl	8008740 <lsm6dso_read_reg>
 8009042:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10f      	bne.n	800906a <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	b2da      	uxtb	r2, r3
 8009052:	7a3b      	ldrb	r3, [r7, #8]
 8009054:	f362 1387 	bfi	r3, r2, #6, #2
 8009058:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800905a:	f107 0208 	add.w	r2, r7, #8
 800905e:	2301      	movs	r3, #1
 8009060:	2101      	movs	r1, #1
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fb84 	bl	8008770 <lsm6dso_write_reg>
 8009068:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800906a:	68fb      	ldr	r3, [r7, #12]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800907e:	2301      	movs	r3, #1
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	210f      	movs	r1, #15
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fb5b 	bl	8008740 <lsm6dso_read_reg>
 800908a:	60f8      	str	r0, [r7, #12]

  return ret;
 800908c:	68fb      	ldr	r3, [r7, #12]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80090a2:	f107 0208 	add.w	r2, r7, #8
 80090a6:	2301      	movs	r3, #1
 80090a8:	2112      	movs	r1, #18
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fb48 	bl	8008740 <lsm6dso_read_reg>
 80090b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10f      	bne.n	80090d8 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	7a3b      	ldrb	r3, [r7, #8]
 80090c2:	f362 0382 	bfi	r3, r2, #2, #1
 80090c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80090c8:	f107 0208 	add.w	r2, r7, #8
 80090cc:	2301      	movs	r3, #1
 80090ce:	2112      	movs	r1, #18
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fb4d 	bl	8008770 <lsm6dso_write_reg>
 80090d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80090d8:	68fb      	ldr	r3, [r7, #12]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b086      	sub	sp, #24
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80090ee:	f107 020c 	add.w	r2, r7, #12
 80090f2:	2301      	movs	r3, #1
 80090f4:	2118      	movs	r1, #24
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fb22 	bl	8008740 <lsm6dso_read_reg>
 80090fc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d111      	bne.n	8009128 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	09db      	lsrs	r3, r3, #7
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	7b3b      	ldrb	r3, [r7, #12]
 8009112:	f362 0341 	bfi	r3, r2, #1, #1
 8009116:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8009118:	f107 020c 	add.w	r2, r7, #12
 800911c:	2301      	movs	r3, #1
 800911e:	2118      	movs	r1, #24
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fb25 	bl	8008770 <lsm6dso_write_reg>
 8009126:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800912e:	f107 0210 	add.w	r2, r7, #16
 8009132:	2301      	movs	r3, #1
 8009134:	2162      	movs	r1, #98	; 0x62
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff fb02 	bl	8008740 <lsm6dso_read_reg>
 800913c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10f      	bne.n	8009164 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	b2da      	uxtb	r2, r3
 800914c:	7c3b      	ldrb	r3, [r7, #16]
 800914e:	f362 03c4 	bfi	r3, r2, #3, #2
 8009152:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8009154:	f107 0210 	add.w	r2, r7, #16
 8009158:	2301      	movs	r3, #1
 800915a:	2162      	movs	r1, #98	; 0x62
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fb07 	bl	8008770 <lsm6dso_write_reg>
 8009162:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8009164:	697b      	ldr	r3, [r7, #20]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800917a:	f107 0208 	add.w	r2, r7, #8
 800917e:	2301      	movs	r3, #1
 8009180:	210a      	movs	r1, #10
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fadc 	bl	8008740 <lsm6dso_read_reg>
 8009188:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10f      	bne.n	80091b0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	b2da      	uxtb	r2, r3
 8009198:	7a3b      	ldrb	r3, [r7, #8]
 800919a:	f362 0302 	bfi	r3, r2, #0, #3
 800919e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80091a0:	f107 0208 	add.w	r2, r7, #8
 80091a4:	2301      	movs	r3, #1
 80091a6:	210a      	movs	r1, #10
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff fae1 	bl	8008770 <lsm6dso_write_reg>
 80091ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80091b0:	68fb      	ldr	r3, [r7, #12]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80091c4:	2102      	movs	r1, #2
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff ff2e 	bl	8009028 <lsm6dso_mem_bank_set>
 80091cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80091d4:	2302      	movs	r3, #2
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	2146      	movs	r1, #70	; 0x46
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff fab0 	bl	8008740 <lsm6dso_read_reg>
 80091e0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d104      	bne.n	80091f2 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff ff1c 	bl	8009028 <lsm6dso_mem_bank_set>
 80091f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80091f2:	68fb      	ldr	r3, [r7, #12]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009206:	2102      	movs	r1, #2
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ff0d 	bl	8009028 <lsm6dso_mem_bank_set>
 800920e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d107      	bne.n	8009226 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8009216:	f107 0208 	add.w	r2, r7, #8
 800921a:	2301      	movs	r3, #1
 800921c:	215f      	movs	r1, #95	; 0x5f
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fa8e 	bl	8008740 <lsm6dso_read_reg>
 8009224:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d12a      	bne.n	8009282 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800922c:	7a3b      	ldrb	r3, [r7, #8]
 800922e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b03      	cmp	r3, #3
 8009236:	d81b      	bhi.n	8009270 <lsm6dso_fsm_data_rate_get+0x74>
 8009238:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <lsm6dso_fsm_data_rate_get+0x44>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	08009251 	.word	0x08009251
 8009244:	08009259 	.word	0x08009259
 8009248:	08009261 	.word	0x08009261
 800924c:	08009269 	.word	0x08009269
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
        break;
 8009256:	e00f      	b.n	8009278 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2201      	movs	r2, #1
 800925c:	701a      	strb	r2, [r3, #0]
        break;
 800925e:	e00b      	b.n	8009278 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2202      	movs	r2, #2
 8009264:	701a      	strb	r2, [r3, #0]
        break;
 8009266:	e007      	b.n	8009278 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2203      	movs	r2, #3
 800926c:	701a      	strb	r2, [r3, #0]
        break;
 800926e:	e003      	b.n	8009278 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
        break;
 8009276:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009278:	2100      	movs	r1, #0
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff fed4 	bl	8009028 <lsm6dso_mem_bank_set>
 8009280:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 800929c:	f04f 33ff 	mov.w	r3, #4294967295
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	e034      	b.n	800930e <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	7b1a      	ldrb	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	695a      	ldr	r2, [r3, #20]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	699a      	ldr	r2, [r3, #24]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a0e      	ldr	r2, [pc, #56]	; (8009318 <STTS751_RegisterBusIO+0x8c>)
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a0d      	ldr	r2, [pc, #52]	; (800931c <STTS751_RegisterBusIO+0x90>)
 80092e6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d004      	beq.n	8009308 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	e002      	b.n	800930e <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8009308:	f04f 33ff 	mov.w	r3, #4294967295
 800930c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800930e:	68fb      	ldr	r3, [r7, #12]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	080097a1 	.word	0x080097a1
 800931c:	0800980f 	.word	0x0800980f

08009320 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800932e:	2b00      	cmp	r3, #0
 8009330:	d127      	bne.n	8009382 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3320      	adds	r3, #32
 8009336:	2101      	movs	r1, #1
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fc4c 	bl	8009bd6 <stts751_pin_event_route_set>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	e020      	b.n	800938c <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3320      	adds	r3, #32
 8009356:	2103      	movs	r1, #3
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fbaf 	bl	8009abc <stts751_resolution_set>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8009364:	f04f 33ff 	mov.w	r3, #4294967295
 8009368:	e010      	b.n	800938c <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3320      	adds	r3, #32
 800936e:	2180      	movs	r1, #128	; 0x80
 8009370:	4618      	mov	r0, r3
 8009372:	f000 facd 	bl	8009910 <stts751_temp_data_rate_set>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 800937c:	f04f 33ff 	mov.w	r3, #4294967295
 8009380:	e004      	b.n	800938c <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d108      	bne.n	80093b8 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f870 	bl	800948c <STTS751_TEMP_Disable>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80093b2:	f04f 33ff 	mov.w	r3, #4294967295
 80093b6:	e004      	b.n	80093c2 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3320      	adds	r3, #32
 80093d8:	f107 020c 	add.w	r2, r7, #12
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fc1f 	bl	8009c22 <stts751_device_id_get>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	e003      	b.n	80093f8 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80093f0:	7b7a      	ldrb	r2, [r7, #13]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2200      	movs	r2, #0
 800940e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2200      	movs	r2, #0
 8009414:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2201      	movs	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2200      	movs	r2, #0
 8009420:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8009430:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	e012      	b.n	8009484 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009464:	eeb0 0a67 	vmov.f32	s0, s15
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8b5 	bl	80095d8 <STTS751_TEMP_SetOutputDataRate>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8009474:	f04f 33ff 	mov.w	r3, #4294967295
 8009478:	e004      	b.n	8009484 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	e01c      	b.n	80094dc <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3334      	adds	r3, #52	; 0x34
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f81b 	bl	80094e4 <STTS751_TEMP_GetOutputDataRate>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80094b4:	f04f 33ff 	mov.w	r3, #4294967295
 80094b8:	e010      	b.n	80094dc <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3320      	adds	r3, #32
 80094be:	2180      	movs	r1, #128	; 0x80
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fa25 	bl	8009910 <stts751_temp_data_rate_set>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80094cc:	f04f 33ff 	mov.w	r3, #4294967295
 80094d0:	e004      	b.n	80094dc <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3320      	adds	r3, #32
 80094f6:	f107 020b 	add.w	r2, r7, #11
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fa5d 	bl	80099bc <stts751_temp_data_rate_get>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8009508:	f04f 33ff 	mov.w	r3, #4294967295
 800950c:	e060      	b.n	80095d0 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	2b90      	cmp	r3, #144	; 0x90
 8009512:	d021      	beq.n	8009558 <STTS751_TEMP_GetOutputDataRate+0x74>
 8009514:	2b90      	cmp	r3, #144	; 0x90
 8009516:	dc56      	bgt.n	80095c6 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8009518:	2b09      	cmp	r3, #9
 800951a:	dc1b      	bgt.n	8009554 <STTS751_TEMP_GetOutputDataRate+0x70>
 800951c:	2b00      	cmp	r3, #0
 800951e:	db52      	blt.n	80095c6 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8009520:	2b09      	cmp	r3, #9
 8009522:	d850      	bhi.n	80095c6 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	08009563 	.word	0x08009563
 8009530:	0800956d 	.word	0x0800956d
 8009534:	08009577 	.word	0x08009577
 8009538:	08009581 	.word	0x08009581
 800953c:	0800958b 	.word	0x0800958b
 8009540:	08009595 	.word	0x08009595
 8009544:	0800959f 	.word	0x0800959f
 8009548:	080095a9 	.word	0x080095a9
 800954c:	080095b3 	.word	0x080095b3
 8009550:	080095bd 	.word	0x080095bd
 8009554:	2b80      	cmp	r3, #128	; 0x80
 8009556:	d136      	bne.n	80095c6 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
      break;
 8009560:	e035      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8009568:	601a      	str	r2, [r3, #0]
      break;
 800956a:	e030      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8009572:	601a      	str	r2, [r3, #0]
      break;
 8009574:	e02b      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800957c:	601a      	str	r2, [r3, #0]
      break;
 800957e:	e026      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8009586:	601a      	str	r2, [r3, #0]
      break;
 8009588:	e021      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009590:	601a      	str	r2, [r3, #0]
      break;
 8009592:	e01c      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800959a:	601a      	str	r2, [r3, #0]
      break;
 800959c:	e017      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80095a4:	601a      	str	r2, [r3, #0]
      break;
 80095a6:	e012      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80095ae:	601a      	str	r2, [r3, #0]
      break;
 80095b0:	e00d      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80095b8:	601a      	str	r2, [r3, #0]
      break;
 80095ba:	e008      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80095c2:	601a      	str	r2, [r3, #0]
      break;
 80095c4:	e003      	b.n	80095ce <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80095c6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ca:	60fb      	str	r3, [r7, #12]
      break;
 80095cc:	bf00      	nop
  }

  return ret;
 80095ce:	68fb      	ldr	r3, [r7, #12]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3320      	adds	r3, #32
 80095e8:	f107 020e 	add.w	r2, r7, #14
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fa8a 	bl	8009b08 <stts751_resolution_get>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	e0a5      	b.n	800974c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8009600:	edd7 7a00 	vldr	s15, [r7]
 8009604:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009608:	eef4 7a47 	vcmp.f32	s15, s14
 800960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009610:	d10e      	bne.n	8009630 <STTS751_TEMP_SetOutputDataRate+0x58>
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d10b      	bne.n	8009630 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3320      	adds	r3, #32
 800961c:	2101      	movs	r1, #1
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fa4c 	bl	8009abc <stts751_resolution_set>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 800962a:	f04f 33ff 	mov.w	r3, #4294967295
 800962e:	e08d      	b.n	800974c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8009630:	edd7 7a00 	vldr	s15, [r7]
 8009634:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009754 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8009638:	eef4 7a47 	vcmp.f32	s15, s14
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	d111      	bne.n	8009666 <STTS751_TEMP_SetOutputDataRate+0x8e>
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	2b03      	cmp	r3, #3
 8009646:	d002      	beq.n	800964e <STTS751_TEMP_SetOutputDataRate+0x76>
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d10b      	bne.n	8009666 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3320      	adds	r3, #32
 8009652:	2100      	movs	r1, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fa31 	bl	8009abc <stts751_resolution_set>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295
 8009664:	e072      	b.n	800974c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8009666:	edd7 7a00 	vldr	s15, [r7]
 800966a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8009758 <STTS751_TEMP_SetOutputDataRate+0x180>
 800966e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009676:	d801      	bhi.n	800967c <STTS751_TEMP_SetOutputDataRate+0xa4>
 8009678:	2300      	movs	r3, #0
 800967a:	e058      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 800967c:	edd7 7a00 	vldr	s15, [r7]
 8009680:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8009684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968c:	d801      	bhi.n	8009692 <STTS751_TEMP_SetOutputDataRate+0xba>
 800968e:	2301      	movs	r3, #1
 8009690:	e04d      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 8009692:	edd7 7a00 	vldr	s15, [r7]
 8009696:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800969a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a2:	d801      	bhi.n	80096a8 <STTS751_TEMP_SetOutputDataRate+0xd0>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e042      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 80096a8:	edd7 7a00 	vldr	s15, [r7]
 80096ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80096b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b8:	d801      	bhi.n	80096be <STTS751_TEMP_SetOutputDataRate+0xe6>
 80096ba:	2303      	movs	r3, #3
 80096bc:	e037      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 80096be:	edd7 7a00 	vldr	s15, [r7]
 80096c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	d801      	bhi.n	80096d4 <STTS751_TEMP_SetOutputDataRate+0xfc>
 80096d0:	2304      	movs	r3, #4
 80096d2:	e02c      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 80096d4:	edd7 7a00 	vldr	s15, [r7]
 80096d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e4:	d801      	bhi.n	80096ea <STTS751_TEMP_SetOutputDataRate+0x112>
 80096e6:	2305      	movs	r3, #5
 80096e8:	e021      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 80096ea:	edd7 7a00 	vldr	s15, [r7]
 80096ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80096f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	d801      	bhi.n	8009700 <STTS751_TEMP_SetOutputDataRate+0x128>
 80096fc:	2306      	movs	r3, #6
 80096fe:	e016      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 8009700:	edd7 7a00 	vldr	s15, [r7]
 8009704:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800970c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009710:	d801      	bhi.n	8009716 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8009712:	2307      	movs	r3, #7
 8009714:	e00b      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 8009716:	edd7 7a00 	vldr	s15, [r7]
 800971a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800971e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009726:	d801      	bhi.n	800972c <STTS751_TEMP_SetOutputDataRate+0x154>
 8009728:	2308      	movs	r3, #8
 800972a:	e000      	b.n	800972e <STTS751_TEMP_SetOutputDataRate+0x156>
 800972c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800972e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3320      	adds	r3, #32
 8009734:	7bfa      	ldrb	r2, [r7, #15]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f8e9 	bl	8009910 <stts751_temp_data_rate_set>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8009744:	f04f 33ff 	mov.w	r3, #4294967295
 8009748:	e000      	b.n	800974c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	42000000 	.word	0x42000000
 8009758:	3d800000 	.word	0x3d800000

0800975c <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3320      	adds	r3, #32
 800976a:	f107 020e 	add.w	r2, r7, #14
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fa01 	bl	8009b78 <stts751_temperature_raw_get>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800977c:	f04f 33ff 	mov.w	r3, #4294967295
 8009780:	e00a      	b.n	8009798 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8009782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f8a8 	bl	80098dc <stts751_from_lsb_to_celsius>
 800978c:	eef0 7a40 	vmov.f32	s15, s0
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b089      	sub	sp, #36	; 0x24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	461a      	mov	r2, r3
 80097ac:	460b      	mov	r3, r1
 80097ae:	72fb      	strb	r3, [r7, #11]
 80097b0:	4613      	mov	r3, r2
 80097b2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d11f      	bne.n	8009804 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80097c4:	2300      	movs	r3, #0
 80097c6:	83fb      	strh	r3, [r7, #30]
 80097c8:	e018      	b.n	80097fc <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	695c      	ldr	r4, [r3, #20]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	7b1b      	ldrb	r3, [r3, #12]
 80097d2:	b298      	uxth	r0, r3
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	8bfb      	ldrh	r3, [r7, #30]
 80097da:	4413      	add	r3, r2
 80097dc:	b299      	uxth	r1, r3
 80097de:	8bfb      	ldrh	r3, [r7, #30]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	441a      	add	r2, r3
 80097e4:	2301      	movs	r3, #1
 80097e6:	47a0      	blx	r4
 80097e8:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 80097f0:	f04f 33ff 	mov.w	r3, #4294967295
 80097f4:	e007      	b.n	8009806 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80097f6:	8bfb      	ldrh	r3, [r7, #30]
 80097f8:	3301      	adds	r3, #1
 80097fa:	83fb      	strh	r3, [r7, #30]
 80097fc:	8bfa      	ldrh	r2, [r7, #30]
 80097fe:	893b      	ldrh	r3, [r7, #8]
 8009800:	429a      	cmp	r2, r3
 8009802:	d3e2      	bcc.n	80097ca <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009804:	69bb      	ldr	r3, [r7, #24]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3724      	adds	r7, #36	; 0x24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd90      	pop	{r4, r7, pc}

0800980e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800980e:	b590      	push	{r4, r7, lr}
 8009810:	b089      	sub	sp, #36	; 0x24
 8009812:	af00      	add	r7, sp, #0
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	461a      	mov	r2, r3
 800981a:	460b      	mov	r3, r1
 800981c:	72fb      	strb	r3, [r7, #11]
 800981e:	4613      	mov	r3, r2
 8009820:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d11f      	bne.n	8009872 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009832:	2300      	movs	r3, #0
 8009834:	83fb      	strh	r3, [r7, #30]
 8009836:	e018      	b.n	800986a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	691c      	ldr	r4, [r3, #16]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	7b1b      	ldrb	r3, [r3, #12]
 8009840:	b298      	uxth	r0, r3
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	b29a      	uxth	r2, r3
 8009846:	8bfb      	ldrh	r3, [r7, #30]
 8009848:	4413      	add	r3, r2
 800984a:	b299      	uxth	r1, r3
 800984c:	8bfb      	ldrh	r3, [r7, #30]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	441a      	add	r2, r3
 8009852:	2301      	movs	r3, #1
 8009854:	47a0      	blx	r4
 8009856:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 800985e:	f04f 33ff 	mov.w	r3, #4294967295
 8009862:	e007      	b.n	8009874 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8009864:	8bfb      	ldrh	r3, [r7, #30]
 8009866:	3301      	adds	r3, #1
 8009868:	83fb      	strh	r3, [r7, #30]
 800986a:	8bfa      	ldrh	r2, [r7, #30]
 800986c:	893b      	ldrh	r3, [r7, #8]
 800986e:	429a      	cmp	r2, r3
 8009870:	d3e2      	bcc.n	8009838 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009872:	69bb      	ldr	r3, [r7, #24]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3724      	adds	r7, #36	; 0x24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd90      	pop	{r4, r7, pc}

0800987c <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	461a      	mov	r2, r3
 8009888:	460b      	mov	r3, r1
 800988a:	72fb      	strb	r3, [r7, #11]
 800988c:	4613      	mov	r3, r2
 800988e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685c      	ldr	r4, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68d8      	ldr	r0, [r3, #12]
 8009898:	893b      	ldrh	r3, [r7, #8]
 800989a:	7af9      	ldrb	r1, [r7, #11]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	47a0      	blx	r4
 80098a0:	6178      	str	r0, [r7, #20]

  return ret;
 80098a2:	697b      	ldr	r3, [r7, #20]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd90      	pop	{r4, r7, pc}

080098ac <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	607a      	str	r2, [r7, #4]
 80098b6:	461a      	mov	r2, r3
 80098b8:	460b      	mov	r3, r1
 80098ba:	72fb      	strb	r3, [r7, #11]
 80098bc:	4613      	mov	r3, r2
 80098be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681c      	ldr	r4, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68d8      	ldr	r0, [r3, #12]
 80098c8:	893b      	ldrh	r3, [r7, #8]
 80098ca:	7af9      	ldrb	r1, [r7, #11]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	47a0      	blx	r4
 80098d0:	6178      	str	r0, [r7, #20]

  return ret;
 80098d2:	697b      	ldr	r3, [r7, #20]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd90      	pop	{r4, r7, pc}

080098dc <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 80098e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098f2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800990c <stts751_from_lsb_to_celsius+0x30>
 80098f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80098fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80098fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	43800000 	.word	0x43800000

08009910 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800991c:	23aa      	movs	r3, #170	; 0xaa
 800991e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8009920:	f107 020c 	add.w	r2, r7, #12
 8009924:	2301      	movs	r3, #1
 8009926:	2104      	movs	r1, #4
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff ffa7 	bl	800987c <stts751_read_reg>
 800992e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10f      	bne.n	8009956 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	b2da      	uxtb	r2, r3
 800993e:	7b3b      	ldrb	r3, [r7, #12]
 8009940:	f362 0303 	bfi	r3, r2, #0, #4
 8009944:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8009946:	f107 020c 	add.w	r2, r7, #12
 800994a:	2301      	movs	r3, #1
 800994c:	2104      	movs	r1, #4
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff ffac 	bl	80098ac <stts751_write_reg>
 8009954:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800995c:	f107 0210 	add.w	r2, r7, #16
 8009960:	2301      	movs	r3, #1
 8009962:	2103      	movs	r1, #3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff ff89 	bl	800987c <stts751_read_reg>
 800996a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d111      	bne.n	8009996 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	09db      	lsrs	r3, r3, #7
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	7c3b      	ldrb	r3, [r7, #16]
 8009980:	f362 1386 	bfi	r3, r2, #6, #1
 8009984:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8009986:	f107 0210 	add.w	r2, r7, #16
 800998a:	2301      	movs	r3, #1
 800998c:	2103      	movs	r1, #3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff ff8c 	bl	80098ac <stts751_write_reg>
 8009994:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <stts751_temp_data_rate_set+0xa2>
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	2b90      	cmp	r3, #144	; 0x90
 80099a0:	d107      	bne.n	80099b2 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80099a2:	f107 020b 	add.w	r2, r7, #11
 80099a6:	2301      	movs	r3, #1
 80099a8:	210f      	movs	r1, #15
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff ff7e 	bl	80098ac <stts751_write_reg>
 80099b0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80099b2:	697b      	ldr	r3, [r7, #20]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3718      	adds	r7, #24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80099c6:	f107 0210 	add.w	r2, r7, #16
 80099ca:	2301      	movs	r3, #1
 80099cc:	2104      	movs	r1, #4
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff ff54 	bl	800987c <stts751_read_reg>
 80099d4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d107      	bne.n	80099ec <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80099dc:	f107 020c 	add.w	r2, r7, #12
 80099e0:	2301      	movs	r3, #1
 80099e2:	2103      	movs	r1, #3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff ff49 	bl	800987c <stts751_read_reg>
 80099ea:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 80099ec:	7b3b      	ldrb	r3, [r7, #12]
 80099ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	01db      	lsls	r3, r3, #7
 80099f6:	7c3a      	ldrb	r2, [r7, #16]
 80099f8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	4413      	add	r3, r2
 8009a00:	2b90      	cmp	r3, #144	; 0x90
 8009a02:	d025      	beq.n	8009a50 <stts751_temp_data_rate_get+0x94>
 8009a04:	2b90      	cmp	r3, #144	; 0x90
 8009a06:	dc4f      	bgt.n	8009aa8 <stts751_temp_data_rate_get+0xec>
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	dc1b      	bgt.n	8009a44 <stts751_temp_data_rate_get+0x88>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	db4b      	blt.n	8009aa8 <stts751_temp_data_rate_get+0xec>
 8009a10:	2b09      	cmp	r3, #9
 8009a12:	d849      	bhi.n	8009aa8 <stts751_temp_data_rate_get+0xec>
 8009a14:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <stts751_temp_data_rate_get+0x60>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a59 	.word	0x08009a59
 8009a20:	08009a61 	.word	0x08009a61
 8009a24:	08009a69 	.word	0x08009a69
 8009a28:	08009a71 	.word	0x08009a71
 8009a2c:	08009a79 	.word	0x08009a79
 8009a30:	08009a81 	.word	0x08009a81
 8009a34:	08009a89 	.word	0x08009a89
 8009a38:	08009a91 	.word	0x08009a91
 8009a3c:	08009a99 	.word	0x08009a99
 8009a40:	08009aa1 	.word	0x08009aa1
 8009a44:	2b80      	cmp	r3, #128	; 0x80
 8009a46:	d12f      	bne.n	8009aa8 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2280      	movs	r2, #128	; 0x80
 8009a4c:	701a      	strb	r2, [r3, #0]
      break;
 8009a4e:	e02f      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2290      	movs	r2, #144	; 0x90
 8009a54:	701a      	strb	r2, [r3, #0]
      break;
 8009a56:	e02b      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
      break;
 8009a5e:	e027      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2201      	movs	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
      break;
 8009a66:	e023      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	701a      	strb	r2, [r3, #0]
      break;
 8009a6e:	e01f      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2203      	movs	r2, #3
 8009a74:	701a      	strb	r2, [r3, #0]
      break;
 8009a76:	e01b      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	701a      	strb	r2, [r3, #0]
      break;
 8009a7e:	e017      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2205      	movs	r2, #5
 8009a84:	701a      	strb	r2, [r3, #0]
      break;
 8009a86:	e013      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2206      	movs	r2, #6
 8009a8c:	701a      	strb	r2, [r3, #0]
      break;
 8009a8e:	e00f      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2207      	movs	r2, #7
 8009a94:	701a      	strb	r2, [r3, #0]
      break;
 8009a96:	e00b      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2208      	movs	r2, #8
 8009a9c:	701a      	strb	r2, [r3, #0]
      break;
 8009a9e:	e007      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2209      	movs	r2, #9
 8009aa4:	701a      	strb	r2, [r3, #0]
      break;
 8009aa6:	e003      	b.n	8009ab0 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	701a      	strb	r2, [r3, #0]
      break;
 8009aae:	bf00      	nop
  }

  return ret;
 8009ab0:	697b      	ldr	r3, [r7, #20]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop

08009abc <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009ac8:	f107 0208 	add.w	r2, r7, #8
 8009acc:	2301      	movs	r3, #1
 8009ace:	2103      	movs	r1, #3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff fed3 	bl	800987c <stts751_read_reg>
 8009ad6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10f      	bne.n	8009afe <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	7a3b      	ldrb	r3, [r7, #8]
 8009ae8:	f362 0383 	bfi	r3, r2, #2, #2
 8009aec:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009aee:	f107 0208 	add.w	r2, r7, #8
 8009af2:	2301      	movs	r3, #1
 8009af4:	2103      	movs	r1, #3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fed8 	bl	80098ac <stts751_write_reg>
 8009afc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009afe:	68fb      	ldr	r3, [r7, #12]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009b12:	f107 0208 	add.w	r2, r7, #8
 8009b16:	2301      	movs	r3, #1
 8009b18:	2103      	movs	r1, #3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff feae 	bl	800987c <stts751_read_reg>
 8009b20:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8009b22:	7a3b      	ldrb	r3, [r7, #8]
 8009b24:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d81a      	bhi.n	8009b64 <stts751_resolution_get+0x5c>
 8009b2e:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <stts751_resolution_get+0x2c>)
 8009b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b34:	08009b4d 	.word	0x08009b4d
 8009b38:	08009b55 	.word	0x08009b55
 8009b3c:	08009b45 	.word	0x08009b45
 8009b40:	08009b5d 	.word	0x08009b5d
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2202      	movs	r2, #2
 8009b48:	701a      	strb	r2, [r3, #0]
      break;
 8009b4a:	e00f      	b.n	8009b6c <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
      break;
 8009b52:	e00b      	b.n	8009b6c <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2201      	movs	r2, #1
 8009b58:	701a      	strb	r2, [r3, #0]
      break;
 8009b5a:	e007      	b.n	8009b6c <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2203      	movs	r2, #3
 8009b60:	701a      	strb	r2, [r3, #0]
      break;
 8009b62:	e003      	b.n	8009b6c <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2202      	movs	r2, #2
 8009b68:	701a      	strb	r2, [r3, #0]
      break;
 8009b6a:	bf00      	nop
  }

  return ret;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	2301      	movs	r3, #1
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fe75 	bl	800987c <stts751_read_reg>
 8009b92:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d118      	bne.n	8009bcc <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8009b9a:	f107 0208 	add.w	r2, r7, #8
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	2102      	movs	r1, #2
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff fe6a 	bl	800987c <stts751_read_reg>
 8009ba8:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8009baa:	7a7b      	ldrb	r3, [r7, #9]
 8009bac:	b21a      	sxth	r2, r3
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	021b      	lsls	r3, r3, #8
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	7a3b      	ldrb	r3, [r7, #8]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4413      	add	r3, r2
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	b21a      	sxth	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009be2:	f107 0208 	add.w	r2, r7, #8
 8009be6:	2301      	movs	r3, #1
 8009be8:	2103      	movs	r1, #3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff fe46 	bl	800987c <stts751_read_reg>
 8009bf0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10f      	bne.n	8009c18 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	7a3b      	ldrb	r3, [r7, #8]
 8009c02:	f362 13c7 	bfi	r3, r2, #7, #1
 8009c06:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009c08:	f107 0208 	add.w	r2, r7, #8
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	2103      	movs	r1, #3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fe4b 	bl	80098ac <stts751_write_reg>
 8009c16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c18:	68fb      	ldr	r3, [r7, #12]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	2301      	movs	r3, #1
 8009c30:	21fd      	movs	r1, #253	; 0xfd
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff fe22 	bl	800987c <stts751_read_reg>
 8009c38:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d107      	bne.n	8009c50 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	2301      	movs	r3, #1
 8009c46:	21fe      	movs	r1, #254	; 0xfe
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff fe17 	bl	800987c <stts751_read_reg>
 8009c4e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d107      	bne.n	8009c66 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	1c9a      	adds	r2, r3, #2
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	21ff      	movs	r1, #255	; 0xff
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fe0c 	bl	800987c <stts751_read_reg>
 8009c64:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8009c66:	68fb      	ldr	r3, [r7, #12]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d06e      	beq.n	8009d6a <IKS01A3_ENV_SENSOR_Init+0xfa>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	f200 809d 	bhi.w	8009dce <IKS01A3_ENV_SENSOR_Init+0x15e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <IKS01A3_ENV_SENSOR_Init+0x32>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d032      	beq.n	8009d06 <IKS01A3_ENV_SENSOR_Init+0x96>
 8009ca0:	e095      	b.n	8009dce <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8009ca2:	6838      	ldr	r0, [r7, #0]
 8009ca4:	f000 f924 	bl	8009ef0 <HTS221_0_Probe>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009cae:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb2:	e0cc      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009cb4:	4a68      	ldr	r2, [pc, #416]	; (8009e58 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4967      	ldr	r1, [pc, #412]	; (8009e5c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009cc6:	f107 0108 	add.w	r1, r7, #8
 8009cca:	4610      	mov	r0, r2
 8009ccc:	4798      	blx	r3
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009cd4:	f06f 0306 	mvn.w	r3, #6
 8009cd8:	e0b9      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009cda:	7a3b      	ldrb	r3, [r7, #8]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d103      	bne.n	8009ce8 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	f043 0301 	orr.w	r3, r3, #1
 8009ce6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009ce8:	7abb      	ldrb	r3, [r7, #10]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d103      	bne.n	8009cf6 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	f043 0304 	orr.w	r3, r3, #4
 8009cf4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009cf6:	7a7b      	ldrb	r3, [r7, #9]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d16c      	bne.n	8009dd6 <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009d04:	e067      	b.n	8009dd6 <IKS01A3_ENV_SENSOR_Init+0x166>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009d06:	6838      	ldr	r0, [r7, #0]
 8009d08:	f000 f9ac 	bl	800a064 <LPS22HH_0_Probe>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009d12:	f04f 33ff 	mov.w	r3, #4294967295
 8009d16:	e09a      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009d18:	4a4f      	ldr	r2, [pc, #316]	; (8009e58 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	494e      	ldr	r1, [pc, #312]	; (8009e5c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009d2a:	f107 0108 	add.w	r1, r7, #8
 8009d2e:	4610      	mov	r0, r2
 8009d30:	4798      	blx	r3
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009d38:	f06f 0306 	mvn.w	r3, #6
 8009d3c:	e087      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009d3e:	7a3b      	ldrb	r3, [r7, #8]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d103      	bne.n	8009d4c <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009d4c:	7abb      	ldrb	r3, [r7, #10]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d103      	bne.n	8009d5a <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	f043 0304 	orr.w	r3, r3, #4
 8009d58:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009d5a:	7a7b      	ldrb	r3, [r7, #9]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d13c      	bne.n	8009dda <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	f043 0302 	orr.w	r3, r3, #2
 8009d66:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009d68:	e037      	b.n	8009dda <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8009d6a:	6838      	ldr	r0, [r7, #0]
 8009d6c:	f000 fa36 	bl	800a1dc <STTS751_0_Probe>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009d76:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7a:	e068      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009d7c:	4a36      	ldr	r2, [pc, #216]	; (8009e58 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4935      	ldr	r1, [pc, #212]	; (8009e5c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009d8e:	f107 0108 	add.w	r1, r7, #8
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009d9c:	f06f 0306 	mvn.w	r3, #6
 8009da0:	e055      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8009da2:	7a3b      	ldrb	r3, [r7, #8]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d103      	bne.n	8009db0 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8009db0:	7abb      	ldrb	r3, [r7, #10]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d103      	bne.n	8009dbe <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	f043 0304 	orr.w	r3, r3, #4
 8009dbc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8009dbe:	7a7b      	ldrb	r3, [r7, #9]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d10c      	bne.n	8009dde <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	f043 0302 	orr.w	r3, r3, #2
 8009dca:	61bb      	str	r3, [r7, #24]
      }
      break;
 8009dcc:	e007      	b.n	8009dde <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009dce:	f06f 0301 	mvn.w	r3, #1
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dd4:	e004      	b.n	8009de0 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8009dd6:	bf00      	nop
 8009dd8:	e002      	b.n	8009de0 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8009dda:	bf00      	nop
 8009ddc:	e000      	b.n	8009de0 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8009dde:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	e031      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009dea:	2300      	movs	r3, #0
 8009dec:	61fb      	str	r3, [r7, #28]
 8009dee:	e02a      	b.n	8009e46 <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	4013      	ands	r3, r2
 8009df6:	6a3a      	ldr	r2, [r7, #32]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d11e      	bne.n	8009e3a <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	4013      	ands	r3, r2
 8009e02:	6a3a      	ldr	r2, [r7, #32]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d118      	bne.n	8009e3a <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009e08:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e10:	4814      	ldr	r0, [pc, #80]	; (8009e64 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	4413      	add	r3, r2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	490e      	ldr	r1, [pc, #56]	; (8009e5c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4798      	blx	r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009e34:	f06f 0304 	mvn.w	r3, #4
 8009e38:	e009      	b.n	8009e4e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	3301      	adds	r3, #1
 8009e44:	61fb      	str	r3, [r7, #28]
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d9d1      	bls.n	8009df0 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3728      	adds	r7, #40	; 0x28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20000fcc 	.word	0x20000fcc
 8009e5c:	20000f9c 	.word	0x20000f9c
 8009e60:	20000160 	.word	0x20000160
 8009e64:	20000fa8 	.word	0x20000fa8

08009e68 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d903      	bls.n	8009e82 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009e7a:	f06f 0301 	mvn.w	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	e029      	b.n	8009ed6 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009e82:	4a17      	ldr	r2, [pc, #92]	; (8009ee0 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d11d      	bne.n	8009ed0 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8009e94:	4a13      	ldr	r2, [pc, #76]	; (8009ee4 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e9c:	4812      	ldr	r0, [pc, #72]	; (8009ee8 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	4413      	add	r3, r2
 8009ea6:	440b      	add	r3, r1
 8009ea8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	490f      	ldr	r1, [pc, #60]	; (8009eec <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ec2:	f06f 0304 	mvn.w	r3, #4
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	e005      	b.n	8009ed6 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e002      	b.n	8009ed6 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009ed0:	f06f 0301 	mvn.w	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009ed6:	697b      	ldr	r3, [r7, #20]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000fd8 	.word	0x20000fd8
 8009ee4:	20000160 	.word	0x20000160
 8009ee8:	20000fa8 	.word	0x20000fa8
 8009eec:	20000f9c 	.word	0x20000f9c

08009ef0 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b090      	sub	sp, #64	; 0x40
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8009efc:	2300      	movs	r3, #0
 8009efe:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8009f00:	23bf      	movs	r3, #191	; 0xbf
 8009f02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009f06:	4b49      	ldr	r3, [pc, #292]	; (800a02c <HTS221_0_Probe+0x13c>)
 8009f08:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009f0a:	4b49      	ldr	r3, [pc, #292]	; (800a030 <HTS221_0_Probe+0x140>)
 8009f0c:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009f0e:	4b49      	ldr	r3, [pc, #292]	; (800a034 <HTS221_0_Probe+0x144>)
 8009f10:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009f12:	4b49      	ldr	r3, [pc, #292]	; (800a038 <HTS221_0_Probe+0x148>)
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009f16:	4b49      	ldr	r3, [pc, #292]	; (800a03c <HTS221_0_Probe+0x14c>)
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8009f1a:	f107 031c 	add.w	r3, r7, #28
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4847      	ldr	r0, [pc, #284]	; (800a040 <HTS221_0_Probe+0x150>)
 8009f22:	f7f9 f9fd 	bl	8003320 <HTS221_RegisterBusIO>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009f2c:	f06f 0306 	mvn.w	r3, #6
 8009f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f32:	e076      	b.n	800a022 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8009f34:	f107 031b 	add.w	r3, r7, #27
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4841      	ldr	r0, [pc, #260]	; (800a040 <HTS221_0_Probe+0x150>)
 8009f3c:	f7f9 fa79 	bl	8003432 <HTS221_ReadID>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009f46:	f06f 0306 	mvn.w	r3, #6
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f4c:	e069      	b.n	800a022 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8009f4e:	7efb      	ldrb	r3, [r7, #27]
 8009f50:	2bbc      	cmp	r3, #188	; 0xbc
 8009f52:	d003      	beq.n	8009f5c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009f54:	f06f 0306 	mvn.w	r3, #6
 8009f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f5a:	e062      	b.n	800a022 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8009f5c:	f107 0308 	add.w	r3, r7, #8
 8009f60:	4619      	mov	r1, r3
 8009f62:	4837      	ldr	r0, [pc, #220]	; (800a040 <HTS221_0_Probe+0x150>)
 8009f64:	f7f9 fa7c 	bl	8003460 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009f68:	7a3b      	ldrb	r3, [r7, #8]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	7a7b      	ldrb	r3, [r7, #9]
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8009f72:	7abb      	ldrb	r3, [r7, #10]
 8009f74:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009f76:	4313      	orrs	r3, r2
 8009f78:	4a32      	ldr	r2, [pc, #200]	; (800a044 <HTS221_0_Probe+0x154>)
 8009f7a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8009f7c:	4b32      	ldr	r3, [pc, #200]	; (800a048 <HTS221_0_Probe+0x158>)
 8009f7e:	4a30      	ldr	r2, [pc, #192]	; (800a040 <HTS221_0_Probe+0x150>)
 8009f80:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8009f82:	4b32      	ldr	r3, [pc, #200]	; (800a04c <HTS221_0_Probe+0x15c>)
 8009f84:	4a32      	ldr	r2, [pc, #200]	; (800a050 <HTS221_0_Probe+0x160>)
 8009f86:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d11d      	bne.n	8009fca <HTS221_0_Probe+0xda>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d018      	beq.n	8009fca <HTS221_0_Probe+0xda>
 8009f98:	7a3b      	ldrb	r3, [r7, #8]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d115      	bne.n	8009fca <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8009f9e:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <HTS221_0_Probe+0x164>)
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	4a2d      	ldr	r2, [pc, #180]	; (800a058 <HTS221_0_Probe+0x168>)
 8009fa4:	492d      	ldr	r1, [pc, #180]	; (800a05c <HTS221_0_Probe+0x16c>)
 8009fa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009faa:	4b28      	ldr	r3, [pc, #160]	; (800a04c <HTS221_0_Probe+0x15c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a25      	ldr	r2, [pc, #148]	; (800a048 <HTS221_0_Probe+0x158>)
 8009fb2:	6812      	ldr	r2, [r2, #0]
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fbe:	f06f 0304 	mvn.w	r3, #4
 8009fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc4:	e001      	b.n	8009fca <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8009fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d11d      	bne.n	800a00c <HTS221_0_Probe+0x11c>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d018      	beq.n	800a00c <HTS221_0_Probe+0x11c>
 8009fda:	7abb      	ldrb	r3, [r7, #10]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d115      	bne.n	800a00c <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009fe0:	4b1c      	ldr	r3, [pc, #112]	; (800a054 <HTS221_0_Probe+0x164>)
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	4a1c      	ldr	r2, [pc, #112]	; (800a058 <HTS221_0_Probe+0x168>)
 8009fe6:	491e      	ldr	r1, [pc, #120]	; (800a060 <HTS221_0_Probe+0x170>)
 8009fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009fec:	4b17      	ldr	r3, [pc, #92]	; (800a04c <HTS221_0_Probe+0x15c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <HTS221_0_Probe+0x158>)
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4798      	blx	r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a000:	f06f 0304 	mvn.w	r3, #4
 800a004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a006:	e001      	b.n	800a00c <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a008:	2300      	movs	r3, #0
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d107      	bne.n	800a022 <HTS221_0_Probe+0x132>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a01c:	f06f 0304 	mvn.w	r3, #4
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800a022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a024:	4618      	mov	r0, r3
 800a026:	3740      	adds	r7, #64	; 0x40
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	08002dd1 	.word	0x08002dd1
 800a030:	08002e4d 	.word	0x08002e4d
 800a034:	08002f01 	.word	0x08002f01
 800a038:	08002e9d 	.word	0x08002e9d
 800a03c:	08002f65 	.word	0x08002f65
 800a040:	20000fe4 	.word	0x20000fe4
 800a044:	20000fd8 	.word	0x20000fd8
 800a048:	20000f9c 	.word	0x20000f9c
 800a04c:	20000fcc 	.word	0x20000fcc
 800a050:	2000000c 	.word	0x2000000c
 800a054:	20000160 	.word	0x20000160
 800a058:	20000fa8 	.word	0x20000fa8
 800a05c:	20000030 	.word	0x20000030
 800a060:	2000001c 	.word	0x2000001c

0800a064 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b090      	sub	sp, #64	; 0x40
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800a070:	2300      	movs	r3, #0
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800a074:	23bb      	movs	r3, #187	; 0xbb
 800a076:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a07a:	4b4a      	ldr	r3, [pc, #296]	; (800a1a4 <LPS22HH_0_Probe+0x140>)
 800a07c:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a07e:	4b4a      	ldr	r3, [pc, #296]	; (800a1a8 <LPS22HH_0_Probe+0x144>)
 800a080:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a082:	4b4a      	ldr	r3, [pc, #296]	; (800a1ac <LPS22HH_0_Probe+0x148>)
 800a084:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a086:	4b4a      	ldr	r3, [pc, #296]	; (800a1b0 <LPS22HH_0_Probe+0x14c>)
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a08a:	4b4a      	ldr	r3, [pc, #296]	; (800a1b4 <LPS22HH_0_Probe+0x150>)
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800a08e:	f107 031c 	add.w	r3, r7, #28
 800a092:	4619      	mov	r1, r3
 800a094:	4848      	ldr	r0, [pc, #288]	; (800a1b8 <LPS22HH_0_Probe+0x154>)
 800a096:	f7fc fabf 	bl	8006618 <LPS22HH_RegisterBusIO>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a0a0:	f06f 0306 	mvn.w	r3, #6
 800a0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a6:	e078      	b.n	800a19a <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800a0a8:	f107 031b 	add.w	r3, r7, #27
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4842      	ldr	r0, [pc, #264]	; (800a1b8 <LPS22HH_0_Probe+0x154>)
 800a0b0:	f7fc fb5b 	bl	800676a <LPS22HH_ReadID>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a0ba:	f06f 0306 	mvn.w	r3, #6
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0c0:	e06b      	b.n	800a19a <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 800a0c2:	7efb      	ldrb	r3, [r7, #27]
 800a0c4:	2bb3      	cmp	r3, #179	; 0xb3
 800a0c6:	d003      	beq.n	800a0d0 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a0c8:	f06f 0306 	mvn.w	r3, #6
 800a0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ce:	e064      	b.n	800a19a <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4838      	ldr	r0, [pc, #224]	; (800a1b8 <LPS22HH_0_Probe+0x154>)
 800a0d8:	f7fc fb5e 	bl	8006798 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a0dc:	7a3b      	ldrb	r3, [r7, #8]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	7a7b      	ldrb	r3, [r7, #9]
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800a0e6:	7abb      	ldrb	r3, [r7, #10]
 800a0e8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	4a33      	ldr	r2, [pc, #204]	; (800a1bc <LPS22HH_0_Probe+0x158>)
 800a0ee:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800a0f0:	4b33      	ldr	r3, [pc, #204]	; (800a1c0 <LPS22HH_0_Probe+0x15c>)
 800a0f2:	4a31      	ldr	r2, [pc, #196]	; (800a1b8 <LPS22HH_0_Probe+0x154>)
 800a0f4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800a0f6:	4b33      	ldr	r3, [pc, #204]	; (800a1c4 <LPS22HH_0_Probe+0x160>)
 800a0f8:	4a33      	ldr	r2, [pc, #204]	; (800a1c8 <LPS22HH_0_Probe+0x164>)
 800a0fa:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d11e      	bne.n	800a140 <LPS22HH_0_Probe+0xdc>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d019      	beq.n	800a140 <LPS22HH_0_Probe+0xdc>
 800a10c:	7a3b      	ldrb	r3, [r7, #8]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d116      	bne.n	800a140 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800a112:	4b2e      	ldr	r3, [pc, #184]	; (800a1cc <LPS22HH_0_Probe+0x168>)
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	4a2e      	ldr	r2, [pc, #184]	; (800a1d0 <LPS22HH_0_Probe+0x16c>)
 800a118:	3303      	adds	r3, #3
 800a11a:	492e      	ldr	r1, [pc, #184]	; (800a1d4 <LPS22HH_0_Probe+0x170>)
 800a11c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800a120:	4b28      	ldr	r3, [pc, #160]	; (800a1c4 <LPS22HH_0_Probe+0x160>)
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a26      	ldr	r2, [pc, #152]	; (800a1c0 <LPS22HH_0_Probe+0x15c>)
 800a128:	6852      	ldr	r2, [r2, #4]
 800a12a:	4610      	mov	r0, r2
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a134:	f06f 0304 	mvn.w	r3, #4
 800a138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a13a:	e001      	b.n	800a140 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800a140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d11e      	bne.n	800a184 <LPS22HH_0_Probe+0x120>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d019      	beq.n	800a184 <LPS22HH_0_Probe+0x120>
 800a150:	7a7b      	ldrb	r3, [r7, #9]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d116      	bne.n	800a184 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800a156:	4b1d      	ldr	r3, [pc, #116]	; (800a1cc <LPS22HH_0_Probe+0x168>)
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	4a1d      	ldr	r2, [pc, #116]	; (800a1d0 <LPS22HH_0_Probe+0x16c>)
 800a15c:	3303      	adds	r3, #3
 800a15e:	491e      	ldr	r1, [pc, #120]	; (800a1d8 <LPS22HH_0_Probe+0x174>)
 800a160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800a164:	4b17      	ldr	r3, [pc, #92]	; (800a1c4 <LPS22HH_0_Probe+0x160>)
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a15      	ldr	r2, [pc, #84]	; (800a1c0 <LPS22HH_0_Probe+0x15c>)
 800a16c:	6852      	ldr	r2, [r2, #4]
 800a16e:	4610      	mov	r0, r2
 800a170:	4798      	blx	r3
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d003      	beq.n	800a180 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a178:	f06f 0304 	mvn.w	r3, #4
 800a17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a17e:	e001      	b.n	800a184 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a180:	2300      	movs	r3, #0
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d107      	bne.n	800a19a <LPS22HH_0_Probe+0x136>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a194:	f06f 0304 	mvn.w	r3, #4
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800a19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3740      	adds	r7, #64	; 0x40
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	08002dd1 	.word	0x08002dd1
 800a1a8:	08002e4d 	.word	0x08002e4d
 800a1ac:	08002f01 	.word	0x08002f01
 800a1b0:	08002e9d 	.word	0x08002e9d
 800a1b4:	08002f65 	.word	0x08002f65
 800a1b8:	20001018 	.word	0x20001018
 800a1bc:	20000fd8 	.word	0x20000fd8
 800a1c0:	20000f9c 	.word	0x20000f9c
 800a1c4:	20000fcc 	.word	0x20000fcc
 800a1c8:	200000ac 	.word	0x200000ac
 800a1cc:	20000160 	.word	0x20000160
 800a1d0:	20000fa8 	.word	0x20000fa8
 800a1d4:	200000d0 	.word	0x200000d0
 800a1d8:	200000bc 	.word	0x200000bc

0800a1dc <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b090      	sub	sp, #64	; 0x40
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800a1ec:	2395      	movs	r3, #149	; 0x95
 800a1ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a1f2:	4b3f      	ldr	r3, [pc, #252]	; (800a2f0 <STTS751_0_Probe+0x114>)
 800a1f4:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a1f6:	4b3f      	ldr	r3, [pc, #252]	; (800a2f4 <STTS751_0_Probe+0x118>)
 800a1f8:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a1fa:	4b3f      	ldr	r3, [pc, #252]	; (800a2f8 <STTS751_0_Probe+0x11c>)
 800a1fc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a1fe:	4b3f      	ldr	r3, [pc, #252]	; (800a2fc <STTS751_0_Probe+0x120>)
 800a200:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a202:	4b3f      	ldr	r3, [pc, #252]	; (800a300 <STTS751_0_Probe+0x124>)
 800a204:	637b      	str	r3, [r7, #52]	; 0x34

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800a206:	f107 031c 	add.w	r3, r7, #28
 800a20a:	4619      	mov	r1, r3
 800a20c:	483d      	ldr	r0, [pc, #244]	; (800a304 <STTS751_0_Probe+0x128>)
 800a20e:	f7ff f83d 	bl	800928c <STTS751_RegisterBusIO>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a218:	f06f 0306 	mvn.w	r3, #6
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a21e:	e061      	b.n	800a2e4 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800a220:	f107 031b 	add.w	r3, r7, #27
 800a224:	4619      	mov	r1, r3
 800a226:	4837      	ldr	r0, [pc, #220]	; (800a304 <STTS751_0_Probe+0x128>)
 800a228:	f7ff f8cf 	bl	80093ca <STTS751_ReadID>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a232:	f06f 0306 	mvn.w	r3, #6
 800a236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a238:	e054      	b.n	800a2e4 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 800a23a:	7efb      	ldrb	r3, [r7, #27]
 800a23c:	2b53      	cmp	r3, #83	; 0x53
 800a23e:	d003      	beq.n	800a248 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a240:	f06f 0306 	mvn.w	r3, #6
 800a244:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a246:	e04d      	b.n	800a2e4 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800a248:	f107 0308 	add.w	r3, r7, #8
 800a24c:	4619      	mov	r1, r3
 800a24e:	482d      	ldr	r0, [pc, #180]	; (800a304 <STTS751_0_Probe+0x128>)
 800a250:	f7ff f8d6 	bl	8009400 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a254:	7a3b      	ldrb	r3, [r7, #8]
 800a256:	461a      	mov	r2, r3
 800a258:	7a7b      	ldrb	r3, [r7, #9]
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800a25e:	7abb      	ldrb	r3, [r7, #10]
 800a260:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a262:	4313      	orrs	r3, r2
 800a264:	4a28      	ldr	r2, [pc, #160]	; (800a308 <STTS751_0_Probe+0x12c>)
 800a266:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800a268:	4b28      	ldr	r3, [pc, #160]	; (800a30c <STTS751_0_Probe+0x130>)
 800a26a:	4a26      	ldr	r2, [pc, #152]	; (800a304 <STTS751_0_Probe+0x128>)
 800a26c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800a26e:	4b28      	ldr	r3, [pc, #160]	; (800a310 <STTS751_0_Probe+0x134>)
 800a270:	4a28      	ldr	r2, [pc, #160]	; (800a314 <STTS751_0_Probe+0x138>)
 800a272:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d11e      	bne.n	800a2b8 <STTS751_0_Probe+0xdc>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d019      	beq.n	800a2b8 <STTS751_0_Probe+0xdc>
 800a284:	7a3b      	ldrb	r3, [r7, #8]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d116      	bne.n	800a2b8 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800a28a:	4b23      	ldr	r3, [pc, #140]	; (800a318 <STTS751_0_Probe+0x13c>)
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	4a23      	ldr	r2, [pc, #140]	; (800a31c <STTS751_0_Probe+0x140>)
 800a290:	3306      	adds	r3, #6
 800a292:	4923      	ldr	r1, [pc, #140]	; (800a320 <STTS751_0_Probe+0x144>)
 800a294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800a298:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <STTS751_0_Probe+0x134>)
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <STTS751_0_Probe+0x130>)
 800a2a0:	6892      	ldr	r2, [r2, #8]
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	4798      	blx	r3
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2ac:	f06f 0304 	mvn.w	r3, #4
 800a2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2b2:	e001      	b.n	800a2b8 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d107      	bne.n	800a2ce <STTS751_0_Probe+0xf2>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f003 0304 	and.w	r3, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2c8:	f06f 0304 	mvn.w	r3, #4
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d107      	bne.n	800a2e4 <STTS751_0_Probe+0x108>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2de:	f06f 0304 	mvn.w	r3, #4
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3740      	adds	r7, #64	; 0x40
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	08002dd1 	.word	0x08002dd1
 800a2f4:	08002e4d 	.word	0x08002e4d
 800a2f8:	08002f01 	.word	0x08002f01
 800a2fc:	08002e9d 	.word	0x08002e9d
 800a300:	08002f65 	.word	0x08002f65
 800a304:	2000104c 	.word	0x2000104c
 800a308:	20000fd8 	.word	0x20000fd8
 800a30c:	20000f9c 	.word	0x20000f9c
 800a310:	20000fcc 	.word	0x20000fcc
 800a314:	2000013c 	.word	0x2000013c
 800a318:	20000160 	.word	0x20000160
 800a31c:	20000fa8 	.word	0x20000fa8
 800a320:	2000014c 	.word	0x2000014c

0800a324 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a32e:	2300      	movs	r3, #0
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800a332:	2301      	movs	r3, #1
 800a334:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d06e      	beq.n	800a41e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b02      	cmp	r3, #2
 800a344:	f200 809d 	bhi.w	800a482 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d032      	beq.n	800a3ba <IKS01A3_MOTION_SENSOR_Init+0x96>
 800a354:	e095      	b.n	800a482 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800a356:	6838      	ldr	r0, [r7, #0]
 800a358:	f000 f924 	bl	800a5a4 <LSM6DSO_0_Probe>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800a362:	f04f 33ff 	mov.w	r3, #4294967295
 800a366:	e0cc      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a368:	4a68      	ldr	r2, [pc, #416]	; (800a50c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	4967      	ldr	r1, [pc, #412]	; (800a510 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a37a:	f107 010c 	add.w	r1, r7, #12
 800a37e:	4610      	mov	r0, r2
 800a380:	4798      	blx	r3
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a388:	f06f 0306 	mvn.w	r3, #6
 800a38c:	e0b9      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800a38e:	7b3b      	ldrb	r3, [r7, #12]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d103      	bne.n	800a39c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	f043 0302 	orr.w	r3, r3, #2
 800a39a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a39c:	7b7b      	ldrb	r3, [r7, #13]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d103      	bne.n	800a3aa <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	f043 0301 	orr.w	r3, r3, #1
 800a3a8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d16c      	bne.n	800a48a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	f043 0304 	orr.w	r3, r3, #4
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a3b8:	e067      	b.n	800a48a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800a3ba:	6838      	ldr	r0, [r7, #0]
 800a3bc:	f000 f9b2 	bl	800a724 <LIS2DW12_0_Probe>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800a3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ca:	e09a      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a3cc:	4a4f      	ldr	r2, [pc, #316]	; (800a50c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	494e      	ldr	r1, [pc, #312]	; (800a510 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a3de:	f107 010c 	add.w	r1, r7, #12
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	4798      	blx	r3
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a3ec:	f06f 0306 	mvn.w	r3, #6
 800a3f0:	e087      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800a3f2:	7b3b      	ldrb	r3, [r7, #12]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d103      	bne.n	800a400 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	f043 0302 	orr.w	r3, r3, #2
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a400:	7b7b      	ldrb	r3, [r7, #13]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d103      	bne.n	800a40e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	f043 0301 	orr.w	r3, r3, #1
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d13c      	bne.n	800a48e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	f043 0304 	orr.w	r3, r3, #4
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a41c:	e037      	b.n	800a48e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800a41e:	6838      	ldr	r0, [r7, #0]
 800a420:	f000 fa28 	bl	800a874 <LIS2MDL_0_Probe>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800a42a:	f04f 33ff 	mov.w	r3, #4294967295
 800a42e:	e068      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a430:	4a36      	ldr	r2, [pc, #216]	; (800a50c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	4935      	ldr	r1, [pc, #212]	; (800a510 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a442:	f107 010c 	add.w	r1, r7, #12
 800a446:	4610      	mov	r0, r2
 800a448:	4798      	blx	r3
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a450:	f06f 0306 	mvn.w	r3, #6
 800a454:	e055      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800a456:	7b3b      	ldrb	r3, [r7, #12]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d103      	bne.n	800a464 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	f043 0302 	orr.w	r3, r3, #2
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a464:	7b7b      	ldrb	r3, [r7, #13]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d103      	bne.n	800a472 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d10c      	bne.n	800a492 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f043 0304 	orr.w	r3, r3, #4
 800a47e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a480:	e007      	b.n	800a492 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a482:	f06f 0301 	mvn.w	r3, #1
 800a486:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800a488:	e004      	b.n	800a494 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800a48a:	bf00      	nop
 800a48c:	e002      	b.n	800a494 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800a48e:	bf00      	nop
 800a490:	e000      	b.n	800a494 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800a492:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	e031      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4a2:	e02a      	b.n	800a4fa <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d11e      	bne.n	800a4ee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800a4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d118      	bne.n	800a4ee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a4bc:	4a15      	ldr	r2, [pc, #84]	; (800a514 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a4c4:	4814      	ldr	r0, [pc, #80]	; (800a518 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	4413      	add	r3, r2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	490e      	ldr	r1, [pc, #56]	; (800a510 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a4de:	4610      	mov	r0, r2
 800a4e0:	4798      	blx	r3
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a4e8:	f06f 0304 	mvn.w	r3, #4
 800a4ec:	e009      	b.n	800a502 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d9d1      	bls.n	800a4a4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800a500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a502:	4618      	mov	r0, r3
 800a504:	3738      	adds	r7, #56	; 0x38
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	200010b4 	.word	0x200010b4
 800a510:	20001084 	.word	0x20001084
 800a514:	20000174 	.word	0x20000174
 800a518:	20001090 	.word	0x20001090

0800a51c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d903      	bls.n	800a536 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a52e:	f06f 0301 	mvn.w	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	e029      	b.n	800a58a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a536:	4a17      	ldr	r2, [pc, #92]	; (800a594 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	4013      	ands	r3, r2
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	d11d      	bne.n	800a584 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800a548:	4a13      	ldr	r2, [pc, #76]	; (800a598 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a550:	4812      	ldr	r0, [pc, #72]	; (800a59c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	4613      	mov	r3, r2
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	4413      	add	r3, r2
 800a55a:	440b      	add	r3, r1
 800a55c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	490f      	ldr	r1, [pc, #60]	; (800a5a0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	4610      	mov	r0, r2
 800a56e:	4798      	blx	r3
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a576:	f06f 0304 	mvn.w	r3, #4
 800a57a:	617b      	str	r3, [r7, #20]
 800a57c:	e005      	b.n	800a58a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a57e:	2300      	movs	r3, #0
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	e002      	b.n	800a58a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a584:	f06f 0301 	mvn.w	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a58a:	697b      	ldr	r3, [r7, #20]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	200010c0 	.word	0x200010c0
 800a598:	20000174 	.word	0x20000174
 800a59c:	20001090 	.word	0x20001090
 800a5a0:	20001084 	.word	0x20001084

0800a5a4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b094      	sub	sp, #80	; 0x50
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800a5b4:	23d7      	movs	r3, #215	; 0xd7
 800a5b6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a5ba:	4b4b      	ldr	r3, [pc, #300]	; (800a6e8 <LSM6DSO_0_Probe+0x144>)
 800a5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a5be:	4b4b      	ldr	r3, [pc, #300]	; (800a6ec <LSM6DSO_0_Probe+0x148>)
 800a5c0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a5c2:	4b4b      	ldr	r3, [pc, #300]	; (800a6f0 <LSM6DSO_0_Probe+0x14c>)
 800a5c4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a5c6:	4b4b      	ldr	r3, [pc, #300]	; (800a6f4 <LSM6DSO_0_Probe+0x150>)
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a5ca:	4b4b      	ldr	r3, [pc, #300]	; (800a6f8 <LSM6DSO_0_Probe+0x154>)
 800a5cc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a5ce:	4b4b      	ldr	r3, [pc, #300]	; (800a6fc <LSM6DSO_0_Probe+0x158>)
 800a5d0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800a5d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4849      	ldr	r0, [pc, #292]	; (800a700 <LSM6DSO_0_Probe+0x15c>)
 800a5da:	f7fc fe77 	bl	80072cc <LSM6DSO_RegisterBusIO>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5e4:	f06f 0306 	mvn.w	r3, #6
 800a5e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ea:	e077      	b.n	800a6dc <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800a5ec:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4843      	ldr	r0, [pc, #268]	; (800a700 <LSM6DSO_0_Probe+0x15c>)
 800a5f4:	f7fc ff70 	bl	80074d8 <LSM6DSO_ReadID>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5fe:	f06f 0306 	mvn.w	r3, #6
 800a602:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a604:	e06a      	b.n	800a6dc <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800a606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a60a:	2b6c      	cmp	r3, #108	; 0x6c
 800a60c:	d003      	beq.n	800a616 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a60e:	f06f 0306 	mvn.w	r3, #6
 800a612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a614:	e062      	b.n	800a6dc <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800a616:	f107 030c 	add.w	r3, r7, #12
 800a61a:	4619      	mov	r1, r3
 800a61c:	4838      	ldr	r0, [pc, #224]	; (800a700 <LSM6DSO_0_Probe+0x15c>)
 800a61e:	f7fc ff71 	bl	8007504 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a622:	7b7b      	ldrb	r3, [r7, #13]
 800a624:	461a      	mov	r2, r3
 800a626:	7b3b      	ldrb	r3, [r7, #12]
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	431a      	orrs	r2, r3
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4313      	orrs	r3, r2
 800a632:	4a34      	ldr	r2, [pc, #208]	; (800a704 <LSM6DSO_0_Probe+0x160>)
 800a634:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800a636:	4b34      	ldr	r3, [pc, #208]	; (800a708 <LSM6DSO_0_Probe+0x164>)
 800a638:	4a31      	ldr	r2, [pc, #196]	; (800a700 <LSM6DSO_0_Probe+0x15c>)
 800a63a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800a63c:	4b33      	ldr	r3, [pc, #204]	; (800a70c <LSM6DSO_0_Probe+0x168>)
 800a63e:	4a34      	ldr	r2, [pc, #208]	; (800a710 <LSM6DSO_0_Probe+0x16c>)
 800a640:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d11d      	bne.n	800a684 <LSM6DSO_0_Probe+0xe0>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d018      	beq.n	800a684 <LSM6DSO_0_Probe+0xe0>
 800a652:	7b7b      	ldrb	r3, [r7, #13]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d115      	bne.n	800a684 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800a658:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <LSM6DSO_0_Probe+0x170>)
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	4a2e      	ldr	r2, [pc, #184]	; (800a718 <LSM6DSO_0_Probe+0x174>)
 800a65e:	492f      	ldr	r1, [pc, #188]	; (800a71c <LSM6DSO_0_Probe+0x178>)
 800a660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a664:	4b29      	ldr	r3, [pc, #164]	; (800a70c <LSM6DSO_0_Probe+0x168>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a27      	ldr	r2, [pc, #156]	; (800a708 <LSM6DSO_0_Probe+0x164>)
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	4610      	mov	r0, r2
 800a670:	4798      	blx	r3
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a678:	f06f 0304 	mvn.w	r3, #4
 800a67c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a67e:	e001      	b.n	800a684 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a680:	2300      	movs	r3, #0
 800a682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d11d      	bne.n	800a6c6 <LSM6DSO_0_Probe+0x122>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d018      	beq.n	800a6c6 <LSM6DSO_0_Probe+0x122>
 800a694:	7b3b      	ldrb	r3, [r7, #12]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d115      	bne.n	800a6c6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a69a:	4b1e      	ldr	r3, [pc, #120]	; (800a714 <LSM6DSO_0_Probe+0x170>)
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	4a1e      	ldr	r2, [pc, #120]	; (800a718 <LSM6DSO_0_Probe+0x174>)
 800a6a0:	491f      	ldr	r1, [pc, #124]	; (800a720 <LSM6DSO_0_Probe+0x17c>)
 800a6a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a6a6:	4b19      	ldr	r3, [pc, #100]	; (800a70c <LSM6DSO_0_Probe+0x168>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a16      	ldr	r2, [pc, #88]	; (800a708 <LSM6DSO_0_Probe+0x164>)
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a6ba:	f06f 0304 	mvn.w	r3, #4
 800a6be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6c0:	e001      	b.n	800a6c6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d107      	bne.n	800a6dc <LSM6DSO_0_Probe+0x138>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a6d6:	f06f 0304 	mvn.w	r3, #4
 800a6da:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3750      	adds	r7, #80	; 0x50
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	08002dd1 	.word	0x08002dd1
 800a6ec:	08002e4d 	.word	0x08002e4d
 800a6f0:	08002f01 	.word	0x08002f01
 800a6f4:	08002e9d 	.word	0x08002e9d
 800a6f8:	08002f65 	.word	0x08002f65
 800a6fc:	080017cd 	.word	0x080017cd
 800a700:	200010cc 	.word	0x200010cc
 800a704:	200010c0 	.word	0x200010c0
 800a708:	20001084 	.word	0x20001084
 800a70c:	200010b4 	.word	0x200010b4
 800a710:	200000e4 	.word	0x200000e4
 800a714:	20000174 	.word	0x20000174
 800a718:	20001090 	.word	0x20001090
 800a71c:	20000118 	.word	0x20000118
 800a720:	200000f4 	.word	0x200000f4

0800a724 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b094      	sub	sp, #80	; 0x50
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800a72c:	2300      	movs	r3, #0
 800a72e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800a730:	2300      	movs	r3, #0
 800a732:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800a734:	2333      	movs	r3, #51	; 0x33
 800a736:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a73a:	4b40      	ldr	r3, [pc, #256]	; (800a83c <LIS2DW12_0_Probe+0x118>)
 800a73c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a73e:	4b40      	ldr	r3, [pc, #256]	; (800a840 <LIS2DW12_0_Probe+0x11c>)
 800a740:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a742:	4b40      	ldr	r3, [pc, #256]	; (800a844 <LIS2DW12_0_Probe+0x120>)
 800a744:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a746:	4b40      	ldr	r3, [pc, #256]	; (800a848 <LIS2DW12_0_Probe+0x124>)
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a74a:	4b40      	ldr	r3, [pc, #256]	; (800a84c <LIS2DW12_0_Probe+0x128>)
 800a74c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a74e:	4b40      	ldr	r3, [pc, #256]	; (800a850 <LIS2DW12_0_Probe+0x12c>)
 800a750:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a756:	4619      	mov	r1, r3
 800a758:	483e      	ldr	r0, [pc, #248]	; (800a854 <LIS2DW12_0_Probe+0x130>)
 800a75a:	f7f9 fc03 	bl	8003f64 <LIS2DW12_RegisterBusIO>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a764:	f06f 0306 	mvn.w	r3, #6
 800a768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a76a:	e062      	b.n	800a832 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800a76c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a770:	4619      	mov	r1, r3
 800a772:	4838      	ldr	r0, [pc, #224]	; (800a854 <LIS2DW12_0_Probe+0x130>)
 800a774:	f7f9 fce4 	bl	8004140 <LIS2DW12_ReadID>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a77e:	f06f 0306 	mvn.w	r3, #6
 800a782:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a784:	e055      	b.n	800a832 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800a786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a78a:	2b44      	cmp	r3, #68	; 0x44
 800a78c:	d003      	beq.n	800a796 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a78e:	f06f 0306 	mvn.w	r3, #6
 800a792:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a794:	e04d      	b.n	800a832 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800a796:	f107 030c 	add.w	r3, r7, #12
 800a79a:	4619      	mov	r1, r3
 800a79c:	482d      	ldr	r0, [pc, #180]	; (800a854 <LIS2DW12_0_Probe+0x130>)
 800a79e:	f7f9 fce5 	bl	800416c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a7a2:	7b7b      	ldrb	r3, [r7, #13]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	7b3b      	ldrb	r3, [r7, #12]
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	4a29      	ldr	r2, [pc, #164]	; (800a858 <LIS2DW12_0_Probe+0x134>)
 800a7b4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800a7b6:	4b29      	ldr	r3, [pc, #164]	; (800a85c <LIS2DW12_0_Probe+0x138>)
 800a7b8:	4a26      	ldr	r2, [pc, #152]	; (800a854 <LIS2DW12_0_Probe+0x130>)
 800a7ba:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800a7bc:	4b28      	ldr	r3, [pc, #160]	; (800a860 <LIS2DW12_0_Probe+0x13c>)
 800a7be:	4a29      	ldr	r2, [pc, #164]	; (800a864 <LIS2DW12_0_Probe+0x140>)
 800a7c0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d11e      	bne.n	800a806 <LIS2DW12_0_Probe+0xe2>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d019      	beq.n	800a806 <LIS2DW12_0_Probe+0xe2>
 800a7d2:	7b3b      	ldrb	r3, [r7, #12]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d116      	bne.n	800a806 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a7d8:	4b23      	ldr	r3, [pc, #140]	; (800a868 <LIS2DW12_0_Probe+0x144>)
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	4a23      	ldr	r2, [pc, #140]	; (800a86c <LIS2DW12_0_Probe+0x148>)
 800a7de:	3303      	adds	r3, #3
 800a7e0:	4923      	ldr	r1, [pc, #140]	; (800a870 <LIS2DW12_0_Probe+0x14c>)
 800a7e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800a7e6:	4b1e      	ldr	r3, [pc, #120]	; (800a860 <LIS2DW12_0_Probe+0x13c>)
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a1b      	ldr	r2, [pc, #108]	; (800a85c <LIS2DW12_0_Probe+0x138>)
 800a7ee:	6852      	ldr	r2, [r2, #4]
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7fa:	f06f 0304 	mvn.w	r3, #4
 800a7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a800:	e001      	b.n	800a806 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a802:	2300      	movs	r3, #0
 800a804:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <LIS2DW12_0_Probe+0xf8>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a816:	f06f 0304 	mvn.w	r3, #4
 800a81a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d107      	bne.n	800a832 <LIS2DW12_0_Probe+0x10e>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a82c:	f06f 0304 	mvn.w	r3, #4
 800a830:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a834:	4618      	mov	r0, r3
 800a836:	3750      	adds	r7, #80	; 0x50
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	08002dd1 	.word	0x08002dd1
 800a840:	08002e4d 	.word	0x08002e4d
 800a844:	08002f01 	.word	0x08002f01
 800a848:	08002e9d 	.word	0x08002e9d
 800a84c:	08002f65 	.word	0x08002f65
 800a850:	080017cd 	.word	0x080017cd
 800a854:	20001104 	.word	0x20001104
 800a858:	200010c0 	.word	0x200010c0
 800a85c:	20001084 	.word	0x20001084
 800a860:	200010b4 	.word	0x200010b4
 800a864:	20000044 	.word	0x20000044
 800a868:	20000174 	.word	0x20000174
 800a86c:	20001090 	.word	0x20001090
 800a870:	20000054 	.word	0x20000054

0800a874 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b094      	sub	sp, #80	; 0x50
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800a880:	2300      	movs	r3, #0
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800a884:	233d      	movs	r3, #61	; 0x3d
 800a886:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a88a:	4b40      	ldr	r3, [pc, #256]	; (800a98c <LIS2MDL_0_Probe+0x118>)
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a88e:	4b40      	ldr	r3, [pc, #256]	; (800a990 <LIS2MDL_0_Probe+0x11c>)
 800a890:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a892:	4b40      	ldr	r3, [pc, #256]	; (800a994 <LIS2MDL_0_Probe+0x120>)
 800a894:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a896:	4b40      	ldr	r3, [pc, #256]	; (800a998 <LIS2MDL_0_Probe+0x124>)
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a89a:	4b40      	ldr	r3, [pc, #256]	; (800a99c <LIS2MDL_0_Probe+0x128>)
 800a89c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a89e:	4b40      	ldr	r3, [pc, #256]	; (800a9a0 <LIS2MDL_0_Probe+0x12c>)
 800a8a0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a8a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	483e      	ldr	r0, [pc, #248]	; (800a9a4 <LIS2MDL_0_Probe+0x130>)
 800a8aa:	f7fa feaf 	bl	800560c <LIS2MDL_RegisterBusIO>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d003      	beq.n	800a8bc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a8b4:	f06f 0306 	mvn.w	r3, #6
 800a8b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8ba:	e062      	b.n	800a982 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800a8bc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4838      	ldr	r0, [pc, #224]	; (800a9a4 <LIS2MDL_0_Probe+0x130>)
 800a8c4:	f7fa ffbe 	bl	8005844 <LIS2MDL_ReadID>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a8ce:	f06f 0306 	mvn.w	r3, #6
 800a8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8d4:	e055      	b.n	800a982 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800a8d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d003      	beq.n	800a8e6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a8de:	f06f 0306 	mvn.w	r3, #6
 800a8e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8e4:	e04d      	b.n	800a982 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800a8e6:	f107 030c 	add.w	r3, r7, #12
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	482d      	ldr	r0, [pc, #180]	; (800a9a4 <LIS2MDL_0_Probe+0x130>)
 800a8ee:	f7fa ffcf 	bl	8005890 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a8f2:	7b7b      	ldrb	r3, [r7, #13]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	7b3b      	ldrb	r3, [r7, #12]
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4313      	orrs	r3, r2
 800a902:	4a29      	ldr	r2, [pc, #164]	; (800a9a8 <LIS2MDL_0_Probe+0x134>)
 800a904:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800a906:	4b29      	ldr	r3, [pc, #164]	; (800a9ac <LIS2MDL_0_Probe+0x138>)
 800a908:	4a26      	ldr	r2, [pc, #152]	; (800a9a4 <LIS2MDL_0_Probe+0x130>)
 800a90a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800a90c:	4b28      	ldr	r3, [pc, #160]	; (800a9b0 <LIS2MDL_0_Probe+0x13c>)
 800a90e:	4a29      	ldr	r2, [pc, #164]	; (800a9b4 <LIS2MDL_0_Probe+0x140>)
 800a910:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d11e      	bne.n	800a956 <LIS2MDL_0_Probe+0xe2>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f003 0304 	and.w	r3, r3, #4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d019      	beq.n	800a956 <LIS2MDL_0_Probe+0xe2>
 800a922:	7bbb      	ldrb	r3, [r7, #14]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d116      	bne.n	800a956 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a928:	4b23      	ldr	r3, [pc, #140]	; (800a9b8 <LIS2MDL_0_Probe+0x144>)
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	4a23      	ldr	r2, [pc, #140]	; (800a9bc <LIS2MDL_0_Probe+0x148>)
 800a92e:	3306      	adds	r3, #6
 800a930:	4923      	ldr	r1, [pc, #140]	; (800a9c0 <LIS2MDL_0_Probe+0x14c>)
 800a932:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800a936:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <LIS2MDL_0_Probe+0x13c>)
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <LIS2MDL_0_Probe+0x138>)
 800a93e:	6892      	ldr	r2, [r2, #8]
 800a940:	4610      	mov	r0, r2
 800a942:	4798      	blx	r3
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a94a:	f06f 0304 	mvn.w	r3, #4
 800a94e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a950:	e001      	b.n	800a956 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a952:	2300      	movs	r3, #0
 800a954:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800a956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d107      	bne.n	800a96c <LIS2MDL_0_Probe+0xf8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a966:	f06f 0304 	mvn.w	r3, #4
 800a96a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d107      	bne.n	800a982 <LIS2MDL_0_Probe+0x10e>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a97c:	f06f 0304 	mvn.w	r3, #4
 800a980:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800a982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a984:	4618      	mov	r0, r3
 800a986:	3750      	adds	r7, #80	; 0x50
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	08002dd1 	.word	0x08002dd1
 800a990:	08002e4d 	.word	0x08002e4d
 800a994:	08002f01 	.word	0x08002f01
 800a998:	08002e9d 	.word	0x08002e9d
 800a99c:	08002f65 	.word	0x08002f65
 800a9a0:	080017cd 	.word	0x080017cd
 800a9a4:	20001140 	.word	0x20001140
 800a9a8:	200010c0 	.word	0x200010c0
 800a9ac:	20001084 	.word	0x20001084
 800a9b0:	200010b4 	.word	0x200010b4
 800a9b4:	20000078 	.word	0x20000078
 800a9b8:	20000174 	.word	0x20000174
 800a9bc:	20001090 	.word	0x20001090
 800a9c0:	20000088 	.word	0x20000088

0800a9c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <HAL_Init+0x3c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a0b      	ldr	r2, [pc, #44]	; (800aa00 <HAL_Init+0x3c>)
 800a9d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a9da:	2003      	movs	r0, #3
 800a9dc:	f000 f9b4 	bl	800ad48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	f000 f80f 	bl	800aa04 <HAL_InitTick>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	71fb      	strb	r3, [r7, #7]
 800a9f0:	e001      	b.n	800a9f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a9f2:	f7f8 f849 	bl	8002a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	58004000 	.word	0x58004000

0800aa04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800aa10:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <HAL_InitTick+0x6c>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d024      	beq.n	800aa62 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800aa18:	f002 fdf0 	bl	800d5fc <HAL_RCC_GetHCLKFreq>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <HAL_InitTick+0x6c>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	4619      	mov	r1, r3
 800aa24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa28:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 f9ca 	bl	800adca <HAL_SYSTICK_Config>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10f      	bne.n	800aa5c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b0f      	cmp	r3, #15
 800aa40:	d809      	bhi.n	800aa56 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aa42:	2200      	movs	r2, #0
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4a:	f000 f988 	bl	800ad5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800aa4e:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <HAL_InitTick+0x70>)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	e007      	b.n	800aa66 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	73fb      	strb	r3, [r7, #15]
 800aa5a:	e004      	b.n	800aa66 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
 800aa60:	e001      	b.n	800aa66 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	2000018c 	.word	0x2000018c
 800aa74:	20000188 	.word	0x20000188

0800aa78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <HAL_IncTick+0x20>)
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	461a      	mov	r2, r3
 800aa82:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <HAL_IncTick+0x24>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4413      	add	r3, r2
 800aa88:	4a04      	ldr	r2, [pc, #16]	; (800aa9c <HAL_IncTick+0x24>)
 800aa8a:	6013      	str	r3, [r2, #0]
}
 800aa8c:	bf00      	nop
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	2000018c 	.word	0x2000018c
 800aa9c:	20001174 	.word	0x20001174

0800aaa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
  return uwTick;
 800aaa4:	4b03      	ldr	r3, [pc, #12]	; (800aab4 <HAL_GetTick+0x14>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20001174 	.word	0x20001174

0800aab8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800aabc:	4b03      	ldr	r3, [pc, #12]	; (800aacc <HAL_GetTickPrio+0x14>)
 800aabe:	681b      	ldr	r3, [r3, #0]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000188 	.word	0x20000188

0800aad0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800aad4:	4b03      	ldr	r3, [pc, #12]	; (800aae4 <HAL_GetTickFreq+0x14>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	2000018c 	.word	0x2000018c

0800aae8 <__NVIC_SetPriorityGrouping>:
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aaf8:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <__NVIC_SetPriorityGrouping+0x44>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ab04:	4013      	ands	r3, r2
 800ab06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ab10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ab14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab1a:	4a04      	ldr	r2, [pc, #16]	; (800ab2c <__NVIC_SetPriorityGrouping+0x44>)
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	60d3      	str	r3, [r2, #12]
}
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	e000ed00 	.word	0xe000ed00

0800ab30 <__NVIC_GetPriorityGrouping>:
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab34:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <__NVIC_GetPriorityGrouping+0x18>)
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	f003 0307 	and.w	r3, r3, #7
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	e000ed00 	.word	0xe000ed00

0800ab4c <__NVIC_EnableIRQ>:
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	db0b      	blt.n	800ab76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	f003 021f 	and.w	r2, r3, #31
 800ab64:	4907      	ldr	r1, [pc, #28]	; (800ab84 <__NVIC_EnableIRQ+0x38>)
 800ab66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab6a:	095b      	lsrs	r3, r3, #5
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	fa00 f202 	lsl.w	r2, r0, r2
 800ab72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	e000e100 	.word	0xe000e100

0800ab88 <__NVIC_DisableIRQ>:
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	db12      	blt.n	800abc0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	f003 021f 	and.w	r2, r3, #31
 800aba0:	490a      	ldr	r1, [pc, #40]	; (800abcc <__NVIC_DisableIRQ+0x44>)
 800aba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aba6:	095b      	lsrs	r3, r3, #5
 800aba8:	2001      	movs	r0, #1
 800abaa:	fa00 f202 	lsl.w	r2, r0, r2
 800abae:	3320      	adds	r3, #32
 800abb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800abb4:	f3bf 8f4f 	dsb	sy
}
 800abb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800abba:	f3bf 8f6f 	isb	sy
}
 800abbe:	bf00      	nop
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	e000e100 	.word	0xe000e100

0800abd0 <__NVIC_SetPendingIRQ>:
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	db0c      	blt.n	800abfc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abe2:	79fb      	ldrb	r3, [r7, #7]
 800abe4:	f003 021f 	and.w	r2, r3, #31
 800abe8:	4907      	ldr	r1, [pc, #28]	; (800ac08 <__NVIC_SetPendingIRQ+0x38>)
 800abea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abee:	095b      	lsrs	r3, r3, #5
 800abf0:	2001      	movs	r0, #1
 800abf2:	fa00 f202 	lsl.w	r2, r0, r2
 800abf6:	3340      	adds	r3, #64	; 0x40
 800abf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	e000e100 	.word	0xe000e100

0800ac0c <__NVIC_ClearPendingIRQ>:
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	db0c      	blt.n	800ac38 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	f003 021f 	and.w	r2, r3, #31
 800ac24:	4907      	ldr	r1, [pc, #28]	; (800ac44 <__NVIC_ClearPendingIRQ+0x38>)
 800ac26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac2a:	095b      	lsrs	r3, r3, #5
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	fa00 f202 	lsl.w	r2, r0, r2
 800ac32:	3360      	adds	r3, #96	; 0x60
 800ac34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	e000e100 	.word	0xe000e100

0800ac48 <__NVIC_SetPriority>:
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	6039      	str	r1, [r7, #0]
 800ac52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	db0a      	blt.n	800ac72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	490c      	ldr	r1, [pc, #48]	; (800ac94 <__NVIC_SetPriority+0x4c>)
 800ac62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac66:	0112      	lsls	r2, r2, #4
 800ac68:	b2d2      	uxtb	r2, r2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac70:	e00a      	b.n	800ac88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	4908      	ldr	r1, [pc, #32]	; (800ac98 <__NVIC_SetPriority+0x50>)
 800ac78:	79fb      	ldrb	r3, [r7, #7]
 800ac7a:	f003 030f 	and.w	r3, r3, #15
 800ac7e:	3b04      	subs	r3, #4
 800ac80:	0112      	lsls	r2, r2, #4
 800ac82:	b2d2      	uxtb	r2, r2
 800ac84:	440b      	add	r3, r1
 800ac86:	761a      	strb	r2, [r3, #24]
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	e000e100 	.word	0xe000e100
 800ac98:	e000ed00 	.word	0xe000ed00

0800ac9c <NVIC_EncodePriority>:
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b089      	sub	sp, #36	; 0x24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f003 0307 	and.w	r3, r3, #7
 800acae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	f1c3 0307 	rsb	r3, r3, #7
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	bf28      	it	cs
 800acba:	2304      	movcs	r3, #4
 800acbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	3304      	adds	r3, #4
 800acc2:	2b06      	cmp	r3, #6
 800acc4:	d902      	bls.n	800accc <NVIC_EncodePriority+0x30>
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	3b03      	subs	r3, #3
 800acca:	e000      	b.n	800acce <NVIC_EncodePriority+0x32>
 800accc:	2300      	movs	r3, #0
 800acce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	fa02 f303 	lsl.w	r3, r2, r3
 800acda:	43da      	mvns	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	401a      	ands	r2, r3
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ace4:	f04f 31ff 	mov.w	r1, #4294967295
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	fa01 f303 	lsl.w	r3, r1, r3
 800acee:	43d9      	mvns	r1, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acf4:	4313      	orrs	r3, r2
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3724      	adds	r7, #36	; 0x24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <SysTick_Config>:
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad14:	d301      	bcc.n	800ad1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800ad16:	2301      	movs	r3, #1
 800ad18:	e00f      	b.n	800ad3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad1a:	4a0a      	ldr	r2, [pc, #40]	; (800ad44 <SysTick_Config+0x40>)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad22:	210f      	movs	r1, #15
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	f7ff ff8e 	bl	800ac48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <SysTick_Config+0x40>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad32:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <SysTick_Config+0x40>)
 800ad34:	2207      	movs	r2, #7
 800ad36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	e000e010 	.word	0xe000e010

0800ad48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff fec9 	bl	800aae8 <__NVIC_SetPriorityGrouping>
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	4603      	mov	r3, r0
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
 800ad6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ad6c:	f7ff fee0 	bl	800ab30 <__NVIC_GetPriorityGrouping>
 800ad70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	6978      	ldr	r0, [r7, #20]
 800ad78:	f7ff ff90 	bl	800ac9c <NVIC_EncodePriority>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff ff5f 	bl	800ac48 <__NVIC_SetPriority>
}
 800ad8a:	bf00      	nop
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	4603      	mov	r3, r0
 800ad9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff fed3 	bl	800ab4c <__NVIC_EnableIRQ>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	4603      	mov	r3, r0
 800adb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800adb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fee3 	bl	800ab88 <__NVIC_DisableIRQ>
}
 800adc2:	bf00      	nop
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff ff96 	bl	800ad04 <SysTick_Config>
 800add8:	4603      	mov	r3, r0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	4603      	mov	r3, r0
 800adea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800adec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff feed 	bl	800abd0 <__NVIC_SetPendingIRQ>
}
 800adf6:	bf00      	nop
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	4603      	mov	r3, r0
 800ae06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800ae08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff fefd 	bl	800ac0c <__NVIC_ClearPendingIRQ>
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e08e      	b.n	800af4c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	4b47      	ldr	r3, [pc, #284]	; (800af54 <HAL_DMA_Init+0x138>)
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d80f      	bhi.n	800ae5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4b45      	ldr	r3, [pc, #276]	; (800af58 <HAL_DMA_Init+0x13c>)
 800ae42:	4413      	add	r3, r2
 800ae44:	4a45      	ldr	r2, [pc, #276]	; (800af5c <HAL_DMA_Init+0x140>)
 800ae46:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4a:	091b      	lsrs	r3, r3, #4
 800ae4c:	009a      	lsls	r2, r3, #2
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a42      	ldr	r2, [pc, #264]	; (800af60 <HAL_DMA_Init+0x144>)
 800ae56:	641a      	str	r2, [r3, #64]	; 0x40
 800ae58:	e00e      	b.n	800ae78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b40      	ldr	r3, [pc, #256]	; (800af64 <HAL_DMA_Init+0x148>)
 800ae62:	4413      	add	r3, r2
 800ae64:	4a3d      	ldr	r2, [pc, #244]	; (800af5c <HAL_DMA_Init+0x140>)
 800ae66:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6a:	091b      	lsrs	r3, r3, #4
 800ae6c:	009a      	lsls	r2, r3, #2
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a3c      	ldr	r2, [pc, #240]	; (800af68 <HAL_DMA_Init+0x14c>)
 800ae76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ae9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aeb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f8fe 	bl	800b0cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aed8:	d102      	bne.n	800aee0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aee8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800aeec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aef6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d010      	beq.n	800af22 <HAL_DMA_Init+0x106>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	2b04      	cmp	r3, #4
 800af06:	d80c      	bhi.n	800af22 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f91d 	bl	800b148 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800af1e:	605a      	str	r2, [r3, #4]
 800af20:	e008      	b.n	800af34 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	40020407 	.word	0x40020407
 800af58:	bffdfff8 	.word	0xbffdfff8
 800af5c:	cccccccd 	.word	0xcccccccd
 800af60:	40020000 	.word	0x40020000
 800af64:	bffdfbf8 	.word	0xbffdfbf8
 800af68:	40020400 	.word	0x40020400

0800af6c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af88:	f003 031c 	and.w	r3, r3, #28
 800af8c:	2204      	movs	r2, #4
 800af8e:	409a      	lsls	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4013      	ands	r3, r2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d026      	beq.n	800afe6 <HAL_DMA_IRQHandler+0x7a>
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f003 0304 	and.w	r3, r3, #4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d021      	beq.n	800afe6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0320 	and.w	r3, r3, #32
 800afac:	2b00      	cmp	r3, #0
 800afae:	d107      	bne.n	800afc0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0204 	bic.w	r2, r2, #4
 800afbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc4:	f003 021c 	and.w	r2, r3, #28
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afcc:	2104      	movs	r1, #4
 800afce:	fa01 f202 	lsl.w	r2, r1, r2
 800afd2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d071      	beq.n	800b0c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800afe4:	e06c      	b.n	800b0c0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afea:	f003 031c 	and.w	r3, r3, #28
 800afee:	2202      	movs	r2, #2
 800aff0:	409a      	lsls	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4013      	ands	r3, r2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d02e      	beq.n	800b058 <HAL_DMA_IRQHandler+0xec>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b00      	cmp	r3, #0
 800b002:	d029      	beq.n	800b058 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 020a 	bic.w	r2, r2, #10
 800b020:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b02e:	f003 021c 	and.w	r2, r3, #28
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b036:	2102      	movs	r1, #2
 800b038:	fa01 f202 	lsl.w	r2, r1, r2
 800b03c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d038      	beq.n	800b0c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b056:	e033      	b.n	800b0c0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05c:	f003 031c 	and.w	r3, r3, #28
 800b060:	2208      	movs	r2, #8
 800b062:	409a      	lsls	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4013      	ands	r3, r2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d02a      	beq.n	800b0c2 <HAL_DMA_IRQHandler+0x156>
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f003 0308 	and.w	r3, r3, #8
 800b072:	2b00      	cmp	r3, #0
 800b074:	d025      	beq.n	800b0c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 020e 	bic.w	r2, r2, #14
 800b084:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08a:	f003 021c 	and.w	r2, r3, #28
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	2101      	movs	r1, #1
 800b094:	fa01 f202 	lsl.w	r2, r1, r2
 800b098:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
}
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4b17      	ldr	r3, [pc, #92]	; (800b138 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d80a      	bhi.n	800b0f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e4:	089b      	lsrs	r3, r3, #2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6493      	str	r3, [r2, #72]	; 0x48
 800b0f4:	e007      	b.n	800b106 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fa:	089b      	lsrs	r3, r3, #2
 800b0fc:	009a      	lsls	r2, r3, #2
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b100:	4413      	add	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	3b08      	subs	r3, #8
 800b10e:	4a0c      	ldr	r2, [pc, #48]	; (800b140 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b110:	fba2 2303 	umull	r2, r3, r2, r3
 800b114:	091b      	lsrs	r3, r3, #4
 800b116:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a0a      	ldr	r2, [pc, #40]	; (800b144 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b11c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f003 031f 	and.w	r3, r3, #31
 800b124:	2201      	movs	r2, #1
 800b126:	409a      	lsls	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b12c:	bf00      	nop
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	40020407 	.word	0x40020407
 800b13c:	4002081c 	.word	0x4002081c
 800b140:	cccccccd 	.word	0xcccccccd
 800b144:	40020880 	.word	0x40020880

0800b148 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b158:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	461a      	mov	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a09      	ldr	r2, [pc, #36]	; (800b190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800b16c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3b01      	subs	r3, #1
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2201      	movs	r2, #1
 800b178:	409a      	lsls	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b17e:	bf00      	nop
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	1000823f 	.word	0x1000823f
 800b190:	40020940 	.word	0x40020940

0800b194 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b194:	b480      	push	{r7}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b1a2:	e14c      	b.n	800b43e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 813e 	beq.w	800b438 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d005      	beq.n	800b1d4 <HAL_GPIO_Init+0x40>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d130      	bne.n	800b236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	2203      	movs	r2, #3
 800b1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e4:	43db      	mvns	r3, r3
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b20a:	2201      	movs	r2, #1
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	fa02 f303 	lsl.w	r3, r2, r3
 800b212:	43db      	mvns	r3, r3
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	4013      	ands	r3, r2
 800b218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	091b      	lsrs	r3, r3, #4
 800b220:	f003 0201 	and.w	r2, r3, #1
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	fa02 f303 	lsl.w	r3, r2, r3
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d017      	beq.n	800b272 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	2203      	movs	r2, #3
 800b24e:	fa02 f303 	lsl.w	r3, r2, r3
 800b252:	43db      	mvns	r3, r3
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	4013      	ands	r3, r2
 800b258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	fa02 f303 	lsl.w	r3, r2, r3
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	f003 0303 	and.w	r3, r3, #3
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d123      	bne.n	800b2c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	08da      	lsrs	r2, r3, #3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3208      	adds	r2, #8
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	220f      	movs	r2, #15
 800b296:	fa02 f303 	lsl.w	r3, r2, r3
 800b29a:	43db      	mvns	r3, r3
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	691a      	ldr	r2, [r3, #16]
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f003 0307 	and.w	r3, r3, #7
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	08da      	lsrs	r2, r3, #3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3208      	adds	r2, #8
 800b2c0:	6939      	ldr	r1, [r7, #16]
 800b2c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	005b      	lsls	r3, r3, #1
 800b2d0:	2203      	movs	r2, #3
 800b2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d6:	43db      	mvns	r3, r3
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f003 0203 	and.w	r2, r3, #3
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 8098 	beq.w	800b438 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800b308:	4a54      	ldr	r2, [pc, #336]	; (800b45c <HAL_GPIO_Init+0x2c8>)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	089b      	lsrs	r3, r3, #2
 800b30e:	3302      	adds	r3, #2
 800b310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f003 0303 	and.w	r3, r3, #3
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	220f      	movs	r2, #15
 800b320:	fa02 f303 	lsl.w	r3, r2, r3
 800b324:	43db      	mvns	r3, r3
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	4013      	ands	r3, r2
 800b32a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b332:	d019      	beq.n	800b368 <HAL_GPIO_Init+0x1d4>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a4a      	ldr	r2, [pc, #296]	; (800b460 <HAL_GPIO_Init+0x2cc>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d013      	beq.n	800b364 <HAL_GPIO_Init+0x1d0>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a49      	ldr	r2, [pc, #292]	; (800b464 <HAL_GPIO_Init+0x2d0>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00d      	beq.n	800b360 <HAL_GPIO_Init+0x1cc>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a48      	ldr	r2, [pc, #288]	; (800b468 <HAL_GPIO_Init+0x2d4>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d007      	beq.n	800b35c <HAL_GPIO_Init+0x1c8>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a47      	ldr	r2, [pc, #284]	; (800b46c <HAL_GPIO_Init+0x2d8>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d101      	bne.n	800b358 <HAL_GPIO_Init+0x1c4>
 800b354:	2304      	movs	r3, #4
 800b356:	e008      	b.n	800b36a <HAL_GPIO_Init+0x1d6>
 800b358:	2307      	movs	r3, #7
 800b35a:	e006      	b.n	800b36a <HAL_GPIO_Init+0x1d6>
 800b35c:	2303      	movs	r3, #3
 800b35e:	e004      	b.n	800b36a <HAL_GPIO_Init+0x1d6>
 800b360:	2302      	movs	r3, #2
 800b362:	e002      	b.n	800b36a <HAL_GPIO_Init+0x1d6>
 800b364:	2301      	movs	r3, #1
 800b366:	e000      	b.n	800b36a <HAL_GPIO_Init+0x1d6>
 800b368:	2300      	movs	r3, #0
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	f002 0203 	and.w	r2, r2, #3
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	4093      	lsls	r3, r2
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4313      	orrs	r3, r2
 800b378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b37a:	4938      	ldr	r1, [pc, #224]	; (800b45c <HAL_GPIO_Init+0x2c8>)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	089b      	lsrs	r3, r3, #2
 800b380:	3302      	adds	r3, #2
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b388:	4b39      	ldr	r3, [pc, #228]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	43db      	mvns	r3, r3
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	4013      	ands	r3, r2
 800b396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b3ac:	4a30      	ldr	r2, [pc, #192]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b3b2:	4b2f      	ldr	r3, [pc, #188]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	43db      	mvns	r3, r3
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b3d6:	4a26      	ldr	r2, [pc, #152]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b3dc:	4b24      	ldr	r3, [pc, #144]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	43db      	mvns	r3, r3
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b402:	4a1b      	ldr	r2, [pc, #108]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800b40a:	4b19      	ldr	r3, [pc, #100]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b40c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	43db      	mvns	r3, r3
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	4013      	ands	r3, r2
 800b41a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d003      	beq.n	800b430 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b430:	4a0f      	ldr	r2, [pc, #60]	; (800b470 <HAL_GPIO_Init+0x2dc>)
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	3301      	adds	r3, #1
 800b43c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	fa22 f303 	lsr.w	r3, r2, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f47f aeab 	bne.w	800b1a4 <HAL_GPIO_Init+0x10>
  }
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	371c      	adds	r7, #28
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	40010000 	.word	0x40010000
 800b460:	48000400 	.word	0x48000400
 800b464:	48000800 	.word	0x48000800
 800b468:	48000c00 	.word	0x48000c00
 800b46c:	48001000 	.word	0x48001000
 800b470:	58000800 	.word	0x58000800

0800b474 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b482:	e0bb      	b.n	800b5fc <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b484:	2201      	movs	r2, #1
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	fa02 f303 	lsl.w	r3, r2, r3
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	4013      	ands	r3, r2
 800b490:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80ae 	beq.w	800b5f6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800b49a:	4a5f      	ldr	r2, [pc, #380]	; (800b618 <HAL_GPIO_DeInit+0x1a4>)
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	089b      	lsrs	r3, r3, #2
 800b4a0:	3302      	adds	r3, #2
 800b4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	220f      	movs	r2, #15
 800b4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b4c2:	d019      	beq.n	800b4f8 <HAL_GPIO_DeInit+0x84>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a55      	ldr	r2, [pc, #340]	; (800b61c <HAL_GPIO_DeInit+0x1a8>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d013      	beq.n	800b4f4 <HAL_GPIO_DeInit+0x80>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a54      	ldr	r2, [pc, #336]	; (800b620 <HAL_GPIO_DeInit+0x1ac>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d00d      	beq.n	800b4f0 <HAL_GPIO_DeInit+0x7c>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a53      	ldr	r2, [pc, #332]	; (800b624 <HAL_GPIO_DeInit+0x1b0>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d007      	beq.n	800b4ec <HAL_GPIO_DeInit+0x78>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a52      	ldr	r2, [pc, #328]	; (800b628 <HAL_GPIO_DeInit+0x1b4>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d101      	bne.n	800b4e8 <HAL_GPIO_DeInit+0x74>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	e008      	b.n	800b4fa <HAL_GPIO_DeInit+0x86>
 800b4e8:	2307      	movs	r3, #7
 800b4ea:	e006      	b.n	800b4fa <HAL_GPIO_DeInit+0x86>
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e004      	b.n	800b4fa <HAL_GPIO_DeInit+0x86>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	e002      	b.n	800b4fa <HAL_GPIO_DeInit+0x86>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e000      	b.n	800b4fa <HAL_GPIO_DeInit+0x86>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	f002 0203 	and.w	r2, r2, #3
 800b500:	0092      	lsls	r2, r2, #2
 800b502:	4093      	lsls	r3, r2
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	429a      	cmp	r2, r3
 800b508:	d136      	bne.n	800b578 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b50a:	4b48      	ldr	r3, [pc, #288]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b50c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	43db      	mvns	r3, r3
 800b514:	4945      	ldr	r1, [pc, #276]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b516:	4013      	ands	r3, r2
 800b518:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800b51c:	4b43      	ldr	r3, [pc, #268]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b51e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	43db      	mvns	r3, r3
 800b526:	4941      	ldr	r1, [pc, #260]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b528:	4013      	ands	r3, r2
 800b52a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b52e:	4b3f      	ldr	r3, [pc, #252]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	43db      	mvns	r3, r3
 800b536:	493d      	ldr	r1, [pc, #244]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b538:	4013      	ands	r3, r2
 800b53a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800b53c:	4b3b      	ldr	r3, [pc, #236]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	43db      	mvns	r3, r3
 800b544:	4939      	ldr	r1, [pc, #228]	; (800b62c <HAL_GPIO_DeInit+0x1b8>)
 800b546:	4013      	ands	r3, r2
 800b548:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f003 0303 	and.w	r3, r3, #3
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	220f      	movs	r2, #15
 800b554:	fa02 f303 	lsl.w	r3, r2, r3
 800b558:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b55a:	4a2f      	ldr	r2, [pc, #188]	; (800b618 <HAL_GPIO_DeInit+0x1a4>)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	089b      	lsrs	r3, r3, #2
 800b560:	3302      	adds	r3, #2
 800b562:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	43da      	mvns	r2, r3
 800b56a:	482b      	ldr	r0, [pc, #172]	; (800b618 <HAL_GPIO_DeInit+0x1a4>)
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	089b      	lsrs	r3, r3, #2
 800b570:	400a      	ands	r2, r1
 800b572:	3302      	adds	r3, #2
 800b574:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	2103      	movs	r1, #3
 800b582:	fa01 f303 	lsl.w	r3, r1, r3
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	08da      	lsrs	r2, r3, #3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3208      	adds	r2, #8
 800b594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f003 0307 	and.w	r3, r3, #7
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	220f      	movs	r2, #15
 800b5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a6:	43db      	mvns	r3, r3
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	08d2      	lsrs	r2, r2, #3
 800b5ac:	4019      	ands	r1, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3208      	adds	r2, #8
 800b5b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	2103      	movs	r1, #3
 800b5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	401a      	ands	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d8:	43db      	mvns	r3, r3
 800b5da:	401a      	ands	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	2103      	movs	r1, #3
 800b5ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ee:	43db      	mvns	r3, r3
 800b5f0:	401a      	ands	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	fa22 f303 	lsr.w	r3, r2, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	f47f af3d 	bne.w	800b484 <HAL_GPIO_DeInit+0x10>
  }
}
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	371c      	adds	r7, #28
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	40010000 	.word	0x40010000
 800b61c:	48000400 	.word	0x48000400
 800b620:	48000800 	.word	0x48000800
 800b624:	48000c00 	.word	0x48000c00
 800b628:	48001000 	.word	0x48001000
 800b62c:	58000800 	.word	0x58000800

0800b630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	807b      	strh	r3, [r7, #2]
 800b63c:	4613      	mov	r3, r2
 800b63e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b640:	787b      	ldrb	r3, [r7, #1]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b646:	887a      	ldrh	r2, [r7, #2]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b64c:	e002      	b.n	800b654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b64e:	887a      	ldrh	r2, [r7, #2]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	4013      	ands	r3, r2
 800b672:	2b00      	cmp	r3, #0
 800b674:	d006      	beq.n	800b684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b676:	4a05      	ldr	r2, [pc, #20]	; (800b68c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b67c:	88fb      	ldrh	r3, [r7, #6]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f6 f907 	bl	8001892 <HAL_GPIO_EXTI_Callback>
  }
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	58000800 	.word	0x58000800

0800b690 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800b696:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <HAL_HSEM_IRQHandler+0x30>)
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800b69c:	4b08      	ldr	r3, [pc, #32]	; (800b6c0 <HAL_HSEM_IRQHandler+0x30>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	43db      	mvns	r3, r3
 800b6a4:	4906      	ldr	r1, [pc, #24]	; (800b6c0 <HAL_HSEM_IRQHandler+0x30>)
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800b6aa:	4a05      	ldr	r2, [pc, #20]	; (800b6c0 <HAL_HSEM_IRQHandler+0x30>)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f807 	bl	800b6c4 <HAL_HSEM_FreeCallback>
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	58001500 	.word	0x58001500

0800b6c4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e081      	b.n	800b7ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f8a8 	bl	800b854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2224      	movs	r2, #36	; 0x24
 800b708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f022 0201 	bic.w	r2, r2, #1
 800b71a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b728:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b738:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d107      	bne.n	800b752 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b74e:	609a      	str	r2, [r3, #8]
 800b750:	e006      	b.n	800b760 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b75e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d104      	bne.n	800b772 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	6812      	ldr	r2, [r2, #0]
 800b77c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	691a      	ldr	r2, [r3, #16]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	69d9      	ldr	r1, [r3, #28]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a1a      	ldr	r2, [r3, #32]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f042 0201 	orr.w	r2, r2, #1
 800b7ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e021      	b.n	800b84c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2224      	movs	r2, #36	; 0x24
 800b80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f821 	bl	800b868 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af02      	add	r7, sp, #8
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	4608      	mov	r0, r1
 800b886:	4611      	mov	r1, r2
 800b888:	461a      	mov	r2, r3
 800b88a:	4603      	mov	r3, r0
 800b88c:	817b      	strh	r3, [r7, #10]
 800b88e:	460b      	mov	r3, r1
 800b890:	813b      	strh	r3, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	f040 80f9 	bne.w	800ba96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <HAL_I2C_Mem_Write+0x34>
 800b8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d105      	bne.n	800b8bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e0ed      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d101      	bne.n	800b8ca <HAL_I2C_Mem_Write+0x4e>
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e0e6      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b8d2:	f7ff f8e5 	bl	800aaa0 <HAL_GetTick>
 800b8d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	2319      	movs	r3, #25
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 fadd 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e0d1      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2221      	movs	r2, #33	; 0x21
 800b8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2240      	movs	r2, #64	; 0x40
 800b900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6a3a      	ldr	r2, [r7, #32]
 800b90e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b91c:	88f8      	ldrh	r0, [r7, #6]
 800b91e:	893a      	ldrh	r2, [r7, #8]
 800b920:	8979      	ldrh	r1, [r7, #10]
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	4603      	mov	r3, r0
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 f9ed 	bl	800bd0c <I2C_RequestMemoryWrite>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e0a9      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2bff      	cmp	r3, #255	; 0xff
 800b94c:	d90e      	bls.n	800b96c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	22ff      	movs	r2, #255	; 0xff
 800b952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	8979      	ldrh	r1, [r7, #10]
 800b95c:	2300      	movs	r3, #0
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 fc45 	bl	800c1f4 <I2C_TransferConfig>
 800b96a:	e00f      	b.n	800b98c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	8979      	ldrh	r1, [r7, #10]
 800b97e:	2300      	movs	r3, #0
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fc34 	bl	800c1f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fac7 	bl	800bf24 <I2C_WaitOnTXISFlagUntilTimeout>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e07b      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	781a      	ldrb	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d034      	beq.n	800ba44 <HAL_I2C_Mem_Write+0x1c8>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d130      	bne.n	800ba44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2180      	movs	r1, #128	; 0x80
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fa59 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e04d      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	2bff      	cmp	r3, #255	; 0xff
 800ba04:	d90e      	bls.n	800ba24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	22ff      	movs	r2, #255	; 0xff
 800ba0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	8979      	ldrh	r1, [r7, #10]
 800ba14:	2300      	movs	r3, #0
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 fbe9 	bl	800c1f4 <I2C_TransferConfig>
 800ba22:	e00f      	b.n	800ba44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	8979      	ldrh	r1, [r7, #10]
 800ba36:	2300      	movs	r3, #0
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f000 fbd8 	bl	800c1f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d19e      	bne.n	800b98c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 faa6 	bl	800bfa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e01a      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2220      	movs	r2, #32
 800ba68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6859      	ldr	r1, [r3, #4]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <HAL_I2C_Mem_Write+0x224>)
 800ba76:	400b      	ands	r3, r1
 800ba78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	e000      	b.n	800ba98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ba96:	2302      	movs	r3, #2
  }
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	fe00e800 	.word	0xfe00e800

0800baa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	4608      	mov	r0, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	461a      	mov	r2, r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	817b      	strh	r3, [r7, #10]
 800bab6:	460b      	mov	r3, r1
 800bab8:	813b      	strh	r3, [r7, #8]
 800baba:	4613      	mov	r3, r2
 800babc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b20      	cmp	r3, #32
 800bac8:	f040 80fd 	bne.w	800bcc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d002      	beq.n	800bad8 <HAL_I2C_Mem_Read+0x34>
 800bad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d105      	bne.n	800bae4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bade:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e0f1      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_I2C_Mem_Read+0x4e>
 800baee:	2302      	movs	r3, #2
 800baf0:	e0ea      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bafa:	f7fe ffd1 	bl	800aaa0 <HAL_GetTick>
 800bafe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2319      	movs	r3, #25
 800bb06:	2201      	movs	r2, #1
 800bb08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 f9c9 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e0d5      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2222      	movs	r2, #34	; 0x22
 800bb20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2240      	movs	r2, #64	; 0x40
 800bb28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a3a      	ldr	r2, [r7, #32]
 800bb36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb44:	88f8      	ldrh	r0, [r7, #6]
 800bb46:	893a      	ldrh	r2, [r7, #8]
 800bb48:	8979      	ldrh	r1, [r7, #10]
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	9301      	str	r3, [sp, #4]
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	4603      	mov	r3, r0
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 f92d 	bl	800bdb4 <I2C_RequestMemoryRead>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d005      	beq.n	800bb6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e0ad      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2bff      	cmp	r3, #255	; 0xff
 800bb74:	d90e      	bls.n	800bb94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	22ff      	movs	r2, #255	; 0xff
 800bb7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	8979      	ldrh	r1, [r7, #10]
 800bb84:	4b52      	ldr	r3, [pc, #328]	; (800bcd0 <HAL_I2C_Mem_Read+0x22c>)
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 fb31 	bl	800c1f4 <I2C_TransferConfig>
 800bb92:	e00f      	b.n	800bbb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	8979      	ldrh	r1, [r7, #10]
 800bba6:	4b4a      	ldr	r3, [pc, #296]	; (800bcd0 <HAL_I2C_Mem_Read+0x22c>)
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f000 fb20 	bl	800c1f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2104      	movs	r1, #4
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 f970 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e07c      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbea:	3b01      	subs	r3, #1
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d034      	beq.n	800bc74 <HAL_I2C_Mem_Read+0x1d0>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d130      	bne.n	800bc74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2180      	movs	r1, #128	; 0x80
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 f941 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e04d      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2bff      	cmp	r3, #255	; 0xff
 800bc34:	d90e      	bls.n	800bc54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	22ff      	movs	r2, #255	; 0xff
 800bc3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	8979      	ldrh	r1, [r7, #10]
 800bc44:	2300      	movs	r3, #0
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fad1 	bl	800c1f4 <I2C_TransferConfig>
 800bc52:	e00f      	b.n	800bc74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	8979      	ldrh	r1, [r7, #10]
 800bc66:	2300      	movs	r3, #0
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 fac0 	bl	800c1f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d19a      	bne.n	800bbb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 f98e 	bl	800bfa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e01a      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2220      	movs	r2, #32
 800bc98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6859      	ldr	r1, [r3, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <HAL_I2C_Mem_Read+0x230>)
 800bca6:	400b      	ands	r3, r1
 800bca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e000      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bcc6:	2302      	movs	r3, #2
  }
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	80002400 	.word	0x80002400
 800bcd4:	fe00e800 	.word	0xfe00e800

0800bcd8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bce6:	b2db      	uxtb	r3, r3
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	4608      	mov	r0, r1
 800bd16:	4611      	mov	r1, r2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	817b      	strh	r3, [r7, #10]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	813b      	strh	r3, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bd26:	88fb      	ldrh	r3, [r7, #6]
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	8979      	ldrh	r1, [r7, #10]
 800bd2c:	4b20      	ldr	r3, [pc, #128]	; (800bdb0 <I2C_RequestMemoryWrite+0xa4>)
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fa5d 	bl	800c1f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd3a:	69fa      	ldr	r2, [r7, #28]
 800bd3c:	69b9      	ldr	r1, [r7, #24]
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 f8f0 	bl	800bf24 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e02c      	b.n	800bda8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d105      	bne.n	800bd60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd54:	893b      	ldrh	r3, [r7, #8]
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	629a      	str	r2, [r3, #40]	; 0x28
 800bd5e:	e015      	b.n	800bd8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd60:	893b      	ldrh	r3, [r7, #8]
 800bd62:	0a1b      	lsrs	r3, r3, #8
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	69b9      	ldr	r1, [r7, #24]
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 f8d6 	bl	800bf24 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e012      	b.n	800bda8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd82:	893b      	ldrh	r3, [r7, #8]
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	2200      	movs	r2, #0
 800bd94:	2180      	movs	r1, #128	; 0x80
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 f884 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	80002000 	.word	0x80002000

0800bdb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	817b      	strh	r3, [r7, #10]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	813b      	strh	r3, [r7, #8]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bdce:	88fb      	ldrh	r3, [r7, #6]
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	8979      	ldrh	r1, [r7, #10]
 800bdd4:	4b20      	ldr	r3, [pc, #128]	; (800be58 <I2C_RequestMemoryRead+0xa4>)
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fa0a 	bl	800c1f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bde0:	69fa      	ldr	r2, [r7, #28]
 800bde2:	69b9      	ldr	r1, [r7, #24]
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 f89d 	bl	800bf24 <I2C_WaitOnTXISFlagUntilTimeout>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e02c      	b.n	800be4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d105      	bne.n	800be06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdfa:	893b      	ldrh	r3, [r7, #8]
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	629a      	str	r2, [r3, #40]	; 0x28
 800be04:	e015      	b.n	800be32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be06:	893b      	ldrh	r3, [r7, #8]
 800be08:	0a1b      	lsrs	r3, r3, #8
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be14:	69fa      	ldr	r2, [r7, #28]
 800be16:	69b9      	ldr	r1, [r7, #24]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f883 	bl	800bf24 <I2C_WaitOnTXISFlagUntilTimeout>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e012      	b.n	800be4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be28:	893b      	ldrh	r3, [r7, #8]
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2200      	movs	r2, #0
 800be3a:	2140      	movs	r1, #64	; 0x40
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f000 f831 	bl	800bea4 <I2C_WaitOnFlagUntilTimeout>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e000      	b.n	800be4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	80002000 	.word	0x80002000

0800be5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f003 0302 	and.w	r3, r3, #2
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d103      	bne.n	800be7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2200      	movs	r2, #0
 800be78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	f003 0301 	and.w	r3, r3, #1
 800be84:	2b01      	cmp	r3, #1
 800be86:	d007      	beq.n	800be98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	699a      	ldr	r2, [r3, #24]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f042 0201 	orr.w	r2, r2, #1
 800be96:	619a      	str	r2, [r3, #24]
  }
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	4613      	mov	r3, r2
 800beb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800beb4:	e022      	b.n	800befc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebc:	d01e      	beq.n	800befc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bebe:	f7fe fdef 	bl	800aaa0 <HAL_GetTick>
 800bec2:	4602      	mov	r2, r0
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	429a      	cmp	r2, r3
 800becc:	d302      	bcc.n	800bed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d113      	bne.n	800befc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed8:	f043 0220 	orr.w	r2, r3, #32
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e00f      	b.n	800bf1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	699a      	ldr	r2, [r3, #24]
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	4013      	ands	r3, r2
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	bf0c      	ite	eq
 800bf0c:	2301      	moveq	r3, #1
 800bf0e:	2300      	movne	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	461a      	mov	r2, r3
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d0cd      	beq.n	800beb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf30:	e02c      	b.n	800bf8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f000 f870 	bl	800c01c <I2C_IsErrorOccurred>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e02a      	b.n	800bf9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d01e      	beq.n	800bf8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf4e:	f7fe fda7 	bl	800aaa0 <HAL_GetTick>
 800bf52:	4602      	mov	r2, r0
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d302      	bcc.n	800bf64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d113      	bne.n	800bf8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf68:	f043 0220 	orr.w	r2, r3, #32
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e007      	b.n	800bf9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d1cb      	bne.n	800bf32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfb0:	e028      	b.n	800c004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	68b9      	ldr	r1, [r7, #8]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f830 	bl	800c01c <I2C_IsErrorOccurred>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e026      	b.n	800c014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfc6:	f7fe fd6b 	bl	800aaa0 <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d302      	bcc.n	800bfdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d113      	bne.n	800c004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe0:	f043 0220 	orr.w	r2, r3, #32
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2220      	movs	r2, #32
 800bfec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e007      	b.n	800c014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b20      	cmp	r3, #32
 800c010:	d1cf      	bne.n	800bfb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08a      	sub	sp, #40	; 0x28
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	f003 0310 	and.w	r3, r3, #16
 800c044:	2b00      	cmp	r3, #0
 800c046:	d075      	beq.n	800c134 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2210      	movs	r2, #16
 800c04e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c050:	e056      	b.n	800c100 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c058:	d052      	beq.n	800c100 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c05a:	f7fe fd21 	bl	800aaa0 <HAL_GetTick>
 800c05e:	4602      	mov	r2, r0
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	429a      	cmp	r2, r3
 800c068:	d302      	bcc.n	800c070 <I2C_IsErrorOccurred+0x54>
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d147      	bne.n	800c100 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c07a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c082:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c08e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c092:	d12e      	bne.n	800c0f2 <I2C_IsErrorOccurred+0xd6>
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c09a:	d02a      	beq.n	800c0f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800c09c:	7cfb      	ldrb	r3, [r7, #19]
 800c09e:	2b20      	cmp	r3, #32
 800c0a0:	d027      	beq.n	800c0f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c0b2:	f7fe fcf5 	bl	800aaa0 <HAL_GetTick>
 800c0b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0b8:	e01b      	b.n	800c0f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c0ba:	f7fe fcf1 	bl	800aaa0 <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	2b19      	cmp	r3, #25
 800c0c6:	d914      	bls.n	800c0f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0cc:	f043 0220 	orr.w	r2, r3, #32
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2220      	movs	r2, #32
 800c0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	f003 0320 	and.w	r3, r3, #32
 800c0fc:	2b20      	cmp	r3, #32
 800c0fe:	d1dc      	bne.n	800c0ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	f003 0320 	and.w	r3, r3, #32
 800c10a:	2b20      	cmp	r3, #32
 800c10c:	d003      	beq.n	800c116 <I2C_IsErrorOccurred+0xfa>
 800c10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c112:	2b00      	cmp	r3, #0
 800c114:	d09d      	beq.n	800c052 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2220      	movs	r2, #32
 800c124:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	f043 0304 	orr.w	r3, r3, #4
 800c12c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00b      	beq.n	800c15e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	f043 0301 	orr.w	r3, r3, #1
 800c14c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00b      	beq.n	800c180 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	f043 0308 	orr.w	r3, r3, #8
 800c16e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00b      	beq.n	800c1a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	f043 0302 	orr.w	r3, r3, #2
 800c190:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c19a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d01c      	beq.n	800c1e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff fe56 	bl	800be5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6859      	ldr	r1, [r3, #4]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <I2C_IsErrorOccurred+0x1d4>)
 800c1bc:	400b      	ands	r3, r1
 800c1be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2220      	movs	r2, #32
 800c1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3728      	adds	r7, #40	; 0x28
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	fe00e800 	.word	0xfe00e800

0800c1f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	607b      	str	r3, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	817b      	strh	r3, [r7, #10]
 800c202:	4613      	mov	r3, r2
 800c204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c206:	897b      	ldrh	r3, [r7, #10]
 800c208:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c20c:	7a7b      	ldrb	r3, [r7, #9]
 800c20e:	041b      	lsls	r3, r3, #16
 800c210:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c214:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c21a:	6a3b      	ldr	r3, [r7, #32]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c222:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	0d5b      	lsrs	r3, r3, #21
 800c22e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c232:	4b08      	ldr	r3, [pc, #32]	; (800c254 <I2C_TransferConfig+0x60>)
 800c234:	430b      	orrs	r3, r1
 800c236:	43db      	mvns	r3, r3
 800c238:	ea02 0103 	and.w	r1, r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	430a      	orrs	r2, r1
 800c244:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c246:	bf00      	nop
 800c248:	371c      	adds	r7, #28
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	03ff63ff 	.word	0x03ff63ff

0800c258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b20      	cmp	r3, #32
 800c26c:	d138      	bne.n	800c2e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c274:	2b01      	cmp	r3, #1
 800c276:	d101      	bne.n	800c27c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c278:	2302      	movs	r3, #2
 800c27a:	e032      	b.n	800c2e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2224      	movs	r2, #36	; 0x24
 800c288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f022 0201 	bic.w	r2, r2, #1
 800c29a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6819      	ldr	r1, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f042 0201 	orr.w	r2, r2, #1
 800c2ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2220      	movs	r2, #32
 800c2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	e000      	b.n	800c2e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c2e0:	2302      	movs	r3, #2
  }
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b085      	sub	sp, #20
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b20      	cmp	r3, #32
 800c302:	d139      	bne.n	800c378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d101      	bne.n	800c312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c30e:	2302      	movs	r3, #2
 800c310:	e033      	b.n	800c37a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2224      	movs	r2, #36	; 0x24
 800c31e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f022 0201 	bic.w	r2, r2, #1
 800c330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0201 	orr.w	r2, r2, #1
 800c362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2220      	movs	r2, #32
 800c368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	e000      	b.n	800c37a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c378:	2302      	movs	r3, #2
  }
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d01e      	beq.n	800c3d8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800c39a:	4b13      	ldr	r3, [pc, #76]	; (800c3e8 <HAL_IPCC_Init+0x60>)
 800c39c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7f6 fb7c 	bl	8002aa8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800c3b0:	68b8      	ldr	r0, [r7, #8]
 800c3b2:	f000 f85b 	bl	800c46c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f82c 	bl	800c420 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800c3d6:	e001      	b.n	800c3dc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	58000c00 	.word	0x58000c00

0800c3ec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800c406:	b480      	push	{r7}
 800c408:	b085      	sub	sp, #20
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	4613      	mov	r3, r2
 800c412:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e00f      	b.n	800c44e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4413      	add	r3, r2
 800c436:	4a0b      	ldr	r2, [pc, #44]	; (800c464 <IPCC_SetDefaultCallbacks+0x44>)
 800c438:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3306      	adds	r3, #6
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	4a08      	ldr	r2, [pc, #32]	; (800c468 <IPCC_SetDefaultCallbacks+0x48>)
 800c446:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3301      	adds	r3, #1
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b05      	cmp	r3, #5
 800c452:	d9ec      	bls.n	800c42e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	0800c3ed 	.word	0x0800c3ed
 800c468:	0800c407 	.word	0x0800c407

0800c46c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800c480:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	223f      	movs	r2, #63	; 0x3f
 800c486:	609a      	str	r2, [r3, #8]
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c498:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a04      	ldr	r2, [pc, #16]	; (800c4b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c49e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4a2:	6013      	str	r3, [r2, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	58000400 	.word	0x58000400

0800c4b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c4b8:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <HAL_PWREx_GetVoltageRange+0x18>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	58000400 	.word	0x58000400

0800c4d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c4d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4e2:	d101      	bne.n	800c4e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <LL_RCC_HSE_Enable>:
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c4f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c506:	6013      	str	r3, [r2, #0]
}
 800c508:	bf00      	nop
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <LL_RCC_HSE_Disable>:
{
 800c512:	b480      	push	{r7}
 800c514:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c524:	6013      	str	r3, [r2, #0]
}
 800c526:	bf00      	nop
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <LL_RCC_HSE_IsReady>:
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c542:	d101      	bne.n	800c548 <LL_RCC_HSE_IsReady+0x18>
 800c544:	2301      	movs	r3, #1
 800c546:	e000      	b.n	800c54a <LL_RCC_HSE_IsReady+0x1a>
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <LL_RCC_HSI_Enable>:
{
 800c554:	b480      	push	{r7}
 800c556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c566:	6013      	str	r3, [r2, #0]
}
 800c568:	bf00      	nop
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <LL_RCC_HSI_Disable>:
{
 800c572:	b480      	push	{r7}
 800c574:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c584:	6013      	str	r3, [r2, #0]
}
 800c586:	bf00      	nop
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <LL_RCC_HSI_IsReady>:
{
 800c590:	b480      	push	{r7}
 800c592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c59e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5a2:	d101      	bne.n	800c5a8 <LL_RCC_HSI_IsReady+0x18>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e000      	b.n	800c5aa <LL_RCC_HSI_IsReady+0x1a>
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c5bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	061b      	lsls	r3, r3, #24
 800c5ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	604b      	str	r3, [r1, #4]
}
 800c5d2:	bf00      	nop
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <LL_RCC_HSI48_Enable>:
{
 800c5de:	b480      	push	{r7}
 800c5e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c5e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c5ee:	f043 0301 	orr.w	r3, r3, #1
 800c5f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c5f6:	bf00      	nop
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <LL_RCC_HSI48_Disable>:
{
 800c600:	b480      	push	{r7}
 800c602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c60c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c610:	f023 0301 	bic.w	r3, r3, #1
 800c614:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c618:	bf00      	nop
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <LL_RCC_HSI48_IsReady>:
{
 800c622:	b480      	push	{r7}
 800c624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c62a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b02      	cmp	r3, #2
 800c634:	d101      	bne.n	800c63a <LL_RCC_HSI48_IsReady+0x18>
 800c636:	2301      	movs	r3, #1
 800c638:	e000      	b.n	800c63c <LL_RCC_HSI48_IsReady+0x1a>
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <LL_RCC_LSE_Enable>:
{
 800c646:	b480      	push	{r7}
 800c648:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c64a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c65e:	bf00      	nop
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <LL_RCC_LSE_Disable>:
{
 800c668:	b480      	push	{r7}
 800c66a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c66c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c678:	f023 0301 	bic.w	r3, r3, #1
 800c67c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c680:	bf00      	nop
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <LL_RCC_LSE_EnableBypass>:
{
 800c68a:	b480      	push	{r7}
 800c68c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c68e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c69a:	f043 0304 	orr.w	r3, r3, #4
 800c69e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c6a2:	bf00      	nop
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <LL_RCC_LSE_DisableBypass>:
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c6b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c6bc:	f023 0304 	bic.w	r3, r3, #4
 800c6c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c6c4:	bf00      	nop
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <LL_RCC_LSE_IsReady>:
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c6d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	d101      	bne.n	800c6e6 <LL_RCC_LSE_IsReady+0x18>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e000      	b.n	800c6e8 <LL_RCC_LSE_IsReady+0x1a>
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <LL_RCC_LSI1_Enable>:
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c6f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c702:	f043 0301 	orr.w	r3, r3, #1
 800c706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c70a:	bf00      	nop
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <LL_RCC_LSI1_Disable>:
{
 800c714:	b480      	push	{r7}
 800c716:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c71c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c724:	f023 0301 	bic.w	r3, r3, #1
 800c728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c72c:	bf00      	nop
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <LL_RCC_LSI1_IsReady>:
{
 800c736:	b480      	push	{r7}
 800c738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c73a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c73e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	2b02      	cmp	r3, #2
 800c748:	d101      	bne.n	800c74e <LL_RCC_LSI1_IsReady+0x18>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e000      	b.n	800c750 <LL_RCC_LSI1_IsReady+0x1a>
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <LL_RCC_LSI2_Enable>:
{
 800c75a:	b480      	push	{r7}
 800c75c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c75e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c76a:	f043 0304 	orr.w	r3, r3, #4
 800c76e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c772:	bf00      	nop
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <LL_RCC_LSI2_Disable>:
{
 800c77c:	b480      	push	{r7}
 800c77e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c78c:	f023 0304 	bic.w	r3, r3, #4
 800c790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c794:	bf00      	nop
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <LL_RCC_LSI2_IsReady>:
{
 800c79e:	b480      	push	{r7}
 800c7a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c7a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7aa:	f003 0308 	and.w	r3, r3, #8
 800c7ae:	2b08      	cmp	r3, #8
 800c7b0:	d101      	bne.n	800c7b6 <LL_RCC_LSI2_IsReady+0x18>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <LL_RCC_LSI2_IsReady+0x1a>
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <LL_RCC_LSI2_SetTrimming>:
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c7ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	021b      	lsls	r3, r3, #8
 800c7da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <LL_RCC_MSI_Enable>:
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c7f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c7fe:	f043 0301 	orr.w	r3, r3, #1
 800c802:	6013      	str	r3, [r2, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <LL_RCC_MSI_Disable>:
{
 800c80e:	b480      	push	{r7}
 800c810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c81c:	f023 0301 	bic.w	r3, r3, #1
 800c820:	6013      	str	r3, [r2, #0]
}
 800c822:	bf00      	nop
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <LL_RCC_MSI_IsReady>:
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d101      	bne.n	800c842 <LL_RCC_MSI_IsReady+0x16>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <LL_RCC_MSI_IsReady+0x18>
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <LL_RCC_MSI_SetRange>:
{
 800c84e:	b480      	push	{r7}
 800c850:	b083      	sub	sp, #12
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4313      	orrs	r3, r2
 800c868:	600b      	str	r3, [r1, #0]
}
 800c86a:	bf00      	nop
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <LL_RCC_MSI_GetRange>:
{
 800c876:	b480      	push	{r7}
 800c878:	b083      	sub	sp, #12
 800c87a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c87c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c886:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2bb0      	cmp	r3, #176	; 0xb0
 800c88c:	d901      	bls.n	800c892 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c88e:	23b0      	movs	r3, #176	; 0xb0
 800c890:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c892:	687b      	ldr	r3, [r7, #4]
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c8a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	604b      	str	r3, [r1, #4]
}
 800c8be:	bf00      	nop
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <LL_RCC_SetSysClkSource>:
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c8d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f023 0203 	bic.w	r2, r3, #3
 800c8dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	608b      	str	r3, [r1, #8]
}
 800c8e6:	bf00      	nop
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <LL_RCC_GetSysClkSource>:
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c8f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f003 030c 	and.w	r3, r3, #12
}
 800c900:	4618      	mov	r0, r3
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <LL_RCC_SetAHBPrescaler>:
{
 800c90a:	b480      	push	{r7}
 800c90c:	b083      	sub	sp, #12
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c91c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4313      	orrs	r3, r2
 800c924:	608b      	str	r3, [r1, #8]
}
 800c926:	bf00      	nop
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c932:	b480      	push	{r7}
 800c934:	b083      	sub	sp, #12
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c93a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c93e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c952:	bf00      	nop
 800c954:	370c      	adds	r7, #12
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <LL_RCC_SetAHB4Prescaler>:
{
 800c95e:	b480      	push	{r7}
 800c960:	b083      	sub	sp, #12
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c96a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c96e:	f023 020f 	bic.w	r2, r3, #15
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	091b      	lsrs	r3, r3, #4
 800c976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c97a:	4313      	orrs	r3, r2
 800c97c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <LL_RCC_SetAPB1Prescaler>:
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c99e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	608b      	str	r3, [r1, #8]
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <LL_RCC_SetAPB2Prescaler>:
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c9bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c9c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	608b      	str	r3, [r1, #8]
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <LL_RCC_GetAHBPrescaler>:
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c9e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <LL_RCC_GetAHB4Prescaler>:
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c9f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <LL_RCC_GetAPB1Prescaler>:
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ca14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <LL_RCC_GetAPB2Prescaler>:
{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ca2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <LL_RCC_PLL_Enable>:
{
 800ca40:	b480      	push	{r7}
 800ca42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ca44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca52:	6013      	str	r3, [r2, #0]
}
 800ca54:	bf00      	nop
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <LL_RCC_PLL_Disable>:
{
 800ca5e:	b480      	push	{r7}
 800ca60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ca62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca70:	6013      	str	r3, [r2, #0]
}
 800ca72:	bf00      	nop
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <LL_RCC_PLL_IsReady>:
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ca80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca8e:	d101      	bne.n	800ca94 <LL_RCC_PLL_IsReady+0x18>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <LL_RCC_PLL_IsReady+0x1a>
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <LL_RCC_PLL_GetN>:
{
 800caa0:	b480      	push	{r7}
 800caa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800caa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	0a1b      	lsrs	r3, r3, #8
 800caac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <LL_RCC_PLL_GetR>:
{
 800caba:	b480      	push	{r7}
 800cabc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800cabe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800cac8:	4618      	mov	r0, r3
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <LL_RCC_PLL_GetDivider>:
{
 800cad2:	b480      	push	{r7}
 800cad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800cad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <LL_RCC_PLL_GetMainSource>:
{
 800caea:	b480      	push	{r7}
 800caec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800caee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f003 0303 	and.w	r3, r3, #3
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <LL_RCC_IsActiveFlag_HPRE>:
{
 800cb02:	b480      	push	{r7}
 800cb04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800cb06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb14:	d101      	bne.n	800cb1a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800cb26:	b480      	push	{r7}
 800cb28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800cb2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cb32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb3a:	d101      	bne.n	800cb40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e000      	b.n	800cb42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800cb50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cb58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb60:	d101      	bne.n	800cb66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800cb72:	b480      	push	{r7}
 800cb74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800cb76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb84:	d101      	bne.n	800cb8a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800cb96:	b480      	push	{r7}
 800cb98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800cb9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cba8:	d101      	bne.n	800cbae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e000      	b.n	800cbb0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
	...

0800cbbc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b08d      	sub	sp, #52	; 0x34
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e363      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 0320 	and.w	r3, r3, #32
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f000 808d 	beq.w	800ccf6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cbdc:	f7ff fe89 	bl	800c8f2 <LL_RCC_GetSysClkSource>
 800cbe0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cbe2:	f7ff ff82 	bl	800caea <LL_RCC_PLL_GetMainSource>
 800cbe6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d005      	beq.n	800cbfa <HAL_RCC_OscConfig+0x3e>
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	2b0c      	cmp	r3, #12
 800cbf2:	d147      	bne.n	800cc84 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d144      	bne.n	800cc84 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	69db      	ldr	r3, [r3, #28]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e347      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc0a:	f7ff fe34 	bl	800c876 <LL_RCC_MSI_GetRange>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	429c      	cmp	r4, r3
 800cc12:	d914      	bls.n	800cc3e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 fd2f 	bl	800d67c <RCC_SetFlashLatencyFromMSIRange>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e336      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7ff fe0e 	bl	800c84e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fe32 	bl	800c8a0 <LL_RCC_MSI_SetCalibTrimming>
 800cc3c:	e013      	b.n	800cc66 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fe03 	bl	800c84e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fe27 	bl	800c8a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fd10 	bl	800d67c <RCC_SetFlashLatencyFromMSIRange>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	e317      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cc66:	f000 fcc9 	bl	800d5fc <HAL_RCC_GetHCLKFreq>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	4aa4      	ldr	r2, [pc, #656]	; (800cf00 <HAL_RCC_OscConfig+0x344>)
 800cc6e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cc70:	4ba4      	ldr	r3, [pc, #656]	; (800cf04 <HAL_RCC_OscConfig+0x348>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fd fec5 	bl	800aa04 <HAL_InitTick>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d039      	beq.n	800ccf4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e308      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	69db      	ldr	r3, [r3, #28]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d01e      	beq.n	800ccca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cc8c:	f7ff fdb0 	bl	800c7f0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cc90:	f7fd ff06 	bl	800aaa0 <HAL_GetTick>
 800cc94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800cc96:	e008      	b.n	800ccaa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cc98:	f7fd ff02 	bl	800aaa0 <HAL_GetTick>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2b02      	cmp	r3, #2
 800cca4:	d901      	bls.n	800ccaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800cca6:	2303      	movs	r3, #3
 800cca8:	e2f5      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800ccaa:	f7ff fdbf 	bl	800c82c <LL_RCC_MSI_IsReady>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0f1      	beq.n	800cc98 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7ff fdc8 	bl	800c84e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff fdec 	bl	800c8a0 <LL_RCC_MSI_SetCalibTrimming>
 800ccc8:	e015      	b.n	800ccf6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ccca:	f7ff fda0 	bl	800c80e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ccce:	f7fd fee7 	bl	800aaa0 <HAL_GetTick>
 800ccd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800ccd4:	e008      	b.n	800cce8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ccd6:	f7fd fee3 	bl	800aaa0 <HAL_GetTick>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d901      	bls.n	800cce8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e2d6      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800cce8:	f7ff fda0 	bl	800c82c <LL_RCC_MSI_IsReady>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1f1      	bne.n	800ccd6 <HAL_RCC_OscConfig+0x11a>
 800ccf2:	e000      	b.n	800ccf6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ccf4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d047      	beq.n	800cd92 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd02:	f7ff fdf6 	bl	800c8f2 <LL_RCC_GetSysClkSource>
 800cd06:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cd08:	f7ff feef 	bl	800caea <LL_RCC_PLL_GetMainSource>
 800cd0c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	2b08      	cmp	r3, #8
 800cd12:	d005      	beq.n	800cd20 <HAL_RCC_OscConfig+0x164>
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	2b0c      	cmp	r3, #12
 800cd18:	d108      	bne.n	800cd2c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d105      	bne.n	800cd2c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d134      	bne.n	800cd92 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e2b4      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd34:	d102      	bne.n	800cd3c <HAL_RCC_OscConfig+0x180>
 800cd36:	f7ff fbdd 	bl	800c4f4 <LL_RCC_HSE_Enable>
 800cd3a:	e001      	b.n	800cd40 <HAL_RCC_OscConfig+0x184>
 800cd3c:	f7ff fbe9 	bl	800c512 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d012      	beq.n	800cd6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd48:	f7fd feaa 	bl	800aaa0 <HAL_GetTick>
 800cd4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800cd4e:	e008      	b.n	800cd62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd50:	f7fd fea6 	bl	800aaa0 <HAL_GetTick>
 800cd54:	4602      	mov	r2, r0
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	2b64      	cmp	r3, #100	; 0x64
 800cd5c:	d901      	bls.n	800cd62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	e299      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800cd62:	f7ff fbe5 	bl	800c530 <LL_RCC_HSE_IsReady>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d0f1      	beq.n	800cd50 <HAL_RCC_OscConfig+0x194>
 800cd6c:	e011      	b.n	800cd92 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd6e:	f7fd fe97 	bl	800aaa0 <HAL_GetTick>
 800cd72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800cd74:	e008      	b.n	800cd88 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd76:	f7fd fe93 	bl	800aaa0 <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	2b64      	cmp	r3, #100	; 0x64
 800cd82:	d901      	bls.n	800cd88 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cd84:	2303      	movs	r3, #3
 800cd86:	e286      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800cd88:	f7ff fbd2 	bl	800c530 <LL_RCC_HSE_IsReady>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f1      	bne.n	800cd76 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 0302 	and.w	r3, r3, #2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d04c      	beq.n	800ce38 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd9e:	f7ff fda8 	bl	800c8f2 <LL_RCC_GetSysClkSource>
 800cda2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cda4:	f7ff fea1 	bl	800caea <LL_RCC_PLL_GetMainSource>
 800cda8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d005      	beq.n	800cdbc <HAL_RCC_OscConfig+0x200>
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b0c      	cmp	r3, #12
 800cdb4:	d10e      	bne.n	800cdd4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d10b      	bne.n	800cdd4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e266      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff fbf1 	bl	800c5b4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cdd2:	e031      	b.n	800ce38 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d019      	beq.n	800ce10 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cddc:	f7ff fbba 	bl	800c554 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde0:	f7fd fe5e 	bl	800aaa0 <HAL_GetTick>
 800cde4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800cde6:	e008      	b.n	800cdfa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cde8:	f7fd fe5a 	bl	800aaa0 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e24d      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800cdfa:	f7ff fbc9 	bl	800c590 <LL_RCC_HSI_IsReady>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d0f1      	beq.n	800cde8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff fbd3 	bl	800c5b4 <LL_RCC_HSI_SetCalibTrimming>
 800ce0e:	e013      	b.n	800ce38 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce10:	f7ff fbaf 	bl	800c572 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce14:	f7fd fe44 	bl	800aaa0 <HAL_GetTick>
 800ce18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ce1a:	e008      	b.n	800ce2e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce1c:	f7fd fe40 	bl	800aaa0 <HAL_GetTick>
 800ce20:	4602      	mov	r2, r0
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d901      	bls.n	800ce2e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e233      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ce2e:	f7ff fbaf 	bl	800c590 <LL_RCC_HSI_IsReady>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1f1      	bne.n	800ce1c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 0308 	and.w	r3, r3, #8
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 80a3 	beq.w	800cf98 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d076      	beq.n	800cf48 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 0310 	and.w	r3, r3, #16
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d046      	beq.n	800cef4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ce66:	f7ff fc66 	bl	800c736 <LL_RCC_LSI1_IsReady>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d113      	bne.n	800ce98 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ce70:	f7ff fc3f 	bl	800c6f2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce74:	f7fd fe14 	bl	800aaa0 <HAL_GetTick>
 800ce78:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ce7a:	e008      	b.n	800ce8e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ce7c:	f7fd fe10 	bl	800aaa0 <HAL_GetTick>
 800ce80:	4602      	mov	r2, r0
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d901      	bls.n	800ce8e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	e203      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ce8e:	f7ff fc52 	bl	800c736 <LL_RCC_LSI1_IsReady>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0f1      	beq.n	800ce7c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ce98:	f7ff fc5f 	bl	800c75a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce9c:	f7fd fe00 	bl	800aaa0 <HAL_GetTick>
 800cea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800cea2:	e008      	b.n	800ceb6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cea4:	f7fd fdfc 	bl	800aaa0 <HAL_GetTick>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d901      	bls.n	800ceb6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e1ef      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ceb6:	f7ff fc72 	bl	800c79e <LL_RCC_LSI2_IsReady>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0f1      	beq.n	800cea4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	699b      	ldr	r3, [r3, #24]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff fc7c 	bl	800c7c2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ceca:	f7ff fc23 	bl	800c714 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cece:	f7fd fde7 	bl	800aaa0 <HAL_GetTick>
 800ced2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ced4:	e008      	b.n	800cee8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ced6:	f7fd fde3 	bl	800aaa0 <HAL_GetTick>
 800ceda:	4602      	mov	r2, r0
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d901      	bls.n	800cee8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e1d6      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800cee8:	f7ff fc25 	bl	800c736 <LL_RCC_LSI1_IsReady>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1f1      	bne.n	800ced6 <HAL_RCC_OscConfig+0x31a>
 800cef2:	e051      	b.n	800cf98 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800cef4:	f7ff fbfd 	bl	800c6f2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cef8:	f7fd fdd2 	bl	800aaa0 <HAL_GetTick>
 800cefc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800cefe:	e00c      	b.n	800cf1a <HAL_RCC_OscConfig+0x35e>
 800cf00:	20000008 	.word	0x20000008
 800cf04:	20000188 	.word	0x20000188
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cf08:	f7fd fdca 	bl	800aaa0 <HAL_GetTick>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d901      	bls.n	800cf1a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e1bd      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800cf1a:	f7ff fc0c 	bl	800c736 <LL_RCC_LSI1_IsReady>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d0f1      	beq.n	800cf08 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800cf24:	f7ff fc2a 	bl	800c77c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800cf28:	e008      	b.n	800cf3c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cf2a:	f7fd fdb9 	bl	800aaa0 <HAL_GetTick>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	d901      	bls.n	800cf3c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	e1ac      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800cf3c:	f7ff fc2f 	bl	800c79e <LL_RCC_LSI2_IsReady>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1f1      	bne.n	800cf2a <HAL_RCC_OscConfig+0x36e>
 800cf46:	e027      	b.n	800cf98 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800cf48:	f7ff fc18 	bl	800c77c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf4c:	f7fd fda8 	bl	800aaa0 <HAL_GetTick>
 800cf50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cf52:	e008      	b.n	800cf66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cf54:	f7fd fda4 	bl	800aaa0 <HAL_GetTick>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	2b03      	cmp	r3, #3
 800cf60:	d901      	bls.n	800cf66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cf62:	2303      	movs	r3, #3
 800cf64:	e197      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cf66:	f7ff fc1a 	bl	800c79e <LL_RCC_LSI2_IsReady>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1f1      	bne.n	800cf54 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800cf70:	f7ff fbd0 	bl	800c714 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf74:	f7fd fd94 	bl	800aaa0 <HAL_GetTick>
 800cf78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cf7a:	e008      	b.n	800cf8e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cf7c:	f7fd fd90 	bl	800aaa0 <HAL_GetTick>
 800cf80:	4602      	mov	r2, r0
 800cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d901      	bls.n	800cf8e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800cf8a:	2303      	movs	r3, #3
 800cf8c:	e183      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cf8e:	f7ff fbd2 	bl	800c736 <LL_RCC_LSI1_IsReady>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1f1      	bne.n	800cf7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d05b      	beq.n	800d05c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cfa4:	4ba7      	ldr	r3, [pc, #668]	; (800d244 <HAL_RCC_OscConfig+0x688>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d114      	bne.n	800cfda <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cfb0:	f7ff fa70 	bl	800c494 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfb4:	f7fd fd74 	bl	800aaa0 <HAL_GetTick>
 800cfb8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cfba:	e008      	b.n	800cfce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfbc:	f7fd fd70 	bl	800aaa0 <HAL_GetTick>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d901      	bls.n	800cfce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e163      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cfce:	4b9d      	ldr	r3, [pc, #628]	; (800d244 <HAL_RCC_OscConfig+0x688>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0f0      	beq.n	800cfbc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d102      	bne.n	800cfe8 <HAL_RCC_OscConfig+0x42c>
 800cfe2:	f7ff fb30 	bl	800c646 <LL_RCC_LSE_Enable>
 800cfe6:	e00c      	b.n	800d002 <HAL_RCC_OscConfig+0x446>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	2b05      	cmp	r3, #5
 800cfee:	d104      	bne.n	800cffa <HAL_RCC_OscConfig+0x43e>
 800cff0:	f7ff fb4b 	bl	800c68a <LL_RCC_LSE_EnableBypass>
 800cff4:	f7ff fb27 	bl	800c646 <LL_RCC_LSE_Enable>
 800cff8:	e003      	b.n	800d002 <HAL_RCC_OscConfig+0x446>
 800cffa:	f7ff fb35 	bl	800c668 <LL_RCC_LSE_Disable>
 800cffe:	f7ff fb55 	bl	800c6ac <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d014      	beq.n	800d034 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d00a:	f7fd fd49 	bl	800aaa0 <HAL_GetTick>
 800d00e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800d010:	e00a      	b.n	800d028 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d012:	f7fd fd45 	bl	800aaa0 <HAL_GetTick>
 800d016:	4602      	mov	r2, r0
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d020:	4293      	cmp	r3, r2
 800d022:	d901      	bls.n	800d028 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800d024:	2303      	movs	r3, #3
 800d026:	e136      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800d028:	f7ff fb51 	bl	800c6ce <LL_RCC_LSE_IsReady>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0ef      	beq.n	800d012 <HAL_RCC_OscConfig+0x456>
 800d032:	e013      	b.n	800d05c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d034:	f7fd fd34 	bl	800aaa0 <HAL_GetTick>
 800d038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800d03a:	e00a      	b.n	800d052 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d03c:	f7fd fd30 	bl	800aaa0 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	f241 3288 	movw	r2, #5000	; 0x1388
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d901      	bls.n	800d052 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e121      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800d052:	f7ff fb3c 	bl	800c6ce <LL_RCC_LSE_IsReady>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1ef      	bne.n	800d03c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d064:	2b00      	cmp	r3, #0
 800d066:	d02c      	beq.n	800d0c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d014      	beq.n	800d09a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d070:	f7ff fab5 	bl	800c5de <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d074:	f7fd fd14 	bl	800aaa0 <HAL_GetTick>
 800d078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d07a:	e008      	b.n	800d08e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d07c:	f7fd fd10 	bl	800aaa0 <HAL_GetTick>
 800d080:	4602      	mov	r2, r0
 800d082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	2b02      	cmp	r3, #2
 800d088:	d901      	bls.n	800d08e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800d08a:	2303      	movs	r3, #3
 800d08c:	e103      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d08e:	f7ff fac8 	bl	800c622 <LL_RCC_HSI48_IsReady>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d0f1      	beq.n	800d07c <HAL_RCC_OscConfig+0x4c0>
 800d098:	e013      	b.n	800d0c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d09a:	f7ff fab1 	bl	800c600 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d09e:	f7fd fcff 	bl	800aaa0 <HAL_GetTick>
 800d0a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d0a4:	e008      	b.n	800d0b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d0a6:	f7fd fcfb 	bl	800aaa0 <HAL_GetTick>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	1ad3      	subs	r3, r2, r3
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d901      	bls.n	800d0b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	e0ee      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d0b8:	f7ff fab3 	bl	800c622 <LL_RCC_HSI48_IsReady>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1f1      	bne.n	800d0a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 80e4 	beq.w	800d294 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0cc:	f7ff fc11 	bl	800c8f2 <LL_RCC_GetSysClkSource>
 800d0d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800d0d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	f040 80b4 	bne.w	800d24c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f003 0203 	and.w	r2, r3, #3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d123      	bne.n	800d13a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d11c      	bne.n	800d13a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	0a1b      	lsrs	r3, r3, #8
 800d104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d114      	bne.n	800d13a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d10d      	bne.n	800d13a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d128:	429a      	cmp	r2, r3
 800d12a:	d106      	bne.n	800d13a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d136:	429a      	cmp	r2, r3
 800d138:	d05d      	beq.n	800d1f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2b0c      	cmp	r3, #12
 800d13e:	d058      	beq.n	800d1f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e0a1      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d152:	f7ff fc84 	bl	800ca5e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d156:	f7fd fca3 	bl	800aaa0 <HAL_GetTick>
 800d15a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d15c:	e008      	b.n	800d170 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d15e:	f7fd fc9f 	bl	800aaa0 <HAL_GetTick>
 800d162:	4602      	mov	r2, r0
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d901      	bls.n	800d170 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800d16c:	2303      	movs	r3, #3
 800d16e:	e092      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1ef      	bne.n	800d15e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d17e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d182:	68da      	ldr	r2, [r3, #12]
 800d184:	4b30      	ldr	r3, [pc, #192]	; (800d248 <HAL_RCC_OscConfig+0x68c>)
 800d186:	4013      	ands	r3, r2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d190:	4311      	orrs	r1, r2
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d196:	0212      	lsls	r2, r2, #8
 800d198:	4311      	orrs	r1, r2
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d19e:	4311      	orrs	r1, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d1a4:	4311      	orrs	r1, r2
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d1b4:	f7ff fc44 	bl	800ca40 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d1b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d1c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d1c8:	f7fd fc6a 	bl	800aaa0 <HAL_GetTick>
 800d1cc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1ce:	e008      	b.n	800d1e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1d0:	f7fd fc66 	bl	800aaa0 <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d901      	bls.n	800d1e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e059      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d0ef      	beq.n	800d1d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d1f0:	e050      	b.n	800d294 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e04f      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d147      	bne.n	800d294 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d204:	f7ff fc1c 	bl	800ca40 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d218:	f7fd fc42 	bl	800aaa0 <HAL_GetTick>
 800d21c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d21e:	e008      	b.n	800d232 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d220:	f7fd fc3e 	bl	800aaa0 <HAL_GetTick>
 800d224:	4602      	mov	r2, r0
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	2b02      	cmp	r3, #2
 800d22c:	d901      	bls.n	800d232 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800d22e:	2303      	movs	r3, #3
 800d230:	e031      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d0ef      	beq.n	800d220 <HAL_RCC_OscConfig+0x664>
 800d240:	e028      	b.n	800d294 <HAL_RCC_OscConfig+0x6d8>
 800d242:	bf00      	nop
 800d244:	58000400 	.word	0x58000400
 800d248:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2b0c      	cmp	r3, #12
 800d250:	d01e      	beq.n	800d290 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d252:	f7ff fc04 	bl	800ca5e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d256:	f7fd fc23 	bl	800aaa0 <HAL_GetTick>
 800d25a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d25c:	e008      	b.n	800d270 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d25e:	f7fd fc1f 	bl	800aaa0 <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d901      	bls.n	800d270 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e012      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1ef      	bne.n	800d25e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800d27e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d282:	68da      	ldr	r2, [r3, #12]
 800d284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d288:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <HAL_RCC_OscConfig+0x6e4>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	60cb      	str	r3, [r1, #12]
 800d28e:	e001      	b.n	800d294 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	e000      	b.n	800d296 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3734      	adds	r7, #52	; 0x34
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd90      	pop	{r4, r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	eefefffc 	.word	0xeefefffc

0800d2a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d101      	bne.n	800d2b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e12d      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d2b8:	4b98      	ldr	r3, [pc, #608]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0307 	and.w	r3, r3, #7
 800d2c0:	683a      	ldr	r2, [r7, #0]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d91b      	bls.n	800d2fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2c6:	4b95      	ldr	r3, [pc, #596]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f023 0207 	bic.w	r2, r3, #7
 800d2ce:	4993      	ldr	r1, [pc, #588]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2d6:	f7fd fbe3 	bl	800aaa0 <HAL_GetTick>
 800d2da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2dc:	e008      	b.n	800d2f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d2de:	f7fd fbdf 	bl	800aaa0 <HAL_GetTick>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d901      	bls.n	800d2f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	e111      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2f0:	4b8a      	ldr	r3, [pc, #552]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f003 0307 	and.w	r3, r3, #7
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d1ef      	bne.n	800d2de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f003 0302 	and.w	r3, r3, #2
 800d306:	2b00      	cmp	r3, #0
 800d308:	d016      	beq.n	800d338 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff fafb 	bl	800c90a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d314:	f7fd fbc4 	bl	800aaa0 <HAL_GetTick>
 800d318:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d31a:	e008      	b.n	800d32e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d31c:	f7fd fbc0 	bl	800aaa0 <HAL_GetTick>
 800d320:	4602      	mov	r2, r0
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	2b02      	cmp	r3, #2
 800d328:	d901      	bls.n	800d32e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e0f2      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d32e:	f7ff fbe8 	bl	800cb02 <LL_RCC_IsActiveFlag_HPRE>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0f1      	beq.n	800d31c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 0320 	and.w	r3, r3, #32
 800d340:	2b00      	cmp	r3, #0
 800d342:	d016      	beq.n	800d372 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff faf2 	bl	800c932 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d34e:	f7fd fba7 	bl	800aaa0 <HAL_GetTick>
 800d352:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d354:	e008      	b.n	800d368 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d356:	f7fd fba3 	bl	800aaa0 <HAL_GetTick>
 800d35a:	4602      	mov	r2, r0
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	2b02      	cmp	r3, #2
 800d362:	d901      	bls.n	800d368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800d364:	2303      	movs	r3, #3
 800d366:	e0d5      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d368:	f7ff fbdd 	bl	800cb26 <LL_RCC_IsActiveFlag_C2HPRE>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d0f1      	beq.n	800d356 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d016      	beq.n	800d3ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff faeb 	bl	800c95e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d388:	f7fd fb8a 	bl	800aaa0 <HAL_GetTick>
 800d38c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d38e:	e008      	b.n	800d3a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d390:	f7fd fb86 	bl	800aaa0 <HAL_GetTick>
 800d394:	4602      	mov	r2, r0
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d901      	bls.n	800d3a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	e0b8      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d3a2:	f7ff fbd3 	bl	800cb4c <LL_RCC_IsActiveFlag_SHDHPRE>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d0f1      	beq.n	800d390 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d016      	beq.n	800d3e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fae5 	bl	800c98c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d3c2:	f7fd fb6d 	bl	800aaa0 <HAL_GetTick>
 800d3c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d3c8:	e008      	b.n	800d3dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d3ca:	f7fd fb69 	bl	800aaa0 <HAL_GetTick>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d901      	bls.n	800d3dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e09b      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d3dc:	f7ff fbc9 	bl	800cb72 <LL_RCC_IsActiveFlag_PPRE1>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d0f1      	beq.n	800d3ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0308 	and.w	r3, r3, #8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d017      	beq.n	800d422 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	00db      	lsls	r3, r3, #3
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fadb 	bl	800c9b4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d3fe:	f7fd fb4f 	bl	800aaa0 <HAL_GetTick>
 800d402:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d404:	e008      	b.n	800d418 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d406:	f7fd fb4b 	bl	800aaa0 <HAL_GetTick>
 800d40a:	4602      	mov	r2, r0
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	2b02      	cmp	r3, #2
 800d412:	d901      	bls.n	800d418 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800d414:	2303      	movs	r3, #3
 800d416:	e07d      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d418:	f7ff fbbd 	bl	800cb96 <LL_RCC_IsActiveFlag_PPRE2>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d0f1      	beq.n	800d406 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f003 0301 	and.w	r3, r3, #1
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d043      	beq.n	800d4b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	2b02      	cmp	r3, #2
 800d434:	d106      	bne.n	800d444 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800d436:	f7ff f87b 	bl	800c530 <LL_RCC_HSE_IsReady>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d11e      	bne.n	800d47e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d440:	2301      	movs	r3, #1
 800d442:	e067      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	2b03      	cmp	r3, #3
 800d44a:	d106      	bne.n	800d45a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800d44c:	f7ff fb16 	bl	800ca7c <LL_RCC_PLL_IsReady>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d113      	bne.n	800d47e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	e05c      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d106      	bne.n	800d470 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800d462:	f7ff f9e3 	bl	800c82c <LL_RCC_MSI_IsReady>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d108      	bne.n	800d47e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d46c:	2301      	movs	r3, #1
 800d46e:	e051      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800d470:	f7ff f88e 	bl	800c590 <LL_RCC_HSI_IsReady>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e04a      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff fa21 	bl	800c8ca <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d488:	f7fd fb0a 	bl	800aaa0 <HAL_GetTick>
 800d48c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d48e:	e00a      	b.n	800d4a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d490:	f7fd fb06 	bl	800aaa0 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d901      	bls.n	800d4a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e036      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d4a6:	f7ff fa24 	bl	800c8f2 <LL_RCC_GetSysClkSource>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d1ec      	bne.n	800d490 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d4b6:	4b19      	ldr	r3, [pc, #100]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f003 0307 	and.w	r3, r3, #7
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d21b      	bcs.n	800d4fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4c4:	4b15      	ldr	r3, [pc, #84]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f023 0207 	bic.w	r2, r3, #7
 800d4cc:	4913      	ldr	r1, [pc, #76]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4d4:	f7fd fae4 	bl	800aaa0 <HAL_GetTick>
 800d4d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4da:	e008      	b.n	800d4ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d4dc:	f7fd fae0 	bl	800aaa0 <HAL_GetTick>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d901      	bls.n	800d4ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e012      	b.n	800d514 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4ee:	4b0b      	ldr	r3, [pc, #44]	; (800d51c <HAL_RCC_ClockConfig+0x278>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 0307 	and.w	r3, r3, #7
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d1ef      	bne.n	800d4dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d4fc:	f000 f87e 	bl	800d5fc <HAL_RCC_GetHCLKFreq>
 800d500:	4603      	mov	r3, r0
 800d502:	4a07      	ldr	r2, [pc, #28]	; (800d520 <HAL_RCC_ClockConfig+0x27c>)
 800d504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800d506:	f7fd fad7 	bl	800aab8 <HAL_GetTickPrio>
 800d50a:	4603      	mov	r3, r0
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fd fa79 	bl	800aa04 <HAL_InitTick>
 800d512:	4603      	mov	r3, r0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	58004000 	.word	0x58004000
 800d520:	20000008 	.word	0x20000008

0800d524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d52a:	f7ff f9e2 	bl	800c8f2 <LL_RCC_GetSysClkSource>
 800d52e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d536:	f7ff f99e 	bl	800c876 <LL_RCC_MSI_GetRange>
 800d53a:	4603      	mov	r3, r0
 800d53c:	091b      	lsrs	r3, r3, #4
 800d53e:	f003 030f 	and.w	r3, r3, #15
 800d542:	4a2b      	ldr	r2, [pc, #172]	; (800d5f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	e04b      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b04      	cmp	r3, #4
 800d550:	d102      	bne.n	800d558 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d552:	4b28      	ldr	r3, [pc, #160]	; (800d5f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	e045      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b08      	cmp	r3, #8
 800d55c:	d10a      	bne.n	800d574 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d55e:	f7fe ffb7 	bl	800c4d0 <LL_RCC_HSE_IsEnabledDiv2>
 800d562:	4603      	mov	r3, r0
 800d564:	2b01      	cmp	r3, #1
 800d566:	d102      	bne.n	800d56e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d568:	4b22      	ldr	r3, [pc, #136]	; (800d5f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	e03a      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d56e:	4b22      	ldr	r3, [pc, #136]	; (800d5f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d570:	60fb      	str	r3, [r7, #12]
 800d572:	e037      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d574:	f7ff fab9 	bl	800caea <LL_RCC_PLL_GetMainSource>
 800d578:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d003      	beq.n	800d588 <HAL_RCC_GetSysClockFreq+0x64>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	2b03      	cmp	r3, #3
 800d584:	d003      	beq.n	800d58e <HAL_RCC_GetSysClockFreq+0x6a>
 800d586:	e00d      	b.n	800d5a4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d588:	4b1a      	ldr	r3, [pc, #104]	; (800d5f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d58a:	60bb      	str	r3, [r7, #8]
        break;
 800d58c:	e015      	b.n	800d5ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d58e:	f7fe ff9f 	bl	800c4d0 <LL_RCC_HSE_IsEnabledDiv2>
 800d592:	4603      	mov	r3, r0
 800d594:	2b01      	cmp	r3, #1
 800d596:	d102      	bne.n	800d59e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d598:	4b16      	ldr	r3, [pc, #88]	; (800d5f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d59a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d59c:	e00d      	b.n	800d5ba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800d59e:	4b16      	ldr	r3, [pc, #88]	; (800d5f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d5a0:	60bb      	str	r3, [r7, #8]
        break;
 800d5a2:	e00a      	b.n	800d5ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d5a4:	f7ff f967 	bl	800c876 <LL_RCC_MSI_GetRange>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	091b      	lsrs	r3, r3, #4
 800d5ac:	f003 030f 	and.w	r3, r3, #15
 800d5b0:	4a0f      	ldr	r2, [pc, #60]	; (800d5f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5b6:	60bb      	str	r3, [r7, #8]
        break;
 800d5b8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800d5ba:	f7ff fa71 	bl	800caa0 <LL_RCC_PLL_GetN>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	fb03 f402 	mul.w	r4, r3, r2
 800d5c6:	f7ff fa84 	bl	800cad2 <LL_RCC_PLL_GetDivider>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	091b      	lsrs	r3, r3, #4
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	fbb4 f4f3 	udiv	r4, r4, r3
 800d5d4:	f7ff fa71 	bl	800caba <LL_RCC_PLL_GetR>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	0f5b      	lsrs	r3, r3, #29
 800d5dc:	3301      	adds	r3, #1
 800d5de:	fbb4 f3f3 	udiv	r3, r4, r3
 800d5e2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd90      	pop	{r4, r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	080189a4 	.word	0x080189a4
 800d5f4:	00f42400 	.word	0x00f42400
 800d5f8:	01e84800 	.word	0x01e84800

0800d5fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d5fc:	b598      	push	{r3, r4, r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d600:	f7ff ff90 	bl	800d524 <HAL_RCC_GetSysClockFreq>
 800d604:	4604      	mov	r4, r0
 800d606:	f7ff f9e9 	bl	800c9dc <LL_RCC_GetAHBPrescaler>
 800d60a:	4603      	mov	r3, r0
 800d60c:	091b      	lsrs	r3, r3, #4
 800d60e:	f003 030f 	and.w	r3, r3, #15
 800d612:	4a03      	ldr	r2, [pc, #12]	; (800d620 <HAL_RCC_GetHCLKFreq+0x24>)
 800d614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d618:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	bd98      	pop	{r3, r4, r7, pc}
 800d620:	08018944 	.word	0x08018944

0800d624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d624:	b598      	push	{r3, r4, r7, lr}
 800d626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d628:	f7ff ffe8 	bl	800d5fc <HAL_RCC_GetHCLKFreq>
 800d62c:	4604      	mov	r4, r0
 800d62e:	f7ff f9ef 	bl	800ca10 <LL_RCC_GetAPB1Prescaler>
 800d632:	4603      	mov	r3, r0
 800d634:	0a1b      	lsrs	r3, r3, #8
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	4a04      	ldr	r2, [pc, #16]	; (800d64c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d640:	f003 031f 	and.w	r3, r3, #31
 800d644:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d648:	4618      	mov	r0, r3
 800d64a:	bd98      	pop	{r3, r4, r7, pc}
 800d64c:	08018984 	.word	0x08018984

0800d650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d650:	b598      	push	{r3, r4, r7, lr}
 800d652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800d654:	f7ff ffd2 	bl	800d5fc <HAL_RCC_GetHCLKFreq>
 800d658:	4604      	mov	r4, r0
 800d65a:	f7ff f9e5 	bl	800ca28 <LL_RCC_GetAPB2Prescaler>
 800d65e:	4603      	mov	r3, r0
 800d660:	0adb      	lsrs	r3, r3, #11
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	4a04      	ldr	r2, [pc, #16]	; (800d678 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d66c:	f003 031f 	and.w	r3, r3, #31
 800d670:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d674:	4618      	mov	r0, r3
 800d676:	bd98      	pop	{r3, r4, r7, pc}
 800d678:	08018984 	.word	0x08018984

0800d67c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800d67c:	b590      	push	{r4, r7, lr}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2bb0      	cmp	r3, #176	; 0xb0
 800d688:	d903      	bls.n	800d692 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800d68a:	4b15      	ldr	r3, [pc, #84]	; (800d6e0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	e007      	b.n	800d6a2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	091b      	lsrs	r3, r3, #4
 800d696:	f003 030f 	and.w	r3, r3, #15
 800d69a:	4a11      	ldr	r2, [pc, #68]	; (800d6e0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800d6a2:	f7ff f9a7 	bl	800c9f4 <LL_RCC_GetAHB4Prescaler>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	091b      	lsrs	r3, r3, #4
 800d6aa:	f003 030f 	and.w	r3, r3, #15
 800d6ae:	4a0d      	ldr	r2, [pc, #52]	; (800d6e4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800d6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	4a0a      	ldr	r2, [pc, #40]	; (800d6e8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800d6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c4:	0c9c      	lsrs	r4, r3, #18
 800d6c6:	f7fe fef5 	bl	800c4b4 <HAL_PWREx_GetVoltageRange>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 f80c 	bl	800d6ec <RCC_SetFlashLatency>
 800d6d4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd90      	pop	{r4, r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	080189a4 	.word	0x080189a4
 800d6e4:	08018944 	.word	0x08018944
 800d6e8:	431bde83 	.word	0x431bde83

0800d6ec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b093      	sub	sp, #76	; 0x4c
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800d6f6:	4b37      	ldr	r3, [pc, #220]	; (800d7d4 <RCC_SetFlashLatency+0xe8>)
 800d6f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d6fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d6fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800d702:	4a35      	ldr	r2, [pc, #212]	; (800d7d8 <RCC_SetFlashLatency+0xec>)
 800d704:	f107 031c 	add.w	r3, r7, #28
 800d708:	ca07      	ldmia	r2, {r0, r1, r2}
 800d70a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800d70e:	4b33      	ldr	r3, [pc, #204]	; (800d7dc <RCC_SetFlashLatency+0xf0>)
 800d710:	f107 040c 	add.w	r4, r7, #12
 800d714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d71a:	2300      	movs	r3, #0
 800d71c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d724:	d11a      	bne.n	800d75c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d726:	2300      	movs	r3, #0
 800d728:	643b      	str	r3, [r7, #64]	; 0x40
 800d72a:	e013      	b.n	800d754 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	3348      	adds	r3, #72	; 0x48
 800d732:	443b      	add	r3, r7
 800d734:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d807      	bhi.n	800d74e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	3348      	adds	r3, #72	; 0x48
 800d744:	443b      	add	r3, r7
 800d746:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d74a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d74c:	e020      	b.n	800d790 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d750:	3301      	adds	r3, #1
 800d752:	643b      	str	r3, [r7, #64]	; 0x40
 800d754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d756:	2b03      	cmp	r3, #3
 800d758:	d9e8      	bls.n	800d72c <RCC_SetFlashLatency+0x40>
 800d75a:	e019      	b.n	800d790 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d75c:	2300      	movs	r3, #0
 800d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d760:	e013      	b.n	800d78a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	3348      	adds	r3, #72	; 0x48
 800d768:	443b      	add	r3, r7
 800d76a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d807      	bhi.n	800d784 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	3348      	adds	r3, #72	; 0x48
 800d77a:	443b      	add	r3, r7
 800d77c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d780:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d782:	e005      	b.n	800d790 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d786:	3301      	adds	r3, #1
 800d788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d9e8      	bls.n	800d762 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800d790:	4b13      	ldr	r3, [pc, #76]	; (800d7e0 <RCC_SetFlashLatency+0xf4>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f023 0207 	bic.w	r2, r3, #7
 800d798:	4911      	ldr	r1, [pc, #68]	; (800d7e0 <RCC_SetFlashLatency+0xf4>)
 800d79a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d79c:	4313      	orrs	r3, r2
 800d79e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d7a0:	f7fd f97e 	bl	800aaa0 <HAL_GetTick>
 800d7a4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d7a6:	e008      	b.n	800d7ba <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d7a8:	f7fd f97a 	bl	800aaa0 <HAL_GetTick>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d901      	bls.n	800d7ba <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	e007      	b.n	800d7ca <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d7ba:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <RCC_SetFlashLatency+0xf4>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d1ef      	bne.n	800d7a8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	374c      	adds	r7, #76	; 0x4c
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd90      	pop	{r4, r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	08017590 	.word	0x08017590
 800d7d8:	080175a0 	.word	0x080175a0
 800d7dc:	080175ac 	.word	0x080175ac
 800d7e0:	58004000 	.word	0x58004000

0800d7e4 <LL_RCC_LSE_IsEnabled>:
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d7e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d101      	bne.n	800d7fc <LL_RCC_LSE_IsEnabled+0x18>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e000      	b.n	800d7fe <LL_RCC_LSE_IsEnabled+0x1a>
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <LL_RCC_LSE_IsReady>:
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d80c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d814:	f003 0302 	and.w	r3, r3, #2
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d101      	bne.n	800d820 <LL_RCC_LSE_IsReady+0x18>
 800d81c:	2301      	movs	r3, #1
 800d81e:	e000      	b.n	800d822 <LL_RCC_LSE_IsReady+0x1a>
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <LL_RCC_SetRFWKPClockSource>:
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d83c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4313      	orrs	r3, r2
 800d848:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <LL_RCC_SetSMPSClockSource>:
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d866:	f023 0203 	bic.w	r2, r3, #3
 800d86a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4313      	orrs	r3, r2
 800d872:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <LL_RCC_SetSMPSPrescaler>:
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4313      	orrs	r3, r2
 800d89a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <LL_RCC_SetUSARTClockSource>:
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d8b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8b8:	f023 0203 	bic.w	r2, r3, #3
 800d8bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <LL_RCC_SetLPUARTClockSource>:
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d8e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d8f4:	bf00      	nop
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <LL_RCC_SetI2CClockSource>:
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d90c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	091b      	lsrs	r3, r3, #4
 800d914:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d918:	43db      	mvns	r3, r3
 800d91a:	401a      	ands	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	011b      	lsls	r3, r3, #4
 800d920:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d928:	4313      	orrs	r3, r2
 800d92a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <LL_RCC_SetLPTIMClockSource>:
{
 800d93a:	b480      	push	{r7}
 800d93c:	b083      	sub	sp, #12
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	0c1b      	lsrs	r3, r3, #16
 800d94e:	041b      	lsls	r3, r3, #16
 800d950:	43db      	mvns	r3, r3
 800d952:	401a      	ands	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	041b      	lsls	r3, r3, #16
 800d958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d95c:	4313      	orrs	r3, r2
 800d95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d962:	bf00      	nop
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <LL_RCC_SetSAIClockSource>:
{
 800d96e:	b480      	push	{r7}
 800d970:	b083      	sub	sp, #12
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d97e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4313      	orrs	r3, r2
 800d98a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d98e:	bf00      	nop
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr

0800d99a <LL_RCC_SetRNGClockSource>:
{
 800d99a:	b480      	push	{r7}
 800d99c:	b083      	sub	sp, #12
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d9a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9aa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d9ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d9ba:	bf00      	nop
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <LL_RCC_SetCLK48ClockSource>:
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d9ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d9da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d9e6:	bf00      	nop
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <LL_RCC_SetUSBClockSource>:
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b082      	sub	sp, #8
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff ffe3 	bl	800d9c6 <LL_RCC_SetCLK48ClockSource>
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <LL_RCC_SetADCClockSource>:
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800da10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800da1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4313      	orrs	r3, r2
 800da24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800da28:	bf00      	nop
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <LL_RCC_SetRTCClockSource>:
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800da3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4313      	orrs	r3, r2
 800da50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <LL_RCC_GetRTCClockSource>:
{
 800da60:	b480      	push	{r7}
 800da62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800da64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800da70:	4618      	mov	r0, r3
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <LL_RCC_ForceBackupDomainReset>:
{
 800da7a:	b480      	push	{r7}
 800da7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800da7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800da8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800da92:	bf00      	nop
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <LL_RCC_ReleaseBackupDomainReset>:
{
 800da9c:	b480      	push	{r7}
 800da9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800daa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800daa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800daac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dab4:	bf00      	nop
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <LL_RCC_PLLSAI1_Enable>:
{
 800dabe:	b480      	push	{r7}
 800dac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800dac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dacc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dad0:	6013      	str	r3, [r2, #0]
}
 800dad2:	bf00      	nop
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <LL_RCC_PLLSAI1_Disable>:
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800dae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800daea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800daee:	6013      	str	r3, [r2, #0]
}
 800daf0:	bf00      	nop
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <LL_RCC_PLLSAI1_IsReady>:
{
 800dafa:	b480      	push	{r7}
 800dafc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800dafe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db0c:	d101      	bne.n	800db12 <LL_RCC_PLLSAI1_IsReady+0x18>
 800db0e:	2301      	movs	r3, #1
 800db10:	e000      	b.n	800db14 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b088      	sub	sp, #32
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800db26:	2300      	movs	r3, #0
 800db28:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800db2a:	2300      	movs	r3, #0
 800db2c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db36:	2b00      	cmp	r3, #0
 800db38:	d034      	beq.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800db42:	d021      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800db44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800db48:	d81b      	bhi.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800db4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db4e:	d01d      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800db50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db54:	d815      	bhi.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00b      	beq.n	800db72 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800db5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db5e:	d110      	bne.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800db60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db6e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800db70:	e00d      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	3304      	adds	r3, #4
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f947 	bl	800de0a <RCCEx_PLLSAI1_ConfigNP>
 800db7c:	4603      	mov	r3, r0
 800db7e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800db80:	e005      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800db82:	2301      	movs	r3, #1
 800db84:	77fb      	strb	r3, [r7, #31]
        break;
 800db86:	e002      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800db88:	bf00      	nop
 800db8a:	e000      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800db8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db8e:	7ffb      	ldrb	r3, [r7, #31]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d105      	bne.n	800dba0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fee8 	bl	800d96e <LL_RCC_SetSAIClockSource>
 800db9e:	e001      	b.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dba0:	7ffb      	ldrb	r3, [r7, #31]
 800dba2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d046      	beq.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800dbb0:	f7ff ff56 	bl	800da60 <LL_RCC_GetRTCClockSource>
 800dbb4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d03c      	beq.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800dbc0:	f7fe fc68 	bl	800c494 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d105      	bne.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff ff30 	bl	800da34 <LL_RCC_SetRTCClockSource>
 800dbd4:	e02e      	b.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800dbd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbde:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800dbe0:	f7ff ff4b 	bl	800da7a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800dbe4:	f7ff ff5a 	bl	800da9c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800dbf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800dc00:	f7ff fdf0 	bl	800d7e4 <LL_RCC_LSE_IsEnabled>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d114      	bne.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dc0a:	f7fc ff49 	bl	800aaa0 <HAL_GetTick>
 800dc0e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800dc10:	e00b      	b.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc12:	f7fc ff45 	bl	800aaa0 <HAL_GetTick>
 800dc16:	4602      	mov	r2, r0
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d902      	bls.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800dc24:	2303      	movs	r3, #3
 800dc26:	77fb      	strb	r3, [r7, #31]
              break;
 800dc28:	e004      	b.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800dc2a:	f7ff fded 	bl	800d808 <LL_RCC_LSE_IsReady>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d1ee      	bne.n	800dc12 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800dc34:	7ffb      	ldrb	r3, [r7, #31]
 800dc36:	77bb      	strb	r3, [r7, #30]
 800dc38:	e001      	b.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc3a:	7ffb      	ldrb	r3, [r7, #31]
 800dc3c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 0301 	and.w	r3, r3, #1
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d004      	beq.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fe2a 	bl	800d8a8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 0302 	and.w	r3, r3, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	69db      	ldr	r3, [r3, #28]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7ff fe35 	bl	800d8d4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 0310 	and.w	r3, r3, #16
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7ff fe5d 	bl	800d93a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f003 0320 	and.w	r3, r3, #32
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d004      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7ff fe52 	bl	800d93a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f003 0304 	and.w	r3, r3, #4
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d004      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a1b      	ldr	r3, [r3, #32]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fe2a 	bl	800d900 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 0308 	and.w	r3, r3, #8
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff fe1f 	bl	800d900 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d022      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff fe8d 	bl	800d9f2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dce0:	d107      	bne.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800dce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dcec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dcf0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dcfa:	d10b      	bne.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3304      	adds	r3, #4
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 f8dd 	bl	800dec0 <RCCEx_PLLSAI1_ConfigNQ>
 800dd06:	4603      	mov	r3, r0
 800dd08:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800dd0a:	7ffb      	ldrb	r3, [r7, #31]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800dd10:	7ffb      	ldrb	r3, [r7, #31]
 800dd12:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d02b      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd28:	d008      	beq.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd32:	d003      	beq.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d105      	bne.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fe2a 	bl	800d99a <LL_RCC_SetRNGClockSource>
 800dd46:	e00a      	b.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x240>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	2000      	movs	r0, #0
 800dd54:	f7ff fe21 	bl	800d99a <LL_RCC_SetRNGClockSource>
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f7ff fe34 	bl	800d9c6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800dd66:	d107      	bne.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800dd68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dd72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dd76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d022      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff fe3d 	bl	800da08 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd96:	d107      	bne.n	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dd98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dda2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dda6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ddb0:	d10b      	bne.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 f8dd 	bl	800df76 <RCCEx_PLLSAI1_ConfigNR>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ddc0:	7ffb      	ldrb	r3, [r7, #31]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ddc6:	7ffb      	ldrb	r3, [r7, #31]
 800ddc8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d004      	beq.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7ff fd26 	bl	800d82c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d009      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff fd45 	bl	800d880 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7ff fd2c 	bl	800d858 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800de00:	7fbb      	ldrb	r3, [r7, #30]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3720      	adds	r7, #32
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b084      	sub	sp, #16
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800de16:	f7ff fe61 	bl	800dadc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de1a:	f7fc fe41 	bl	800aaa0 <HAL_GetTick>
 800de1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800de20:	e009      	b.n	800de36 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800de22:	f7fc fe3d 	bl	800aaa0 <HAL_GetTick>
 800de26:	4602      	mov	r2, r0
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d902      	bls.n	800de36 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800de30:	2303      	movs	r3, #3
 800de32:	73fb      	strb	r3, [r7, #15]
      break;
 800de34:	e004      	b.n	800de40 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800de36:	f7ff fe60 	bl	800dafa <LL_RCC_PLLSAI1_IsReady>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1f0      	bne.n	800de22 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800de40:	7bfb      	ldrb	r3, [r7, #15]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d137      	bne.n	800deb6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800de46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	021b      	lsls	r3, r3, #8
 800de56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de5a:	4313      	orrs	r3, r2
 800de5c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800de5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de70:	4313      	orrs	r3, r2
 800de72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800de74:	f7ff fe23 	bl	800dabe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de78:	f7fc fe12 	bl	800aaa0 <HAL_GetTick>
 800de7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800de7e:	e009      	b.n	800de94 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800de80:	f7fc fe0e 	bl	800aaa0 <HAL_GetTick>
 800de84:	4602      	mov	r2, r0
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d902      	bls.n	800de94 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	73fb      	strb	r3, [r7, #15]
        break;
 800de92:	e004      	b.n	800de9e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800de94:	f7ff fe31 	bl	800dafa <LL_RCC_PLLSAI1_IsReady>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d1f0      	bne.n	800de80 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d108      	bne.n	800deb6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dea8:	691a      	ldr	r2, [r3, #16]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800deb2:	4313      	orrs	r3, r2
 800deb4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800decc:	f7ff fe06 	bl	800dadc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ded0:	f7fc fde6 	bl	800aaa0 <HAL_GetTick>
 800ded4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ded6:	e009      	b.n	800deec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ded8:	f7fc fde2 	bl	800aaa0 <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d902      	bls.n	800deec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	73fb      	strb	r3, [r7, #15]
      break;
 800deea:	e004      	b.n	800def6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800deec:	f7ff fe05 	bl	800dafa <LL_RCC_PLLSAI1_IsReady>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1f0      	bne.n	800ded8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800def6:	7bfb      	ldrb	r3, [r7, #15]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d137      	bne.n	800df6c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800defc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	021b      	lsls	r3, r3, #8
 800df0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df10:	4313      	orrs	r3, r2
 800df12:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800df14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df26:	4313      	orrs	r3, r2
 800df28:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800df2a:	f7ff fdc8 	bl	800dabe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df2e:	f7fc fdb7 	bl	800aaa0 <HAL_GetTick>
 800df32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800df34:	e009      	b.n	800df4a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800df36:	f7fc fdb3 	bl	800aaa0 <HAL_GetTick>
 800df3a:	4602      	mov	r2, r0
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	2b02      	cmp	r3, #2
 800df42:	d902      	bls.n	800df4a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800df44:	2303      	movs	r3, #3
 800df46:	73fb      	strb	r3, [r7, #15]
        break;
 800df48:	e004      	b.n	800df54 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800df4a:	f7ff fdd6 	bl	800dafa <LL_RCC_PLLSAI1_IsReady>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b01      	cmp	r3, #1
 800df52:	d1f0      	bne.n	800df36 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d108      	bne.n	800df6c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800df5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df5e:	691a      	ldr	r2, [r3, #16]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df68:	4313      	orrs	r3, r2
 800df6a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800df82:	f7ff fdab 	bl	800dadc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800df86:	f7fc fd8b 	bl	800aaa0 <HAL_GetTick>
 800df8a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800df8c:	e009      	b.n	800dfa2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800df8e:	f7fc fd87 	bl	800aaa0 <HAL_GetTick>
 800df92:	4602      	mov	r2, r0
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d902      	bls.n	800dfa2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800df9c:	2303      	movs	r3, #3
 800df9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa0:	e004      	b.n	800dfac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dfa2:	f7ff fdaa 	bl	800dafa <LL_RCC_PLLSAI1_IsReady>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1f0      	bne.n	800df8e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d137      	bne.n	800e022 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800dfb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	021b      	lsls	r3, r3, #8
 800dfc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800dfca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dfe0:	f7ff fd6d 	bl	800dabe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfe4:	f7fc fd5c 	bl	800aaa0 <HAL_GetTick>
 800dfe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dfea:	e009      	b.n	800e000 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dfec:	f7fc fd58 	bl	800aaa0 <HAL_GetTick>
 800dff0:	4602      	mov	r2, r0
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	1ad3      	subs	r3, r2, r3
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d902      	bls.n	800e000 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800dffa:	2303      	movs	r3, #3
 800dffc:	73fb      	strb	r3, [r7, #15]
        break;
 800dffe:	e004      	b.n	800e00a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e000:	f7ff fd7b 	bl	800dafa <LL_RCC_PLLSAI1_IsReady>
 800e004:	4603      	mov	r3, r0
 800e006:	2b01      	cmp	r3, #1
 800e008:	d1f0      	bne.n	800dfec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d108      	bne.n	800e022 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e014:	691a      	ldr	r2, [r3, #16]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e01e:	4313      	orrs	r3, r2
 800e020:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e022:	7bfb      	ldrb	r3, [r7, #15]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e09f      	b.n	800e17e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d106      	bne.n	800e058 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7f4 fd4c 	bl	8002af0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2202      	movs	r2, #2
 800e05c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e060:	4b49      	ldr	r3, [pc, #292]	; (800e188 <HAL_RTC_Init+0x15c>)
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	f003 0310 	and.w	r3, r3, #16
 800e068:	2b10      	cmp	r3, #16
 800e06a:	d07e      	beq.n	800e16a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	22ca      	movs	r2, #202	; 0xca
 800e072:	625a      	str	r2, [r3, #36]	; 0x24
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2253      	movs	r2, #83	; 0x53
 800e07a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 f8ab 	bl	800e1d8 <RTC_EnterInitMode>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00a      	beq.n	800e09e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	22ff      	movs	r2, #255	; 0xff
 800e08e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2204      	movs	r2, #4
 800e094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	73fb      	strb	r3, [r7, #15]
 800e09c:	e067      	b.n	800e16e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	6812      	ldr	r2, [r2, #0]
 800e0a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0b0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	6899      	ldr	r1, [r3, #8]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	431a      	orrs	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	431a      	orrs	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	68d2      	ldr	r2, [r2, #12]
 800e0d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6919      	ldr	r1, [r3, #16]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	041a      	lsls	r2, r3, #16
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	430a      	orrs	r2, r1
 800e0ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68da      	ldr	r2, [r3, #12]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e0fc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 0203 	bic.w	r2, r2, #3
 800e10c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	69da      	ldr	r2, [r3, #28]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	431a      	orrs	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	430a      	orrs	r2, r1
 800e124:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f003 0320 	and.w	r3, r3, #32
 800e130:	2b00      	cmp	r3, #0
 800e132:	d113      	bne.n	800e15c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f829 	bl	800e18c <HAL_RTC_WaitForSynchro>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00d      	beq.n	800e15c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	22ff      	movs	r2, #255	; 0xff
 800e146:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2204      	movs	r2, #4
 800e14c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800e158:	2301      	movs	r3, #1
 800e15a:	e010      	b.n	800e17e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	22ff      	movs	r2, #255	; 0xff
 800e162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	73fb      	strb	r3, [r7, #15]
 800e168:	e001      	b.n	800e16e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800e16e:	7bfb      	ldrb	r3, [r7, #15]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d103      	bne.n	800e17c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	40002800 	.word	0x40002800

0800e18c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68da      	ldr	r2, [r3, #12]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e1a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e1a4:	f7fc fc7c 	bl	800aaa0 <HAL_GetTick>
 800e1a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e1aa:	e009      	b.n	800e1c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e1ac:	f7fc fc78 	bl	800aaa0 <HAL_GetTick>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1ba:	d901      	bls.n	800e1c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e007      	b.n	800e1d0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	f003 0320 	and.w	r3, r3, #32
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d0ee      	beq.n	800e1ac <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d119      	bne.n	800e222 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e1f8:	f7fc fc52 	bl	800aaa0 <HAL_GetTick>
 800e1fc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e1fe:	e009      	b.n	800e214 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e200:	f7fc fc4e 	bl	800aaa0 <HAL_GetTick>
 800e204:	4602      	mov	r2, r0
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e20e:	d901      	bls.n	800e214 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800e210:	2303      	movs	r3, #3
 800e212:	e007      	b.n	800e224 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d0ee      	beq.n	800e200 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d101      	bne.n	800e246 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800e242:	2302      	movs	r3, #2
 800e244:	e0a8      	b.n	800e398 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2201      	movs	r2, #1
 800e24a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2202      	movs	r2, #2
 800e252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	22ca      	movs	r2, #202	; 0xca
 800e25c:	625a      	str	r2, [r3, #36]	; 0x24
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2253      	movs	r2, #83	; 0x53
 800e264:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e270:	2b00      	cmp	r3, #0
 800e272:	d020      	beq.n	800e2b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800e274:	f7fc fc14 	bl	800aaa0 <HAL_GetTick>
 800e278:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800e27a:	e015      	b.n	800e2a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e27c:	f7fc fc10 	bl	800aaa0 <HAL_GetTick>
 800e280:	4602      	mov	r2, r0
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e28a:	d90d      	bls.n	800e2a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	22ff      	movs	r2, #255	; 0xff
 800e292:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2203      	movs	r2, #3
 800e298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	e077      	b.n	800e398 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	f003 0304 	and.w	r3, r3, #4
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1e2      	bne.n	800e27c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	689a      	ldr	r2, [r3, #8]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2c4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800e2d6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e2d8:	f7fc fbe2 	bl	800aaa0 <HAL_GetTick>
 800e2dc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e2de:	e015      	b.n	800e30c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e2e0:	f7fc fbde 	bl	800aaa0 <HAL_GetTick>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2ee:	d90d      	bls.n	800e30c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	22ff      	movs	r2, #255	; 0xff
 800e2f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2203      	movs	r2, #3
 800e2fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800e308:	2303      	movs	r3, #3
 800e30a:	e045      	b.n	800e398 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f003 0304 	and.w	r3, r3, #4
 800e316:	2b00      	cmp	r3, #0
 800e318:	d0e2      	beq.n	800e2e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	689a      	ldr	r2, [r3, #8]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f022 0207 	bic.w	r2, r2, #7
 800e330:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6899      	ldr	r1, [r3, #8]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	430a      	orrs	r2, r1
 800e340:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e342:	4b17      	ldr	r3, [pc, #92]	; (800e3a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e348:	4a15      	ldr	r2, [pc, #84]	; (800e3a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e34a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e34e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800e352:	4b13      	ldr	r3, [pc, #76]	; (800e3a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a12      	ldr	r2, [pc, #72]	; (800e3a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e35c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	689a      	ldr	r2, [r3, #8]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e36c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	689a      	ldr	r2, [r3, #8]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e37c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	22ff      	movs	r2, #255	; 0xff
 800e384:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	58000800 	.word	0x58000800

0800e3a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e049      	b.n	800e44a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7f4 fbc4 	bl	8002b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f000 fa94 	bl	800e910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b01      	cmp	r3, #1
 800e466:	d001      	beq.n	800e46c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e468:	2301      	movs	r3, #1
 800e46a:	e036      	b.n	800e4da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2202      	movs	r2, #2
 800e470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f042 0201 	orr.w	r2, r2, #1
 800e482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a17      	ldr	r2, [pc, #92]	; (800e4e8 <HAL_TIM_Base_Start_IT+0x94>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d004      	beq.n	800e498 <HAL_TIM_Base_Start_IT+0x44>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e496:	d115      	bne.n	800e4c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	689a      	ldr	r2, [r3, #8]
 800e49e:	4b13      	ldr	r3, [pc, #76]	; (800e4ec <HAL_TIM_Base_Start_IT+0x98>)
 800e4a0:	4013      	ands	r3, r2
 800e4a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b06      	cmp	r3, #6
 800e4a8:	d015      	beq.n	800e4d6 <HAL_TIM_Base_Start_IT+0x82>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4b0:	d011      	beq.n	800e4d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f042 0201 	orr.w	r2, r2, #1
 800e4c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4c2:	e008      	b.n	800e4d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f042 0201 	orr.w	r2, r2, #1
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	e000      	b.n	800e4d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3714      	adds	r7, #20
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	40012c00 	.word	0x40012c00
 800e4ec:	00010007 	.word	0x00010007

0800e4f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	f003 0302 	and.w	r3, r3, #2
 800e502:	2b02      	cmp	r3, #2
 800e504:	d122      	bne.n	800e54c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b02      	cmp	r3, #2
 800e512:	d11b      	bne.n	800e54c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f06f 0202 	mvn.w	r2, #2
 800e51c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d003      	beq.n	800e53a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f9ce 	bl	800e8d4 <HAL_TIM_IC_CaptureCallback>
 800e538:	e005      	b.n	800e546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f9c0 	bl	800e8c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f9d1 	bl	800e8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	f003 0304 	and.w	r3, r3, #4
 800e556:	2b04      	cmp	r3, #4
 800e558:	d122      	bne.n	800e5a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f003 0304 	and.w	r3, r3, #4
 800e564:	2b04      	cmp	r3, #4
 800e566:	d11b      	bne.n	800e5a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f06f 0204 	mvn.w	r2, #4
 800e570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2202      	movs	r2, #2
 800e576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	699b      	ldr	r3, [r3, #24]
 800e57e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e582:	2b00      	cmp	r3, #0
 800e584:	d003      	beq.n	800e58e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f9a4 	bl	800e8d4 <HAL_TIM_IC_CaptureCallback>
 800e58c:	e005      	b.n	800e59a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f996 	bl	800e8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f9a7 	bl	800e8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	f003 0308 	and.w	r3, r3, #8
 800e5aa:	2b08      	cmp	r3, #8
 800e5ac:	d122      	bne.n	800e5f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	f003 0308 	and.w	r3, r3, #8
 800e5b8:	2b08      	cmp	r3, #8
 800e5ba:	d11b      	bne.n	800e5f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f06f 0208 	mvn.w	r2, #8
 800e5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2204      	movs	r2, #4
 800e5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	69db      	ldr	r3, [r3, #28]
 800e5d2:	f003 0303 	and.w	r3, r3, #3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f97a 	bl	800e8d4 <HAL_TIM_IC_CaptureCallback>
 800e5e0:	e005      	b.n	800e5ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f96c 	bl	800e8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f97d 	bl	800e8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	f003 0310 	and.w	r3, r3, #16
 800e5fe:	2b10      	cmp	r3, #16
 800e600:	d122      	bne.n	800e648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	f003 0310 	and.w	r3, r3, #16
 800e60c:	2b10      	cmp	r3, #16
 800e60e:	d11b      	bne.n	800e648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f06f 0210 	mvn.w	r2, #16
 800e618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2208      	movs	r2, #8
 800e61e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	69db      	ldr	r3, [r3, #28]
 800e626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d003      	beq.n	800e636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 f950 	bl	800e8d4 <HAL_TIM_IC_CaptureCallback>
 800e634:	e005      	b.n	800e642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f942 	bl	800e8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 f953 	bl	800e8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	2b01      	cmp	r3, #1
 800e654:	d10e      	bne.n	800e674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b01      	cmp	r3, #1
 800e662:	d107      	bne.n	800e674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f06f 0201 	mvn.w	r2, #1
 800e66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f004 fb9a 	bl	8012da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e67e:	2b80      	cmp	r3, #128	; 0x80
 800e680:	d10e      	bne.n	800e6a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e68c:	2b80      	cmp	r3, #128	; 0x80
 800e68e:	d107      	bne.n	800e6a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 faa2 	bl	800ebe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ae:	d10e      	bne.n	800e6ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ba:	2b80      	cmp	r3, #128	; 0x80
 800e6bc:	d107      	bne.n	800e6ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 fa95 	bl	800ebf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6d8:	2b40      	cmp	r3, #64	; 0x40
 800e6da:	d10e      	bne.n	800e6fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e6:	2b40      	cmp	r3, #64	; 0x40
 800e6e8:	d107      	bne.n	800e6fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f901 	bl	800e8fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	f003 0320 	and.w	r3, r3, #32
 800e704:	2b20      	cmp	r3, #32
 800e706:	d10e      	bne.n	800e726 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	f003 0320 	and.w	r3, r3, #32
 800e712:	2b20      	cmp	r3, #32
 800e714:	d107      	bne.n	800e726 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f06f 0220 	mvn.w	r2, #32
 800e71e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 fa55 	bl	800ebd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e726:	bf00      	nop
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e742:	2b01      	cmp	r3, #1
 800e744:	d101      	bne.n	800e74a <HAL_TIM_ConfigClockSource+0x1c>
 800e746:	2302      	movs	r3, #2
 800e748:	e0b6      	b.n	800e8b8 <HAL_TIM_ConfigClockSource+0x18a>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2201      	movs	r2, #1
 800e74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2202      	movs	r2, #2
 800e756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e768:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e76c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e774:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e786:	d03e      	beq.n	800e806 <HAL_TIM_ConfigClockSource+0xd8>
 800e788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e78c:	f200 8087 	bhi.w	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e794:	f000 8086 	beq.w	800e8a4 <HAL_TIM_ConfigClockSource+0x176>
 800e798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e79c:	d87f      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e79e:	2b70      	cmp	r3, #112	; 0x70
 800e7a0:	d01a      	beq.n	800e7d8 <HAL_TIM_ConfigClockSource+0xaa>
 800e7a2:	2b70      	cmp	r3, #112	; 0x70
 800e7a4:	d87b      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e7a6:	2b60      	cmp	r3, #96	; 0x60
 800e7a8:	d050      	beq.n	800e84c <HAL_TIM_ConfigClockSource+0x11e>
 800e7aa:	2b60      	cmp	r3, #96	; 0x60
 800e7ac:	d877      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e7ae:	2b50      	cmp	r3, #80	; 0x50
 800e7b0:	d03c      	beq.n	800e82c <HAL_TIM_ConfigClockSource+0xfe>
 800e7b2:	2b50      	cmp	r3, #80	; 0x50
 800e7b4:	d873      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e7b6:	2b40      	cmp	r3, #64	; 0x40
 800e7b8:	d058      	beq.n	800e86c <HAL_TIM_ConfigClockSource+0x13e>
 800e7ba:	2b40      	cmp	r3, #64	; 0x40
 800e7bc:	d86f      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e7be:	2b30      	cmp	r3, #48	; 0x30
 800e7c0:	d064      	beq.n	800e88c <HAL_TIM_ConfigClockSource+0x15e>
 800e7c2:	2b30      	cmp	r3, #48	; 0x30
 800e7c4:	d86b      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e7c6:	2b20      	cmp	r3, #32
 800e7c8:	d060      	beq.n	800e88c <HAL_TIM_ConfigClockSource+0x15e>
 800e7ca:	2b20      	cmp	r3, #32
 800e7cc:	d867      	bhi.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d05c      	beq.n	800e88c <HAL_TIM_ConfigClockSource+0x15e>
 800e7d2:	2b10      	cmp	r3, #16
 800e7d4:	d05a      	beq.n	800e88c <HAL_TIM_ConfigClockSource+0x15e>
 800e7d6:	e062      	b.n	800e89e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6818      	ldr	r0, [r3, #0]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	6899      	ldr	r1, [r3, #8]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	f000 f972 	bl	800ead0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e7fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	609a      	str	r2, [r3, #8]
      break;
 800e804:	e04f      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6818      	ldr	r0, [r3, #0]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	6899      	ldr	r1, [r3, #8]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	f000 f95b 	bl	800ead0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	689a      	ldr	r2, [r3, #8]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e828:	609a      	str	r2, [r3, #8]
      break;
 800e82a:	e03c      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6818      	ldr	r0, [r3, #0]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	6859      	ldr	r1, [r3, #4]
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	461a      	mov	r2, r3
 800e83a:	f000 f8cd 	bl	800e9d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2150      	movs	r1, #80	; 0x50
 800e844:	4618      	mov	r0, r3
 800e846:	f000 f926 	bl	800ea96 <TIM_ITRx_SetConfig>
      break;
 800e84a:	e02c      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	6859      	ldr	r1, [r3, #4]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	461a      	mov	r2, r3
 800e85a:	f000 f8ec 	bl	800ea36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2160      	movs	r1, #96	; 0x60
 800e864:	4618      	mov	r0, r3
 800e866:	f000 f916 	bl	800ea96 <TIM_ITRx_SetConfig>
      break;
 800e86a:	e01c      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6818      	ldr	r0, [r3, #0]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	6859      	ldr	r1, [r3, #4]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	461a      	mov	r2, r3
 800e87a:	f000 f8ad 	bl	800e9d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2140      	movs	r1, #64	; 0x40
 800e884:	4618      	mov	r0, r3
 800e886:	f000 f906 	bl	800ea96 <TIM_ITRx_SetConfig>
      break;
 800e88a:	e00c      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4619      	mov	r1, r3
 800e896:	4610      	mov	r0, r2
 800e898:	f000 f8fd 	bl	800ea96 <TIM_ITRx_SetConfig>
      break;
 800e89c:	e003      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a2:	e000      	b.n	800e8a6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e8a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a2a      	ldr	r2, [pc, #168]	; (800e9cc <TIM_Base_SetConfig+0xbc>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d003      	beq.n	800e930 <TIM_Base_SetConfig+0x20>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e92e:	d108      	bne.n	800e942 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	4313      	orrs	r3, r2
 800e940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4a21      	ldr	r2, [pc, #132]	; (800e9cc <TIM_Base_SetConfig+0xbc>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d00b      	beq.n	800e962 <TIM_Base_SetConfig+0x52>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e950:	d007      	beq.n	800e962 <TIM_Base_SetConfig+0x52>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a1e      	ldr	r2, [pc, #120]	; (800e9d0 <TIM_Base_SetConfig+0xc0>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d003      	beq.n	800e962 <TIM_Base_SetConfig+0x52>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a1d      	ldr	r2, [pc, #116]	; (800e9d4 <TIM_Base_SetConfig+0xc4>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d108      	bne.n	800e974 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	4313      	orrs	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	695b      	ldr	r3, [r3, #20]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	689a      	ldr	r2, [r3, #8]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4a0c      	ldr	r2, [pc, #48]	; (800e9cc <TIM_Base_SetConfig+0xbc>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d007      	beq.n	800e9b0 <TIM_Base_SetConfig+0xa0>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4a0b      	ldr	r2, [pc, #44]	; (800e9d0 <TIM_Base_SetConfig+0xc0>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d003      	beq.n	800e9b0 <TIM_Base_SetConfig+0xa0>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a0a      	ldr	r2, [pc, #40]	; (800e9d4 <TIM_Base_SetConfig+0xc4>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d103      	bne.n	800e9b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	691a      	ldr	r2, [r3, #16]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	615a      	str	r2, [r3, #20]
}
 800e9be:	bf00      	nop
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	40012c00 	.word	0x40012c00
 800e9d0:	40014400 	.word	0x40014400
 800e9d4:	40014800 	.word	0x40014800

0800e9d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6a1b      	ldr	r3, [r3, #32]
 800e9e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	f023 0201 	bic.w	r2, r3, #1
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ea02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	011b      	lsls	r3, r3, #4
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	f023 030a 	bic.w	r3, r3, #10
 800ea14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	693a      	ldr	r2, [r7, #16]
 800ea22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	621a      	str	r2, [r3, #32]
}
 800ea2a:	bf00      	nop
 800ea2c:	371c      	adds	r7, #28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b087      	sub	sp, #28
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	60f8      	str	r0, [r7, #12]
 800ea3e:	60b9      	str	r1, [r7, #8]
 800ea40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	6a1b      	ldr	r3, [r3, #32]
 800ea46:	f023 0210 	bic.w	r2, r3, #16
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ea60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	031b      	lsls	r3, r3, #12
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ea72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	011b      	lsls	r3, r3, #4
 800ea78:	693a      	ldr	r2, [r7, #16]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	697a      	ldr	r2, [r7, #20]
 800ea82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	621a      	str	r2, [r3, #32]
}
 800ea8a:	bf00      	nop
 800ea8c:	371c      	adds	r7, #28
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b085      	sub	sp, #20
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800eaac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	f043 0307 	orr.w	r3, r3, #7
 800eabc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	609a      	str	r2, [r3, #8]
}
 800eac4:	bf00      	nop
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b087      	sub	sp, #28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eaea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	021a      	lsls	r2, r3, #8
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	431a      	orrs	r2, r3
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	697a      	ldr	r2, [r7, #20]
 800eafa:	4313      	orrs	r3, r2
 800eafc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	697a      	ldr	r2, [r7, #20]
 800eb02:	609a      	str	r2, [r3, #8]
}
 800eb04:	bf00      	nop
 800eb06:	371c      	adds	r7, #28
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d101      	bne.n	800eb28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eb24:	2302      	movs	r3, #2
 800eb26:	e04a      	b.n	800ebbe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2202      	movs	r2, #2
 800eb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a1f      	ldr	r2, [pc, #124]	; (800ebcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d108      	bne.n	800eb64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eb58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	68fa      	ldr	r2, [r7, #12]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	4313      	orrs	r3, r2
 800eb74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a12      	ldr	r2, [pc, #72]	; (800ebcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d004      	beq.n	800eb92 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb90:	d10c      	bne.n	800ebac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	40012c00 	.word	0x40012c00

0800ebd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <LL_RCC_GetUSARTClockSource>:
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800ec14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4013      	ands	r3, r2
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <LL_RCC_GetLPUARTClockSource>:
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ec34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ec38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4013      	ands	r3, r2
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d101      	bne.n	800ec5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e042      	b.n	800ece4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d106      	bne.n	800ec76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7f3 ff89 	bl	8002b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2224      	movs	r2, #36	; 0x24
 800ec7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f022 0201 	bic.w	r2, r2, #1
 800ec8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 f82c 	bl	800ecec <UART_SetConfig>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d101      	bne.n	800ec9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e022      	b.n	800ece4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d002      	beq.n	800ecac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 fa48 	bl	800f13c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ecba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	689a      	ldr	r2, [r3, #8]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ecca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f042 0201 	orr.w	r2, r2, #1
 800ecda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 facf 	bl	800f280 <UART_CheckIdleState>
 800ece2:	4603      	mov	r3, r0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecf0:	b08c      	sub	sp, #48	; 0x30
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	689a      	ldr	r2, [r3, #8]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	431a      	orrs	r2, r3
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	69db      	ldr	r3, [r3, #28]
 800ed10:	4313      	orrs	r3, r2
 800ed12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	4baf      	ldr	r3, [pc, #700]	; (800efd8 <UART_SetConfig+0x2ec>)
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	6812      	ldr	r2, [r2, #0]
 800ed22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed24:	430b      	orrs	r3, r1
 800ed26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	68da      	ldr	r2, [r3, #12]
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4aa4      	ldr	r2, [pc, #656]	; (800efdc <UART_SetConfig+0x2f0>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d004      	beq.n	800ed58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	6a1b      	ldr	r3, [r3, #32]
 800ed52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed54:	4313      	orrs	r3, r2
 800ed56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ed62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	6812      	ldr	r2, [r2, #0]
 800ed6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed76:	f023 010f 	bic.w	r1, r3, #15
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	430a      	orrs	r2, r1
 800ed84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a95      	ldr	r2, [pc, #596]	; (800efe0 <UART_SetConfig+0x2f4>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d125      	bne.n	800eddc <UART_SetConfig+0xf0>
 800ed90:	2003      	movs	r0, #3
 800ed92:	f7ff ff3b 	bl	800ec0c <LL_RCC_GetUSARTClockSource>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b03      	cmp	r3, #3
 800ed9a:	d81b      	bhi.n	800edd4 <UART_SetConfig+0xe8>
 800ed9c:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <UART_SetConfig+0xb8>)
 800ed9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800edb5 	.word	0x0800edb5
 800eda8:	0800edc5 	.word	0x0800edc5
 800edac:	0800edbd 	.word	0x0800edbd
 800edb0:	0800edcd 	.word	0x0800edcd
 800edb4:	2301      	movs	r3, #1
 800edb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edba:	e042      	b.n	800ee42 <UART_SetConfig+0x156>
 800edbc:	2302      	movs	r3, #2
 800edbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edc2:	e03e      	b.n	800ee42 <UART_SetConfig+0x156>
 800edc4:	2304      	movs	r3, #4
 800edc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edca:	e03a      	b.n	800ee42 <UART_SetConfig+0x156>
 800edcc:	2308      	movs	r3, #8
 800edce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edd2:	e036      	b.n	800ee42 <UART_SetConfig+0x156>
 800edd4:	2310      	movs	r3, #16
 800edd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edda:	e032      	b.n	800ee42 <UART_SetConfig+0x156>
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a7e      	ldr	r2, [pc, #504]	; (800efdc <UART_SetConfig+0x2f0>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d12a      	bne.n	800ee3c <UART_SetConfig+0x150>
 800ede6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800edea:	f7ff ff1f 	bl	800ec2c <LL_RCC_GetLPUARTClockSource>
 800edee:	4603      	mov	r3, r0
 800edf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800edf4:	d01a      	beq.n	800ee2c <UART_SetConfig+0x140>
 800edf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800edfa:	d81b      	bhi.n	800ee34 <UART_SetConfig+0x148>
 800edfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee00:	d00c      	beq.n	800ee1c <UART_SetConfig+0x130>
 800ee02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee06:	d815      	bhi.n	800ee34 <UART_SetConfig+0x148>
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d003      	beq.n	800ee14 <UART_SetConfig+0x128>
 800ee0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee10:	d008      	beq.n	800ee24 <UART_SetConfig+0x138>
 800ee12:	e00f      	b.n	800ee34 <UART_SetConfig+0x148>
 800ee14:	2300      	movs	r3, #0
 800ee16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee1a:	e012      	b.n	800ee42 <UART_SetConfig+0x156>
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee22:	e00e      	b.n	800ee42 <UART_SetConfig+0x156>
 800ee24:	2304      	movs	r3, #4
 800ee26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee2a:	e00a      	b.n	800ee42 <UART_SetConfig+0x156>
 800ee2c:	2308      	movs	r3, #8
 800ee2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee32:	e006      	b.n	800ee42 <UART_SetConfig+0x156>
 800ee34:	2310      	movs	r3, #16
 800ee36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee3a:	e002      	b.n	800ee42 <UART_SetConfig+0x156>
 800ee3c:	2310      	movs	r3, #16
 800ee3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4a65      	ldr	r2, [pc, #404]	; (800efdc <UART_SetConfig+0x2f0>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	f040 8097 	bne.w	800ef7c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee52:	2b08      	cmp	r3, #8
 800ee54:	d823      	bhi.n	800ee9e <UART_SetConfig+0x1b2>
 800ee56:	a201      	add	r2, pc, #4	; (adr r2, 800ee5c <UART_SetConfig+0x170>)
 800ee58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5c:	0800ee81 	.word	0x0800ee81
 800ee60:	0800ee9f 	.word	0x0800ee9f
 800ee64:	0800ee89 	.word	0x0800ee89
 800ee68:	0800ee9f 	.word	0x0800ee9f
 800ee6c:	0800ee8f 	.word	0x0800ee8f
 800ee70:	0800ee9f 	.word	0x0800ee9f
 800ee74:	0800ee9f 	.word	0x0800ee9f
 800ee78:	0800ee9f 	.word	0x0800ee9f
 800ee7c:	0800ee97 	.word	0x0800ee97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee80:	f7fe fbd0 	bl	800d624 <HAL_RCC_GetPCLK1Freq>
 800ee84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ee86:	e010      	b.n	800eeaa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee88:	4b56      	ldr	r3, [pc, #344]	; (800efe4 <UART_SetConfig+0x2f8>)
 800ee8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ee8c:	e00d      	b.n	800eeaa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee8e:	f7fe fb49 	bl	800d524 <HAL_RCC_GetSysClockFreq>
 800ee92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ee94:	e009      	b.n	800eeaa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ee9c:	e005      	b.n	800eeaa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 812b 	beq.w	800f108 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb6:	4a4c      	ldr	r2, [pc, #304]	; (800efe8 <UART_SetConfig+0x2fc>)
 800eeb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eebc:	461a      	mov	r2, r3
 800eebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eec4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	4613      	mov	r3, r2
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	4413      	add	r3, r2
 800eed0:	69ba      	ldr	r2, [r7, #24]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d305      	bcc.n	800eee2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eedc:	69ba      	ldr	r2, [r7, #24]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d903      	bls.n	800eeea <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800eee2:	2301      	movs	r3, #1
 800eee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eee8:	e10e      	b.n	800f108 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	2200      	movs	r2, #0
 800eeee:	60bb      	str	r3, [r7, #8]
 800eef0:	60fa      	str	r2, [r7, #12]
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef6:	4a3c      	ldr	r2, [pc, #240]	; (800efe8 <UART_SetConfig+0x2fc>)
 800eef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	2200      	movs	r2, #0
 800ef00:	603b      	str	r3, [r7, #0]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef0c:	f7f1 fe74 	bl	8000bf8 <__aeabi_uldivmod>
 800ef10:	4602      	mov	r2, r0
 800ef12:	460b      	mov	r3, r1
 800ef14:	4610      	mov	r0, r2
 800ef16:	4619      	mov	r1, r3
 800ef18:	f04f 0200 	mov.w	r2, #0
 800ef1c:	f04f 0300 	mov.w	r3, #0
 800ef20:	020b      	lsls	r3, r1, #8
 800ef22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef26:	0202      	lsls	r2, r0, #8
 800ef28:	6979      	ldr	r1, [r7, #20]
 800ef2a:	6849      	ldr	r1, [r1, #4]
 800ef2c:	0849      	lsrs	r1, r1, #1
 800ef2e:	2000      	movs	r0, #0
 800ef30:	460c      	mov	r4, r1
 800ef32:	4605      	mov	r5, r0
 800ef34:	eb12 0804 	adds.w	r8, r2, r4
 800ef38:	eb43 0905 	adc.w	r9, r3, r5
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	469a      	mov	sl, r3
 800ef44:	4693      	mov	fp, r2
 800ef46:	4652      	mov	r2, sl
 800ef48:	465b      	mov	r3, fp
 800ef4a:	4640      	mov	r0, r8
 800ef4c:	4649      	mov	r1, r9
 800ef4e:	f7f1 fe53 	bl	8000bf8 <__aeabi_uldivmod>
 800ef52:	4602      	mov	r2, r0
 800ef54:	460b      	mov	r3, r1
 800ef56:	4613      	mov	r3, r2
 800ef58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef60:	d308      	bcc.n	800ef74 <UART_SetConfig+0x288>
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef68:	d204      	bcs.n	800ef74 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6a3a      	ldr	r2, [r7, #32]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	e0c9      	b.n	800f108 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800ef74:	2301      	movs	r3, #1
 800ef76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef7a:	e0c5      	b.n	800f108 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	69db      	ldr	r3, [r3, #28]
 800ef80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef84:	d16d      	bne.n	800f062 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800ef86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	2b07      	cmp	r3, #7
 800ef8e:	d82d      	bhi.n	800efec <UART_SetConfig+0x300>
 800ef90:	a201      	add	r2, pc, #4	; (adr r2, 800ef98 <UART_SetConfig+0x2ac>)
 800ef92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef96:	bf00      	nop
 800ef98:	0800efb9 	.word	0x0800efb9
 800ef9c:	0800efc1 	.word	0x0800efc1
 800efa0:	0800efed 	.word	0x0800efed
 800efa4:	0800efc7 	.word	0x0800efc7
 800efa8:	0800efed 	.word	0x0800efed
 800efac:	0800efed 	.word	0x0800efed
 800efb0:	0800efed 	.word	0x0800efed
 800efb4:	0800efcf 	.word	0x0800efcf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efb8:	f7fe fb4a 	bl	800d650 <HAL_RCC_GetPCLK2Freq>
 800efbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800efbe:	e01b      	b.n	800eff8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800efc0:	4b08      	ldr	r3, [pc, #32]	; (800efe4 <UART_SetConfig+0x2f8>)
 800efc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800efc4:	e018      	b.n	800eff8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800efc6:	f7fe faad 	bl	800d524 <HAL_RCC_GetSysClockFreq>
 800efca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800efcc:	e014      	b.n	800eff8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800efd4:	e010      	b.n	800eff8 <UART_SetConfig+0x30c>
 800efd6:	bf00      	nop
 800efd8:	cfff69f3 	.word	0xcfff69f3
 800efdc:	40008000 	.word	0x40008000
 800efe0:	40013800 	.word	0x40013800
 800efe4:	00f42400 	.word	0x00f42400
 800efe8:	080189e4 	.word	0x080189e4
      default:
        pclk = 0U;
 800efec:	2300      	movs	r3, #0
 800efee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eff0:	2301      	movs	r3, #1
 800eff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 8084 	beq.w	800f108 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f004:	4a4b      	ldr	r2, [pc, #300]	; (800f134 <UART_SetConfig+0x448>)
 800f006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f00a:	461a      	mov	r2, r3
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f012:	005a      	lsls	r2, r3, #1
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	085b      	lsrs	r3, r3, #1
 800f01a:	441a      	add	r2, r3
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	fbb2 f3f3 	udiv	r3, r2, r3
 800f024:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	2b0f      	cmp	r3, #15
 800f02a:	d916      	bls.n	800f05a <UART_SetConfig+0x36e>
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f032:	d212      	bcs.n	800f05a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f034:	6a3b      	ldr	r3, [r7, #32]
 800f036:	b29b      	uxth	r3, r3
 800f038:	f023 030f 	bic.w	r3, r3, #15
 800f03c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	085b      	lsrs	r3, r3, #1
 800f042:	b29b      	uxth	r3, r3
 800f044:	f003 0307 	and.w	r3, r3, #7
 800f048:	b29a      	uxth	r2, r3
 800f04a:	8bfb      	ldrh	r3, [r7, #30]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	8bfa      	ldrh	r2, [r7, #30]
 800f056:	60da      	str	r2, [r3, #12]
 800f058:	e056      	b.n	800f108 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f060:	e052      	b.n	800f108 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f066:	3b01      	subs	r3, #1
 800f068:	2b07      	cmp	r3, #7
 800f06a:	d822      	bhi.n	800f0b2 <UART_SetConfig+0x3c6>
 800f06c:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <UART_SetConfig+0x388>)
 800f06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f072:	bf00      	nop
 800f074:	0800f095 	.word	0x0800f095
 800f078:	0800f09d 	.word	0x0800f09d
 800f07c:	0800f0b3 	.word	0x0800f0b3
 800f080:	0800f0a3 	.word	0x0800f0a3
 800f084:	0800f0b3 	.word	0x0800f0b3
 800f088:	0800f0b3 	.word	0x0800f0b3
 800f08c:	0800f0b3 	.word	0x0800f0b3
 800f090:	0800f0ab 	.word	0x0800f0ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f094:	f7fe fadc 	bl	800d650 <HAL_RCC_GetPCLK2Freq>
 800f098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f09a:	e010      	b.n	800f0be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f09c:	4b26      	ldr	r3, [pc, #152]	; (800f138 <UART_SetConfig+0x44c>)
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0a0:	e00d      	b.n	800f0be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0a2:	f7fe fa3f 	bl	800d524 <HAL_RCC_GetSysClockFreq>
 800f0a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0a8:	e009      	b.n	800f0be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0b0:	e005      	b.n	800f0be <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f0bc:	bf00      	nop
    }

    if (pclk != 0U)
 800f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d021      	beq.n	800f108 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c8:	4a1a      	ldr	r2, [pc, #104]	; (800f134 <UART_SetConfig+0x448>)
 800f0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	085b      	lsrs	r3, r3, #1
 800f0dc:	441a      	add	r2, r3
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	2b0f      	cmp	r3, #15
 800f0ec:	d909      	bls.n	800f102 <UART_SetConfig+0x416>
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0f4:	d205      	bcs.n	800f102 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	60da      	str	r2, [r3, #12]
 800f100:	e002      	b.n	800f108 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	2201      	movs	r2, #1
 800f114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	2200      	movs	r2, #0
 800f11c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2200      	movs	r2, #0
 800f122:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f124:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3730      	adds	r7, #48	; 0x30
 800f12c:	46bd      	mov	sp, r7
 800f12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f132:	bf00      	nop
 800f134:	080189e4 	.word	0x080189e4
 800f138:	00f42400 	.word	0x00f42400

0800f13c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f148:	f003 0301 	and.w	r3, r3, #1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00a      	beq.n	800f166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	430a      	orrs	r2, r1
 800f164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f16a:	f003 0302 	and.w	r3, r3, #2
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00a      	beq.n	800f188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	430a      	orrs	r2, r1
 800f186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f18c:	f003 0304 	and.w	r3, r3, #4
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00a      	beq.n	800f1aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ae:	f003 0308 	and.w	r3, r3, #8
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	430a      	orrs	r2, r1
 800f1ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00a      	beq.n	800f1ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	430a      	orrs	r2, r1
 800f1ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f2:	f003 0320 	and.w	r3, r3, #32
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00a      	beq.n	800f210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	430a      	orrs	r2, r1
 800f20e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d01a      	beq.n	800f252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	430a      	orrs	r2, r1
 800f230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f23a:	d10a      	bne.n	800f252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	430a      	orrs	r2, r1
 800f250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00a      	beq.n	800f274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	430a      	orrs	r2, r1
 800f272:	605a      	str	r2, [r3, #4]
  }
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af02      	add	r7, sp, #8
 800f286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f290:	f7fb fc06 	bl	800aaa0 <HAL_GetTick>
 800f294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f003 0308 	and.w	r3, r3, #8
 800f2a0:	2b08      	cmp	r3, #8
 800f2a2:	d10e      	bne.n	800f2c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2a8:	9300      	str	r3, [sp, #0]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 f832 	bl	800f31c <UART_WaitOnFlagUntilTimeout>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	e028      	b.n	800f314 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f003 0304 	and.w	r3, r3, #4
 800f2cc:	2b04      	cmp	r3, #4
 800f2ce:	d10e      	bne.n	800f2ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f81c 	bl	800f31c <UART_WaitOnFlagUntilTimeout>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d001      	beq.n	800f2ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2ea:	2303      	movs	r3, #3
 800f2ec:	e012      	b.n	800f314 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2220      	movs	r2, #32
 800f2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2220      	movs	r2, #32
 800f2fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b09c      	sub	sp, #112	; 0x70
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	603b      	str	r3, [r7, #0]
 800f328:	4613      	mov	r3, r2
 800f32a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f32c:	e0a9      	b.n	800f482 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f334:	f000 80a5 	beq.w	800f482 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f338:	f7fb fbb2 	bl	800aaa0 <HAL_GetTick>
 800f33c:	4602      	mov	r2, r0
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f344:	429a      	cmp	r2, r3
 800f346:	d302      	bcc.n	800f34e <UART_WaitOnFlagUntilTimeout+0x32>
 800f348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d140      	bne.n	800f3d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f356:	e853 3f00 	ldrex	r3, [r3]
 800f35a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f35e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f362:	667b      	str	r3, [r7, #100]	; 0x64
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	461a      	mov	r2, r3
 800f36a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f36e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f370:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f372:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f374:	e841 2300 	strex	r3, r2, [r1]
 800f378:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1e6      	bne.n	800f34e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	3308      	adds	r3, #8
 800f386:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38a:	e853 3f00 	ldrex	r3, [r3]
 800f38e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	f023 0301 	bic.w	r3, r3, #1
 800f396:	663b      	str	r3, [r7, #96]	; 0x60
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	3308      	adds	r3, #8
 800f39e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3a0:	64ba      	str	r2, [r7, #72]	; 0x48
 800f3a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3a8:	e841 2300 	strex	r3, r2, [r1]
 800f3ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1e5      	bne.n	800f380 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2220      	movs	r2, #32
 800f3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	e069      	b.n	800f4a4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 0304 	and.w	r3, r3, #4
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d051      	beq.n	800f482 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3ec:	d149      	bne.n	800f482 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f3f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f40c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f416:	637b      	str	r3, [r7, #52]	; 0x34
 800f418:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e6      	bne.n	800f3f8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3308      	adds	r3, #8
 800f430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	613b      	str	r3, [r7, #16]
   return(result);
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f023 0301 	bic.w	r3, r3, #1
 800f440:	66bb      	str	r3, [r7, #104]	; 0x68
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	3308      	adds	r3, #8
 800f448:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f44a:	623a      	str	r2, [r7, #32]
 800f44c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	69f9      	ldr	r1, [r7, #28]
 800f450:	6a3a      	ldr	r2, [r7, #32]
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	61bb      	str	r3, [r7, #24]
   return(result);
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e5      	bne.n	800f42a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2220      	movs	r2, #32
 800f462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2220      	movs	r2, #32
 800f46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2220      	movs	r2, #32
 800f472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f47e:	2303      	movs	r3, #3
 800f480:	e010      	b.n	800f4a4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	69da      	ldr	r2, [r3, #28]
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	4013      	ands	r3, r2
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	429a      	cmp	r2, r3
 800f490:	bf0c      	ite	eq
 800f492:	2301      	moveq	r3, #1
 800f494:	2300      	movne	r3, #0
 800f496:	b2db      	uxtb	r3, r3
 800f498:	461a      	mov	r2, r3
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	f43f af46 	beq.w	800f32e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3770      	adds	r7, #112	; 0x70
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d101      	bne.n	800f4c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f4be:	2302      	movs	r3, #2
 800f4c0:	e027      	b.n	800f512 <HAL_UARTEx_DisableFifoMode+0x66>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2224      	movs	r2, #36	; 0x24
 800f4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f022 0201 	bic.w	r2, r2, #1
 800f4e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f4f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2220      	movs	r2, #32
 800f504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b084      	sub	sp, #16
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d101      	bne.n	800f536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f532:	2302      	movs	r3, #2
 800f534:	e02d      	b.n	800f592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2224      	movs	r2, #36	; 0x24
 800f542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f022 0201 	bic.w	r2, r2, #1
 800f55c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	430a      	orrs	r2, r1
 800f570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f850 	bl	800f618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2220      	movs	r2, #32
 800f584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d101      	bne.n	800f5b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e02d      	b.n	800f60e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2224      	movs	r2, #36	; 0x24
 800f5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f022 0201 	bic.w	r2, r2, #1
 800f5d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	683a      	ldr	r2, [r7, #0]
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 f812 	bl	800f618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2220      	movs	r2, #32
 800f600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f624:	2b00      	cmp	r3, #0
 800f626:	d108      	bne.n	800f63a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f638:	e031      	b.n	800f69e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f63a:	2308      	movs	r3, #8
 800f63c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f63e:	2308      	movs	r3, #8
 800f640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	0e5b      	lsrs	r3, r3, #25
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f003 0307 	and.w	r3, r3, #7
 800f650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	0f5b      	lsrs	r3, r3, #29
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	f003 0307 	and.w	r3, r3, #7
 800f660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f662:	7bbb      	ldrb	r3, [r7, #14]
 800f664:	7b3a      	ldrb	r2, [r7, #12]
 800f666:	4911      	ldr	r1, [pc, #68]	; (800f6ac <UARTEx_SetNbDataToProcess+0x94>)
 800f668:	5c8a      	ldrb	r2, [r1, r2]
 800f66a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f66e:	7b3a      	ldrb	r2, [r7, #12]
 800f670:	490f      	ldr	r1, [pc, #60]	; (800f6b0 <UARTEx_SetNbDataToProcess+0x98>)
 800f672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f674:	fb93 f3f2 	sdiv	r3, r3, r2
 800f678:	b29a      	uxth	r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f680:	7bfb      	ldrb	r3, [r7, #15]
 800f682:	7b7a      	ldrb	r2, [r7, #13]
 800f684:	4909      	ldr	r1, [pc, #36]	; (800f6ac <UARTEx_SetNbDataToProcess+0x94>)
 800f686:	5c8a      	ldrb	r2, [r1, r2]
 800f688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f68c:	7b7a      	ldrb	r2, [r7, #13]
 800f68e:	4908      	ldr	r1, [pc, #32]	; (800f6b0 <UARTEx_SetNbDataToProcess+0x98>)
 800f690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f692:	fb93 f3f2 	sdiv	r3, r3, r2
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f69e:	bf00      	nop
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	080189fc 	.word	0x080189fc
 800f6b0:	08018a04 	.word	0x08018a04

0800f6b4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b088      	sub	sp, #32
 800f6b8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f6be:	f107 0308 	add.w	r3, r7, #8
 800f6c2:	2218      	movs	r2, #24
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f001 f8d8 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800f6cc:	233f      	movs	r3, #63	; 0x3f
 800f6ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800f6d0:	2381      	movs	r3, #129	; 0x81
 800f6d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f6d4:	1dfb      	adds	r3, r7, #7
 800f6d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f6dc:	f107 0308 	add.w	r3, r7, #8
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f001 fb54 	bl	8010d90 <hci_send_req>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	da01      	bge.n	800f6f2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f6ee:	23ff      	movs	r3, #255	; 0xff
 800f6f0:	e000      	b.n	800f6f4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3720      	adds	r7, #32
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800f6fc:	b5b0      	push	{r4, r5, r7, lr}
 800f6fe:	b0ce      	sub	sp, #312	; 0x138
 800f700:	af00      	add	r7, sp, #0
 800f702:	4605      	mov	r5, r0
 800f704:	460c      	mov	r4, r1
 800f706:	4610      	mov	r0, r2
 800f708:	4619      	mov	r1, r3
 800f70a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f70e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f712:	462a      	mov	r2, r5
 800f714:	701a      	strb	r2, [r3, #0]
 800f716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f71a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f71e:	4622      	mov	r2, r4
 800f720:	801a      	strh	r2, [r3, #0]
 800f722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f726:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800f72a:	4602      	mov	r2, r0
 800f72c:	801a      	strh	r2, [r3, #0]
 800f72e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f732:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f736:	460a      	mov	r2, r1
 800f738:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800f73a:	f107 0310 	add.w	r3, r7, #16
 800f73e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f742:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800f746:	3308      	adds	r3, #8
 800f748:	f107 0210 	add.w	r2, r7, #16
 800f74c:	4413      	add	r3, r2
 800f74e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f752:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800f756:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800f75a:	4413      	add	r3, r2
 800f75c:	3309      	adds	r3, #9
 800f75e:	f107 0210 	add.w	r2, r7, #16
 800f762:	4413      	add	r3, r2
 800f764:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f768:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f76c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f770:	2200      	movs	r2, #0
 800f772:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800f77a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f77e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f782:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800f786:	7812      	ldrb	r2, [r2, #0]
 800f788:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f78a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f78e:	3301      	adds	r3, #1
 800f790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800f794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f798:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f79c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800f7a0:	8812      	ldrh	r2, [r2, #0]
 800f7a2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800f7a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7aa:	3302      	adds	r3, #2
 800f7ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800f7b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f7b4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f7b8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800f7bc:	8812      	ldrh	r2, [r2, #0]
 800f7be:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800f7c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7c6:	3302      	adds	r3, #2
 800f7c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800f7cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f7d0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f7d4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f7d8:	7812      	ldrb	r2, [r2, #0]
 800f7da:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f7dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800f7e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f7ea:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800f7ee:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f7f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800f7fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f7fe:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800f802:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800f804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f808:	3301      	adds	r3, #1
 800f80a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800f80e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f812:	3308      	adds	r3, #8
 800f814:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800f818:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800f81c:	4618      	mov	r0, r3
 800f81e:	f001 f81d 	bl	801085c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800f822:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800f826:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f82a:	4413      	add	r3, r2
 800f82c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800f830:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f834:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f838:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f83e:	3301      	adds	r3, #1
 800f840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800f844:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f848:	3301      	adds	r3, #1
 800f84a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f84e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800f852:	4618      	mov	r0, r3
 800f854:	f001 f802 	bl	801085c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800f858:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800f85c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f860:	4413      	add	r3, r2
 800f862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800f866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f86a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800f86e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f874:	3302      	adds	r3, #2
 800f876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800f87a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f87e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800f882:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800f884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f888:	3302      	adds	r3, #2
 800f88a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f88e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f892:	2218      	movs	r2, #24
 800f894:	2100      	movs	r1, #0
 800f896:	4618      	mov	r0, r3
 800f898:	f000 fff0 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800f89c:	233f      	movs	r3, #63	; 0x3f
 800f89e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800f8a2:	2383      	movs	r3, #131	; 0x83
 800f8a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f8a8:	f107 0310 	add.w	r3, r7, #16
 800f8ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f8b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f8b8:	f107 030f 	add.w	r3, r7, #15
 800f8bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f8c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f001 fa5f 	bl	8010d90 <hci_send_req>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	da01      	bge.n	800f8dc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800f8d8:	23ff      	movs	r3, #255	; 0xff
 800f8da:	e004      	b.n	800f8e6 <aci_gap_set_discoverable+0x1ea>
  return status;
 800f8dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f8e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f8e4:	781b      	ldrb	r3, [r3, #0]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bdb0      	pop	{r4, r5, r7, pc}

0800f8f0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b0cc      	sub	sp, #304	; 0x130
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8fc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f900:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800f902:	f107 0310 	add.w	r3, r7, #16
 800f906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f90a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f90e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800f91c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f920:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f924:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f928:	7812      	ldrb	r2, [r2, #0]
 800f92a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f92c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f930:	3301      	adds	r3, #1
 800f932:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f93a:	2218      	movs	r2, #24
 800f93c:	2100      	movs	r1, #0
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 ff9c 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800f944:	233f      	movs	r3, #63	; 0x3f
 800f946:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800f94a:	2385      	movs	r3, #133	; 0x85
 800f94c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f950:	f107 0310 	add.w	r3, r7, #16
 800f954:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f958:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f95c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f960:	f107 030f 	add.w	r3, r7, #15
 800f964:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f968:	2301      	movs	r3, #1
 800f96a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f96e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f001 fa0b 	bl	8010d90 <hci_send_req>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	da01      	bge.n	800f984 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800f980:	23ff      	movs	r3, #255	; 0xff
 800f982:	e004      	b.n	800f98e <aci_gap_set_io_capability+0x9e>
  return status;
 800f984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f988:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f98c:	781b      	ldrb	r3, [r3, #0]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800f998:	b5b0      	push	{r4, r5, r7, lr}
 800f99a:	b0cc      	sub	sp, #304	; 0x130
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4605      	mov	r5, r0
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	701a      	strb	r2, [r3, #0]
 800f9b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9b6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f9ba:	4622      	mov	r2, r4
 800f9bc:	701a      	strb	r2, [r3, #0]
 800f9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9c2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f9d2:	460a      	mov	r2, r1
 800f9d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800f9d6:	f107 0310 	add.w	r3, r7, #16
 800f9da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f9de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800f9f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f9f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f9f8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f9fc:	7812      	ldrb	r2, [r2, #0]
 800f9fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fa00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa04:	3301      	adds	r3, #1
 800fa06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800fa0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fa16:	7812      	ldrb	r2, [r2, #0]
 800fa18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fa1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa1e:	3301      	adds	r3, #1
 800fa20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800fa24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa2c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800fa30:	7812      	ldrb	r2, [r2, #0]
 800fa32:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fa34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa38:	3301      	adds	r3, #1
 800fa3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800fa3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa46:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800fa4a:	7812      	ldrb	r2, [r2, #0]
 800fa4c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800fa4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa52:	3301      	adds	r3, #1
 800fa54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800fa58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa5c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800fa60:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800fa62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa66:	3301      	adds	r3, #1
 800fa68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800fa6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa70:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800fa74:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fa76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800fa80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa84:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800fa88:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fa8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa8e:	3301      	adds	r3, #1
 800fa90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800fa94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa98:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800fa9c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800faa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800faa4:	3304      	adds	r3, #4
 800faa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800faaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800faae:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800fab2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800fab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fab8:	3301      	adds	r3, #1
 800faba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fabe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fac2:	2218      	movs	r2, #24
 800fac4:	2100      	movs	r1, #0
 800fac6:	4618      	mov	r0, r3
 800fac8:	f000 fed8 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800facc:	233f      	movs	r3, #63	; 0x3f
 800face:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800fad2:	2386      	movs	r3, #134	; 0x86
 800fad4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fad8:	f107 0310 	add.w	r3, r7, #16
 800fadc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fae8:	f107 030f 	add.w	r3, r7, #15
 800faec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800faf0:	2301      	movs	r3, #1
 800faf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800faf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fafa:	2100      	movs	r1, #0
 800fafc:	4618      	mov	r0, r3
 800fafe:	f001 f947 	bl	8010d90 <hci_send_req>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	da01      	bge.n	800fb0c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800fb08:	23ff      	movs	r3, #255	; 0xff
 800fb0a:	e004      	b.n	800fb16 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800fb0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fb14:	781b      	ldrb	r3, [r3, #0]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bdb0      	pop	{r4, r5, r7, pc}

0800fb20 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b0cc      	sub	sp, #304	; 0x130
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	4602      	mov	r2, r0
 800fb28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb30:	6019      	str	r1, [r3, #0]
 800fb32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb36:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fb3a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800fb3c:	f107 0310 	add.w	r3, r7, #16
 800fb40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fb44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb48:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fb50:	2300      	movs	r3, #0
 800fb52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fb56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fb5e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fb62:	8812      	ldrh	r2, [r2, #0]
 800fb64:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fb66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb6a:	3302      	adds	r3, #2
 800fb6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800fb70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fb78:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800fb7c:	6812      	ldr	r2, [r2, #0]
 800fb7e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800fb82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb86:	3304      	adds	r3, #4
 800fb88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb90:	2218      	movs	r2, #24
 800fb92:	2100      	movs	r1, #0
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 fe71 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800fb9a:	233f      	movs	r3, #63	; 0x3f
 800fb9c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800fba0:	2388      	movs	r3, #136	; 0x88
 800fba2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fba6:	f107 0310 	add.w	r3, r7, #16
 800fbaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fbae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fbb6:	f107 030f 	add.w	r3, r7, #15
 800fbba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fbc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbc8:	2100      	movs	r1, #0
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f001 f8e0 	bl	8010d90 <hci_send_req>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	da01      	bge.n	800fbda <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800fbd6:	23ff      	movs	r3, #255	; 0xff
 800fbd8:	e004      	b.n	800fbe4 <aci_gap_pass_key_resp+0xc4>
  return status;
 800fbda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fbde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fbe2:	781b      	ldrb	r3, [r3, #0]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800fbee:	b590      	push	{r4, r7, lr}
 800fbf0:	b0cd      	sub	sp, #308	; 0x134
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbfe:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800fc02:	6013      	str	r3, [r2, #0]
 800fc04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc08:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	701a      	strb	r2, [r3, #0]
 800fc10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc14:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fc18:	4602      	mov	r2, r0
 800fc1a:	701a      	strb	r2, [r3, #0]
 800fc1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc20:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800fc24:	460a      	mov	r2, r1
 800fc26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800fc28:	f107 0310 	add.w	r3, r7, #16
 800fc2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800fc30:	f107 0308 	add.w	r3, r7, #8
 800fc34:	2207      	movs	r2, #7
 800fc36:	2100      	movs	r1, #0
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f000 fe1f 	bl	801087c <Osal_MemSet>
  int index_input = 0;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800fc44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fc4c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fc50:	7812      	ldrb	r2, [r2, #0]
 800fc52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fc54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc58:	3301      	adds	r3, #1
 800fc5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800fc5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fc66:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fc6a:	7812      	ldrb	r2, [r2, #0]
 800fc6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fc6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc72:	3301      	adds	r3, #1
 800fc74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800fc78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fc80:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800fc84:	7812      	ldrb	r2, [r2, #0]
 800fc86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fc88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc96:	2218      	movs	r2, #24
 800fc98:	2100      	movs	r1, #0
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 fdee 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800fca0:	233f      	movs	r3, #63	; 0x3f
 800fca2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800fca6:	238a      	movs	r3, #138	; 0x8a
 800fca8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fcac:	f107 0310 	add.w	r3, r7, #16
 800fcb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fcb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fcb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800fcbc:	f107 0308 	add.w	r3, r7, #8
 800fcc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800fcc4:	2307      	movs	r3, #7
 800fcc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fcca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcce:	2100      	movs	r1, #0
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f001 f85d 	bl	8010d90 <hci_send_req>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	da01      	bge.n	800fce0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800fcdc:	23ff      	movs	r3, #255	; 0xff
 800fcde:	e02e      	b.n	800fd3e <aci_gap_init+0x150>
  if ( resp.Status )
 800fce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fce4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d005      	beq.n	800fcfa <aci_gap_init+0x10c>
    return resp.Status;
 800fcee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcf2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	e021      	b.n	800fd3e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800fcfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fd02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800fd14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd18:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fd1c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800fd26:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800fd28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fd30:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800fd3a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800fd3c:	2300      	movs	r3, #0
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd90      	pop	{r4, r7, pc}

0800fd48 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b0cc      	sub	sp, #304	; 0x130
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4602      	mov	r2, r0
 800fd50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd58:	6019      	str	r1, [r3, #0]
 800fd5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd5e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fd62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800fd64:	f107 0310 	add.w	r3, r7, #16
 800fd68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fd6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd70:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fd74:	2200      	movs	r2, #0
 800fd76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800fd7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd86:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fd8a:	7812      	ldrb	r2, [r2, #0]
 800fd8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fd8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd92:	3301      	adds	r3, #1
 800fd94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800fd98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd9c:	1c58      	adds	r0, r3, #1
 800fd9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fda2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fda6:	781a      	ldrb	r2, [r3, #0]
 800fda8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fdb0:	6819      	ldr	r1, [r3, #0]
 800fdb2:	f000 fd53 	bl	801085c <Osal_MemCpy>
  index_input += AdvDataLen;
 800fdb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fdc4:	4413      	add	r3, r2
 800fdc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fdca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdce:	2218      	movs	r2, #24
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f000 fd52 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800fdd8:	233f      	movs	r3, #63	; 0x3f
 800fdda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800fdde:	238e      	movs	r3, #142	; 0x8e
 800fde0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fde4:	f107 0310 	add.w	r3, r7, #16
 800fde8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fdec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fdf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fdf4:	f107 030f 	add.w	r3, r7, #15
 800fdf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe06:	2100      	movs	r1, #0
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f000 ffc1 	bl	8010d90 <hci_send_req>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	da01      	bge.n	800fe18 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800fe14:	23ff      	movs	r3, #255	; 0xff
 800fe16:	e004      	b.n	800fe22 <aci_gap_update_adv_data+0xda>
  return status;
 800fe18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe1c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fe20:	781b      	ldrb	r3, [r3, #0]
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b088      	sub	sp, #32
 800fe30:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe36:	f107 0308 	add.w	r3, r7, #8
 800fe3a:	2218      	movs	r2, #24
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f000 fd1c 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800fe44:	233f      	movs	r3, #63	; 0x3f
 800fe46:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800fe48:	2392      	movs	r3, #146	; 0x92
 800fe4a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fe4c:	1dfb      	adds	r3, r7, #7
 800fe4e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fe50:	2301      	movs	r3, #1
 800fe52:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	2100      	movs	r1, #0
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f000 ff98 	bl	8010d90 <hci_send_req>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	da01      	bge.n	800fe6a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fe66:	23ff      	movs	r3, #255	; 0xff
 800fe68:	e000      	b.n	800fe6c <aci_gap_configure_whitelist+0x40>
  return status;
 800fe6a:	79fb      	ldrb	r3, [r7, #7]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3720      	adds	r7, #32
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b0cc      	sub	sp, #304	; 0x130
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe80:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fe84:	801a      	strh	r2, [r3, #0]
 800fe86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe8a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800fe8e:	460a      	mov	r2, r1
 800fe90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800fe92:	f107 0310 	add.w	r3, r7, #16
 800fe96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fe9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fea2:	2200      	movs	r2, #0
 800fea4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800feac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800feb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800feb4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800feb8:	8812      	ldrh	r2, [r2, #0]
 800feba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800febc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fec0:	3302      	adds	r3, #2
 800fec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800fec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800feca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fece:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800fed2:	7812      	ldrb	r2, [r2, #0]
 800fed4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800feda:	3301      	adds	r3, #1
 800fedc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fee0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fee4:	2218      	movs	r2, #24
 800fee6:	2100      	movs	r1, #0
 800fee8:	4618      	mov	r0, r3
 800feea:	f000 fcc7 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800feee:	233f      	movs	r3, #63	; 0x3f
 800fef0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800fef4:	23a5      	movs	r3, #165	; 0xa5
 800fef6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fefa:	f107 0310 	add.w	r3, r7, #16
 800fefe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ff02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ff06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ff0a:	f107 030f 	add.w	r3, r7, #15
 800ff0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ff12:	2301      	movs	r3, #1
 800ff14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 ff36 	bl	8010d90 <hci_send_req>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	da01      	bge.n	800ff2e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800ff2a:	23ff      	movs	r3, #255	; 0xff
 800ff2c:	e004      	b.n	800ff38 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800ff2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ff36:	781b      	ldrb	r3, [r3, #0]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b088      	sub	sp, #32
 800ff46:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff4c:	f107 0308 	add.w	r3, r7, #8
 800ff50:	2218      	movs	r2, #24
 800ff52:	2100      	movs	r1, #0
 800ff54:	4618      	mov	r0, r3
 800ff56:	f000 fc91 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ff5a:	233f      	movs	r3, #63	; 0x3f
 800ff5c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ff5e:	f240 1301 	movw	r3, #257	; 0x101
 800ff62:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ff64:	1dfb      	adds	r3, r7, #7
 800ff66:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff6c:	f107 0308 	add.w	r3, r7, #8
 800ff70:	2100      	movs	r1, #0
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 ff0c 	bl	8010d90 <hci_send_req>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	da01      	bge.n	800ff82 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ff7e:	23ff      	movs	r3, #255	; 0xff
 800ff80:	e000      	b.n	800ff84 <aci_gatt_init+0x42>
  return status;
 800ff82:	79fb      	ldrb	r3, [r7, #7]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3720      	adds	r7, #32
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800ff8c:	b590      	push	{r4, r7, lr}
 800ff8e:	b0cf      	sub	sp, #316	; 0x13c
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	4604      	mov	r4, r0
 800ff94:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800ff98:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ff9c:	6001      	str	r1, [r0, #0]
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffa6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ffaa:	4622      	mov	r2, r4
 800ffac:	701a      	strb	r2, [r3, #0]
 800ffae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffb2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	701a      	strb	r2, [r3, #0]
 800ffba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffbe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ffc2:	460a      	mov	r2, r1
 800ffc4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ffc6:	f107 0310 	add.w	r3, r7, #16
 800ffca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ffce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffd2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d00a      	beq.n	800fff2 <aci_gatt_add_service+0x66>
 800ffdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffe0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2b02      	cmp	r3, #2
 800ffe8:	d101      	bne.n	800ffee <aci_gatt_add_service+0x62>
 800ffea:	2311      	movs	r3, #17
 800ffec:	e002      	b.n	800fff4 <aci_gatt_add_service+0x68>
 800ffee:	2301      	movs	r3, #1
 800fff0:	e000      	b.n	800fff4 <aci_gatt_add_service+0x68>
 800fff2:	2303      	movs	r3, #3
 800fff4:	f107 0210 	add.w	r2, r7, #16
 800fff8:	4413      	add	r3, r2
 800fffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800fffe:	f107 030c 	add.w	r3, r7, #12
 8010002:	2203      	movs	r2, #3
 8010004:	2100      	movs	r1, #0
 8010006:	4618      	mov	r0, r3
 8010008:	f000 fc38 	bl	801087c <Osal_MemSet>
  int index_input = 0;
 801000c:	2300      	movs	r3, #0
 801000e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8010012:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010016:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801001a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 801001e:	7812      	ldrb	r2, [r2, #0]
 8010020:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010022:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010026:	3301      	adds	r3, #1
 8010028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 801002c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010030:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d002      	beq.n	8010040 <aci_gatt_add_service+0xb4>
 801003a:	2b02      	cmp	r3, #2
 801003c:	d004      	beq.n	8010048 <aci_gatt_add_service+0xbc>
 801003e:	e007      	b.n	8010050 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8010040:	2302      	movs	r3, #2
 8010042:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8010046:	e005      	b.n	8010054 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8010048:	2310      	movs	r3, #16
 801004a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 801004e:	e001      	b.n	8010054 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8010050:	2397      	movs	r3, #151	; 0x97
 8010052:	e06c      	b.n	801012e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010054:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010058:	1c58      	adds	r0, r3, #1
 801005a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 801005e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010062:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010066:	6819      	ldr	r1, [r3, #0]
 8010068:	f000 fbf8 	bl	801085c <Osal_MemCpy>
    index_input += size;
 801006c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8010070:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010074:	4413      	add	r3, r2
 8010076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 801007a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801007e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010082:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010086:	7812      	ldrb	r2, [r2, #0]
 8010088:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801008a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801008e:	3301      	adds	r3, #1
 8010090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010098:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801009c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80100a0:	7812      	ldrb	r2, [r2, #0]
 80100a2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80100a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80100a8:	3301      	adds	r3, #1
 80100aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80100ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80100b2:	2218      	movs	r2, #24
 80100b4:	2100      	movs	r1, #0
 80100b6:	4618      	mov	r0, r3
 80100b8:	f000 fbe0 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 80100bc:	233f      	movs	r3, #63	; 0x3f
 80100be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80100c2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80100c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80100ca:	f107 0310 	add.w	r3, r7, #16
 80100ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80100d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80100d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80100da:	f107 030c 	add.w	r3, r7, #12
 80100de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80100e2:	2303      	movs	r3, #3
 80100e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80100e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80100ec:	2100      	movs	r1, #0
 80100ee:	4618      	mov	r0, r3
 80100f0:	f000 fe4e 	bl	8010d90 <hci_send_req>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	da01      	bge.n	80100fe <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80100fa:	23ff      	movs	r3, #255	; 0xff
 80100fc:	e017      	b.n	801012e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80100fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d005      	beq.n	8010118 <aci_gatt_add_service+0x18c>
    return resp.Status;
 801010c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	e00a      	b.n	801012e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8010118:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801011c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010120:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010124:	b29a      	uxth	r2, r3
 8010126:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801012a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8010134:	46bd      	mov	sp, r7
 8010136:	bd90      	pop	{r4, r7, pc}

08010138 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010138:	b590      	push	{r4, r7, lr}
 801013a:	b0d1      	sub	sp, #324	; 0x144
 801013c:	af00      	add	r7, sp, #0
 801013e:	4604      	mov	r4, r0
 8010140:	4608      	mov	r0, r1
 8010142:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8010146:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801014a:	600a      	str	r2, [r1, #0]
 801014c:	4619      	mov	r1, r3
 801014e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010152:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010156:	4622      	mov	r2, r4
 8010158:	801a      	strh	r2, [r3, #0]
 801015a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801015e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010162:	4602      	mov	r2, r0
 8010164:	701a      	strb	r2, [r3, #0]
 8010166:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801016a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 801016e:	460a      	mov	r2, r1
 8010170:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010172:	f107 0318 	add.w	r3, r7, #24
 8010176:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801017a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801017e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d00a      	beq.n	801019e <aci_gatt_add_char+0x66>
 8010188:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801018c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b02      	cmp	r3, #2
 8010194:	d101      	bne.n	801019a <aci_gatt_add_char+0x62>
 8010196:	2313      	movs	r3, #19
 8010198:	e002      	b.n	80101a0 <aci_gatt_add_char+0x68>
 801019a:	2303      	movs	r3, #3
 801019c:	e000      	b.n	80101a0 <aci_gatt_add_char+0x68>
 801019e:	2305      	movs	r3, #5
 80101a0:	f107 0218 	add.w	r2, r7, #24
 80101a4:	4413      	add	r3, r2
 80101a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80101aa:	f107 0314 	add.w	r3, r7, #20
 80101ae:	2203      	movs	r2, #3
 80101b0:	2100      	movs	r1, #0
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fb62 	bl	801087c <Osal_MemSet>
  int index_input = 0;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80101be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80101c2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80101c6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80101ca:	8812      	ldrh	r2, [r2, #0]
 80101cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80101ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101d2:	3302      	adds	r3, #2
 80101d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80101d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80101dc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80101e0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80101e4:	7812      	ldrb	r2, [r2, #0]
 80101e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80101e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101ec:	3301      	adds	r3, #1
 80101ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80101f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80101f6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d002      	beq.n	8010206 <aci_gatt_add_char+0xce>
 8010200:	2b02      	cmp	r3, #2
 8010202:	d004      	beq.n	801020e <aci_gatt_add_char+0xd6>
 8010204:	e007      	b.n	8010216 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8010206:	2302      	movs	r3, #2
 8010208:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 801020c:	e005      	b.n	801021a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 801020e:	2310      	movs	r3, #16
 8010210:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8010214:	e001      	b.n	801021a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8010216:	2397      	movs	r3, #151	; 0x97
 8010218:	e091      	b.n	801033e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 801021a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801021e:	1cd8      	adds	r0, r3, #3
 8010220:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8010224:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010228:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801022c:	6819      	ldr	r1, [r3, #0]
 801022e:	f000 fb15 	bl	801085c <Osal_MemCpy>
    index_input += size;
 8010232:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010236:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801023a:	4413      	add	r3, r2
 801023c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010240:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010244:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010248:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 801024c:	8812      	ldrh	r2, [r2, #0]
 801024e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010250:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010254:	3302      	adds	r3, #2
 8010256:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 801025a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801025e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8010262:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010264:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010268:	3301      	adds	r3, #1
 801026a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801026e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010272:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8010276:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010278:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801027c:	3301      	adds	r3, #1
 801027e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010282:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010286:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 801028a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 801028c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010290:	3301      	adds	r3, #1
 8010292:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010296:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801029a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 801029e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80102a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80102a4:	3301      	adds	r3, #1
 80102a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80102aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80102ae:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80102b2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80102b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80102b8:	3301      	adds	r3, #1
 80102ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80102be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80102c2:	2218      	movs	r2, #24
 80102c4:	2100      	movs	r1, #0
 80102c6:	4618      	mov	r0, r3
 80102c8:	f000 fad8 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 80102cc:	233f      	movs	r3, #63	; 0x3f
 80102ce:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80102d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80102d6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80102da:	f107 0318 	add.w	r3, r7, #24
 80102de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80102e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80102e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80102ea:	f107 0314 	add.w	r3, r7, #20
 80102ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80102f2:	2303      	movs	r3, #3
 80102f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80102f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80102fc:	2100      	movs	r1, #0
 80102fe:	4618      	mov	r0, r3
 8010300:	f000 fd46 	bl	8010d90 <hci_send_req>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	da01      	bge.n	801030e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 801030a:	23ff      	movs	r3, #255	; 0xff
 801030c:	e017      	b.n	801033e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 801030e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d005      	beq.n	8010328 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 801031c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	e00a      	b.n	801033e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010328:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801032c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010330:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010334:	b29a      	uxth	r2, r3
 8010336:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801033a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8010344:	46bd      	mov	sp, r7
 8010346:	bd90      	pop	{r4, r7, pc}

08010348 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010348:	b5b0      	push	{r4, r5, r7, lr}
 801034a:	b0cc      	sub	sp, #304	; 0x130
 801034c:	af00      	add	r7, sp, #0
 801034e:	4605      	mov	r5, r0
 8010350:	460c      	mov	r4, r1
 8010352:	4610      	mov	r0, r2
 8010354:	4619      	mov	r1, r3
 8010356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801035a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801035e:	462a      	mov	r2, r5
 8010360:	801a      	strh	r2, [r3, #0]
 8010362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801036a:	4622      	mov	r2, r4
 801036c:	801a      	strh	r2, [r3, #0]
 801036e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010372:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8010376:	4602      	mov	r2, r0
 8010378:	701a      	strb	r2, [r3, #0]
 801037a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801037e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010382:	460a      	mov	r2, r1
 8010384:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010386:	f107 0310 	add.w	r3, r7, #16
 801038a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801038e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010392:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010396:	2200      	movs	r2, #0
 8010398:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801039a:	2300      	movs	r3, #0
 801039c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80103a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103a8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80103ac:	8812      	ldrh	r2, [r2, #0]
 80103ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80103b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103b4:	3302      	adds	r3, #2
 80103b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80103ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80103c6:	8812      	ldrh	r2, [r2, #0]
 80103c8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80103ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103ce:	3302      	adds	r3, #2
 80103d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80103d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103dc:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80103e0:	7812      	ldrb	r2, [r2, #0]
 80103e2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80103e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80103e8:	3301      	adds	r3, #1
 80103ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80103ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80103f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80103f6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80103fa:	7812      	ldrb	r2, [r2, #0]
 80103fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80103fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010402:	3301      	adds	r3, #1
 8010404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8010408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801040c:	1d98      	adds	r0, r3, #6
 801040e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010412:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	461a      	mov	r2, r3
 801041a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801041e:	f000 fa1d 	bl	801085c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8010422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010426:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010430:	4413      	add	r3, r2
 8010432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801043a:	2218      	movs	r2, #24
 801043c:	2100      	movs	r1, #0
 801043e:	4618      	mov	r0, r3
 8010440:	f000 fa1c 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 8010444:	233f      	movs	r3, #63	; 0x3f
 8010446:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 801044a:	f44f 7383 	mov.w	r3, #262	; 0x106
 801044e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010452:	f107 0310 	add.w	r3, r7, #16
 8010456:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801045a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801045e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010462:	f107 030f 	add.w	r3, r7, #15
 8010466:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801046a:	2301      	movs	r3, #1
 801046c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010470:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010474:	2100      	movs	r1, #0
 8010476:	4618      	mov	r0, r3
 8010478:	f000 fc8a 	bl	8010d90 <hci_send_req>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	da01      	bge.n	8010486 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010482:	23ff      	movs	r3, #255	; 0xff
 8010484:	e004      	b.n	8010490 <aci_gatt_update_char_value+0x148>
  return status;
 8010486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801048a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801048e:	781b      	ldrb	r3, [r3, #0]
}
 8010490:	4618      	mov	r0, r3
 8010492:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010496:	46bd      	mov	sp, r7
 8010498:	bdb0      	pop	{r4, r5, r7, pc}

0801049a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b0cc      	sub	sp, #304	; 0x130
 801049e:	af00      	add	r7, sp, #0
 80104a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104ae:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80104b2:	4602      	mov	r2, r0
 80104b4:	701a      	strb	r2, [r3, #0]
 80104b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104ba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80104be:	460a      	mov	r2, r1
 80104c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80104c2:	f107 0310 	add.w	r3, r7, #16
 80104c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80104ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80104ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80104d2:	2200      	movs	r2, #0
 80104d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80104dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80104e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80104e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80104e8:	7812      	ldrb	r2, [r2, #0]
 80104ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80104ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80104f0:	3301      	adds	r3, #1
 80104f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80104f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80104fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80104fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010502:	7812      	ldrb	r2, [r2, #0]
 8010504:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801050a:	3301      	adds	r3, #1
 801050c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010514:	1c98      	adds	r0, r3, #2
 8010516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801051a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801051e:	781a      	ldrb	r2, [r3, #0]
 8010520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010528:	6819      	ldr	r1, [r3, #0]
 801052a:	f000 f997 	bl	801085c <Osal_MemCpy>
  index_input += Length;
 801052e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010532:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801053c:	4413      	add	r3, r2
 801053e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010546:	2218      	movs	r2, #24
 8010548:	2100      	movs	r1, #0
 801054a:	4618      	mov	r0, r3
 801054c:	f000 f996 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 8010550:	233f      	movs	r3, #63	; 0x3f
 8010552:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8010556:	230c      	movs	r3, #12
 8010558:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801055c:	f107 0310 	add.w	r3, r7, #16
 8010560:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010568:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801056c:	f107 030f 	add.w	r3, r7, #15
 8010570:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010574:	2301      	movs	r3, #1
 8010576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801057a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801057e:	2100      	movs	r1, #0
 8010580:	4618      	mov	r0, r3
 8010582:	f000 fc05 	bl	8010d90 <hci_send_req>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	da01      	bge.n	8010590 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 801058c:	23ff      	movs	r3, #255	; 0xff
 801058e:	e004      	b.n	801059a <aci_hal_write_config_data+0x100>
  return status;
 8010590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010594:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010598:	781b      	ldrb	r3, [r3, #0]
}
 801059a:	4618      	mov	r0, r3
 801059c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b0cc      	sub	sp, #304	; 0x130
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4602      	mov	r2, r0
 80105ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105b0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80105b4:	701a      	strb	r2, [r3, #0]
 80105b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105ba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80105be:	460a      	mov	r2, r1
 80105c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80105c2:	f107 0310 	add.w	r3, r7, #16
 80105c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80105ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80105ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80105d2:	2200      	movs	r2, #0
 80105d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80105dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80105e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80105e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80105e8:	7812      	ldrb	r2, [r2, #0]
 80105ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80105ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80105f0:	3301      	adds	r3, #1
 80105f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80105f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80105fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80105fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010602:	7812      	ldrb	r2, [r2, #0]
 8010604:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010606:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801060a:	3301      	adds	r3, #1
 801060c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010614:	2218      	movs	r2, #24
 8010616:	2100      	movs	r1, #0
 8010618:	4618      	mov	r0, r3
 801061a:	f000 f92f 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 801061e:	233f      	movs	r3, #63	; 0x3f
 8010620:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8010624:	230f      	movs	r3, #15
 8010626:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801062a:	f107 0310 	add.w	r3, r7, #16
 801062e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010636:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801063a:	f107 030f 	add.w	r3, r7, #15
 801063e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010642:	2301      	movs	r3, #1
 8010644:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801064c:	2100      	movs	r1, #0
 801064e:	4618      	mov	r0, r3
 8010650:	f000 fb9e 	bl	8010d90 <hci_send_req>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	da01      	bge.n	801065e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 801065a:	23ff      	movs	r3, #255	; 0xff
 801065c:	e004      	b.n	8010668 <aci_hal_set_tx_power_level+0xc4>
  return status;
 801065e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010662:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010666:	781b      	ldrb	r3, [r3, #0]
}
 8010668:	4618      	mov	r0, r3
 801066a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b0cc      	sub	sp, #304	; 0x130
 8010676:	af00      	add	r7, sp, #0
 8010678:	4602      	mov	r2, r0
 801067a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801067e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010682:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8010684:	f107 0310 	add.w	r3, r7, #16
 8010688:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801068c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010690:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010698:	2300      	movs	r3, #0
 801069a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801069e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80106a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80106a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80106aa:	8812      	ldrh	r2, [r2, #0]
 80106ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80106ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80106b2:	3302      	adds	r3, #2
 80106b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80106b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106bc:	2218      	movs	r2, #24
 80106be:	2100      	movs	r1, #0
 80106c0:	4618      	mov	r0, r3
 80106c2:	f000 f8db 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x3f;
 80106c6:	233f      	movs	r3, #63	; 0x3f
 80106c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80106cc:	2318      	movs	r3, #24
 80106ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80106d2:	f107 0310 	add.w	r3, r7, #16
 80106d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80106da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80106de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80106e2:	f107 030f 	add.w	r3, r7, #15
 80106e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80106ea:	2301      	movs	r3, #1
 80106ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80106f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80106f4:	2100      	movs	r1, #0
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 fb4a 	bl	8010d90 <hci_send_req>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	da01      	bge.n	8010706 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8010702:	23ff      	movs	r3, #255	; 0xff
 8010704:	e004      	b.n	8010710 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8010706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801070a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801070e:	781b      	ldrb	r3, [r3, #0]
}
 8010710:	4618      	mov	r0, r3
 8010712:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b088      	sub	sp, #32
 801071e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010720:	2300      	movs	r3, #0
 8010722:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010724:	f107 0308 	add.w	r3, r7, #8
 8010728:	2218      	movs	r2, #24
 801072a:	2100      	movs	r1, #0
 801072c:	4618      	mov	r0, r3
 801072e:	f000 f8a5 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x03;
 8010732:	2303      	movs	r3, #3
 8010734:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8010736:	2303      	movs	r3, #3
 8010738:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801073a:	1dfb      	adds	r3, r7, #7
 801073c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801073e:	2301      	movs	r3, #1
 8010740:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010742:	f107 0308 	add.w	r3, r7, #8
 8010746:	2100      	movs	r1, #0
 8010748:	4618      	mov	r0, r3
 801074a:	f000 fb21 	bl	8010d90 <hci_send_req>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	da01      	bge.n	8010758 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010754:	23ff      	movs	r3, #255	; 0xff
 8010756:	e000      	b.n	801075a <hci_reset+0x40>
  return status;
 8010758:	79fb      	ldrb	r3, [r7, #7]
}
 801075a:	4618      	mov	r0, r3
 801075c:	3720      	adds	r7, #32
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8010762:	b590      	push	{r4, r7, lr}
 8010764:	b0cd      	sub	sp, #308	; 0x134
 8010766:	af00      	add	r7, sp, #0
 8010768:	4604      	mov	r4, r0
 801076a:	4608      	mov	r0, r1
 801076c:	4611      	mov	r1, r2
 801076e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010772:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010776:	4622      	mov	r2, r4
 8010778:	701a      	strb	r2, [r3, #0]
 801077a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801077e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010782:	4602      	mov	r2, r0
 8010784:	701a      	strb	r2, [r3, #0]
 8010786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801078a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801078e:	460a      	mov	r2, r1
 8010790:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8010792:	f107 0310 	add.w	r3, r7, #16
 8010796:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801079a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801079e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80107a2:	2200      	movs	r2, #0
 80107a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80107ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80107b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80107b4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80107b8:	7812      	ldrb	r2, [r2, #0]
 80107ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80107bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80107c0:	3301      	adds	r3, #1
 80107c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80107c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80107ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80107ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80107d2:	7812      	ldrb	r2, [r2, #0]
 80107d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80107d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80107da:	3301      	adds	r3, #1
 80107dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80107e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80107e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80107e8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80107ec:	7812      	ldrb	r2, [r2, #0]
 80107ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80107f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80107f4:	3301      	adds	r3, #1
 80107f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80107fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80107fe:	2218      	movs	r2, #24
 8010800:	2100      	movs	r1, #0
 8010802:	4618      	mov	r0, r3
 8010804:	f000 f83a 	bl	801087c <Osal_MemSet>
  rq.ogf = 0x08;
 8010808:	2308      	movs	r3, #8
 801080a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 801080e:	2331      	movs	r3, #49	; 0x31
 8010810:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010814:	f107 0310 	add.w	r3, r7, #16
 8010818:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801081c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010820:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010824:	f107 030f 	add.w	r3, r7, #15
 8010828:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801082c:	2301      	movs	r3, #1
 801082e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010836:	2100      	movs	r1, #0
 8010838:	4618      	mov	r0, r3
 801083a:	f000 faa9 	bl	8010d90 <hci_send_req>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	da01      	bge.n	8010848 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8010844:	23ff      	movs	r3, #255	; 0xff
 8010846:	e004      	b.n	8010852 <hci_le_set_default_phy+0xf0>
  return status;
 8010848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801084c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010850:	781b      	ldrb	r3, [r3, #0]
}
 8010852:	4618      	mov	r0, r3
 8010854:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8010858:	46bd      	mov	sp, r7
 801085a:	bd90      	pop	{r4, r7, pc}

0801085c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	68b9      	ldr	r1, [r7, #8]
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	f003 fbe9 	bl	8014044 <memcpy>
 8010872:	4603      	mov	r3, r0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	68b9      	ldr	r1, [r7, #8]
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f003 fbe7 	bl	8014060 <memset>
 8010892:	4603      	mov	r3, r0
}
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 801089c:	b480      	push	{r7}
 801089e:	af00      	add	r7, sp, #0
  return;
 80108a0:	bf00      	nop
}
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80108aa:	b480      	push	{r7}
 80108ac:	af00      	add	r7, sp, #0
  return;
 80108ae:	bf00      	nop
}
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr

080108b8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80108b8:	b480      	push	{r7}
 80108ba:	af00      	add	r7, sp, #0
  return;
 80108bc:	bf00      	nop
}
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80108c6:	b480      	push	{r7}
 80108c8:	af00      	add	r7, sp, #0
  return;
 80108ca:	bf00      	nop
}
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80108d4:	b480      	push	{r7}
 80108d6:	af00      	add	r7, sp, #0
  return;
 80108d8:	bf00      	nop
}
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80108e2:	b480      	push	{r7}
 80108e4:	af00      	add	r7, sp, #0
  return;
 80108e6:	bf00      	nop
}
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr

080108f0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80108f0:	b480      	push	{r7}
 80108f2:	af00      	add	r7, sp, #0
  return;
 80108f4:	bf00      	nop
}
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80108fe:	b480      	push	{r7}
 8010900:	af00      	add	r7, sp, #0
  return;
 8010902:	bf00      	nop
}
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801090c:	b480      	push	{r7}
 801090e:	af00      	add	r7, sp, #0
  return;
 8010910:	bf00      	nop
}
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr

0801091a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801091a:	b480      	push	{r7}
 801091c:	af00      	add	r7, sp, #0
  return;
 801091e:	bf00      	nop
}
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
  return;
 801092c:	bf00      	nop
}
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr

08010936 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8010936:	b480      	push	{r7}
 8010938:	af00      	add	r7, sp, #0
  return;
 801093a:	bf00      	nop
}
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010944:	b480      	push	{r7}
 8010946:	af00      	add	r7, sp, #0
  return;
 8010948:	bf00      	nop
}
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr

08010952 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010952:	b480      	push	{r7}
 8010954:	af00      	add	r7, sp, #0
  return;
 8010956:	bf00      	nop
}
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010960:	b480      	push	{r7}
 8010962:	af00      	add	r7, sp, #0
  return;
 8010964:	bf00      	nop
}
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr

0801096e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 801096e:	b480      	push	{r7}
 8010970:	af00      	add	r7, sp, #0
  return;
 8010972:	bf00      	nop
}
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr

0801097c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 801097c:	b480      	push	{r7}
 801097e:	af00      	add	r7, sp, #0
  return;
 8010980:	bf00      	nop
}
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr
	...

0801098c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 801098c:	b580      	push	{r7, lr}
 801098e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010990:	4b04      	ldr	r3, [pc, #16]	; (80109a4 <SVCCTL_Init+0x18>)
 8010992:	2200      	movs	r2, #0
 8010994:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010996:	4b04      	ldr	r3, [pc, #16]	; (80109a8 <SVCCTL_Init+0x1c>)
 8010998:	2200      	movs	r2, #0
 801099a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 801099c:	f000 f806 	bl	80109ac <SVCCTL_SvcInit>

  return;
 80109a0:	bf00      	nop
}
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20000c98 	.word	0x20000c98
 80109a8:	20000cb8 	.word	0x20000cb8

080109ac <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	af00      	add	r7, sp, #0
  BAS_Init();
 80109b0:	f7ff ff74 	bl	801089c <BAS_Init>

  BLS_Init();
 80109b4:	f7ff ff79 	bl	80108aa <BLS_Init>

  CRS_STM_Init();
 80109b8:	f7ff ff7e 	bl	80108b8 <CRS_STM_Init>

  DIS_Init();
 80109bc:	f7ff ff83 	bl	80108c6 <DIS_Init>

  EDS_STM_Init();
 80109c0:	f7ff ff88 	bl	80108d4 <EDS_STM_Init>

  HIDS_Init();
 80109c4:	f7ff ff8d 	bl	80108e2 <HIDS_Init>

  HRS_Init();
 80109c8:	f7ff ff92 	bl	80108f0 <HRS_Init>

  HTS_Init();
 80109cc:	f7ff ff97 	bl	80108fe <HTS_Init>

  IAS_Init();
 80109d0:	f7ff ff9c 	bl	801090c <IAS_Init>

  LLS_Init();
 80109d4:	f7ff ffa1 	bl	801091a <LLS_Init>

  TPS_Init();
 80109d8:	f7ff ffa6 	bl	8010928 <TPS_Init>

  MOTENV_STM_Init();
 80109dc:	f7ff ffab 	bl	8010936 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80109e0:	f7ff ffb0 	bl	8010944 <P2PS_STM_Init>

  ZDD_STM_Init();
 80109e4:	f7ff ffb5 	bl	8010952 <ZDD_STM_Init>

  OTAS_STM_Init();
 80109e8:	f7ff ffba 	bl	8010960 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80109ec:	f7ff ffc6 	bl	801097c <BVOPUS_STM_Init>

  MESH_Init();
 80109f0:	f7ff ffbd 	bl	801096e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80109f4:	f002 fab4 	bl	8012f60 <SVCCTL_InitCustomSvc>
  
  return;
 80109f8:	bf00      	nop
}
 80109fa:	bd80      	pop	{r7, pc}

080109fc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8010a04:	4b09      	ldr	r3, [pc, #36]	; (8010a2c <SVCCTL_RegisterSvcHandler+0x30>)
 8010a06:	7f1b      	ldrb	r3, [r3, #28]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4a08      	ldr	r2, [pc, #32]	; (8010a2c <SVCCTL_RegisterSvcHandler+0x30>)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8010a12:	4b06      	ldr	r3, [pc, #24]	; (8010a2c <SVCCTL_RegisterSvcHandler+0x30>)
 8010a14:	7f1b      	ldrb	r3, [r3, #28]
 8010a16:	3301      	adds	r3, #1
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	4b04      	ldr	r3, [pc, #16]	; (8010a2c <SVCCTL_RegisterSvcHandler+0x30>)
 8010a1c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010a1e:	bf00      	nop
}
 8010a20:	370c      	adds	r7, #12
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	20000c98 	.word	0x20000c98

08010a30 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	2bff      	cmp	r3, #255	; 0xff
 8010a48:	d125      	bne.n	8010a96 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	3302      	adds	r3, #2
 8010a4e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	881b      	ldrh	r3, [r3, #0]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a5e:	d118      	bne.n	8010a92 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010a60:	2300      	movs	r3, #0
 8010a62:	757b      	strb	r3, [r7, #21]
 8010a64:	e00d      	b.n	8010a82 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8010a66:	7d7b      	ldrb	r3, [r7, #21]
 8010a68:	4a1a      	ldr	r2, [pc, #104]	; (8010ad4 <SVCCTL_UserEvtRx+0xa4>)
 8010a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	4798      	blx	r3
 8010a72:	4603      	mov	r3, r0
 8010a74:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8010a76:	7dfb      	ldrb	r3, [r7, #23]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d108      	bne.n	8010a8e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010a7c:	7d7b      	ldrb	r3, [r7, #21]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	757b      	strb	r3, [r7, #21]
 8010a82:	4b14      	ldr	r3, [pc, #80]	; (8010ad4 <SVCCTL_UserEvtRx+0xa4>)
 8010a84:	7f1b      	ldrb	r3, [r3, #28]
 8010a86:	7d7a      	ldrb	r2, [r7, #21]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d3ec      	bcc.n	8010a66 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010a8c:	e002      	b.n	8010a94 <SVCCTL_UserEvtRx+0x64>
              break;
 8010a8e:	bf00      	nop
          break;
 8010a90:	e000      	b.n	8010a94 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8010a92:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8010a94:	e000      	b.n	8010a98 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8010a96:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8010a98:	7dfb      	ldrb	r3, [r7, #23]
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d00f      	beq.n	8010abe <SVCCTL_UserEvtRx+0x8e>
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	dc10      	bgt.n	8010ac4 <SVCCTL_UserEvtRx+0x94>
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d002      	beq.n	8010aac <SVCCTL_UserEvtRx+0x7c>
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d006      	beq.n	8010ab8 <SVCCTL_UserEvtRx+0x88>
 8010aaa:	e00b      	b.n	8010ac4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 fff1 	bl	8011a94 <SVCCTL_App_Notification>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	75bb      	strb	r3, [r7, #22]
      break;
 8010ab6:	e008      	b.n	8010aca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	75bb      	strb	r3, [r7, #22]
      break;
 8010abc:	e005      	b.n	8010aca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	75bb      	strb	r3, [r7, #22]
      break;
 8010ac2:	e002      	b.n	8010aca <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	75bb      	strb	r3, [r7, #22]
      break;
 8010ac8:	bf00      	nop
  }

  return (return_status);
 8010aca:	7dbb      	ldrb	r3, [r7, #22]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3718      	adds	r7, #24
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	20000c98 	.word	0x20000c98

08010ad8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010ae0:	f107 030c 	add.w	r3, r7, #12
 8010ae4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	212d      	movs	r1, #45	; 0x2d
 8010af0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8010af4:	f000 fae2 	bl	80110bc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	330b      	adds	r3, #11
 8010afc:	78db      	ldrb	r3, [r3, #3]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3720      	adds	r7, #32
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b088      	sub	sp, #32
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010b0e:	f107 030c 	add.w	r3, r7, #12
 8010b12:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	210f      	movs	r1, #15
 8010b1e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8010b22:	f000 facb 	bl	80110bc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	330b      	adds	r3, #11
 8010b2a:	78db      	ldrb	r3, [r3, #3]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3720      	adds	r7, #32
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b088      	sub	sp, #32
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010b3c:	f107 030c 	add.w	r3, r7, #12
 8010b40:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	2110      	movs	r1, #16
 8010b48:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8010b4c:	f000 fab6 	bl	80110bc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	330b      	adds	r3, #11
 8010b54:	78db      	ldrb	r3, [r3, #3]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3720      	adds	r7, #32
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
	...

08010b60 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010b60:	b480      	push	{r7}
 8010b62:	b08b      	sub	sp, #44	; 0x2c
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010b80:	2300      	movs	r3, #0
 8010b82:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010b84:	2300      	movs	r3, #0
 8010b86:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010b88:	4b4a      	ldr	r3, [pc, #296]	; (8010cb4 <SHCI_GetWirelessFwInfo+0x154>)
 8010b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010b90:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010b9a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	4a44      	ldr	r2, [pc, #272]	; (8010cb8 <SHCI_GetWirelessFwInfo+0x158>)
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d10f      	bne.n	8010bcc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	695b      	ldr	r3, [r3, #20]
 8010bb0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	69db      	ldr	r3, [r3, #28]
 8010bbc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	68db      	ldr	r3, [r3, #12]
 8010bc2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	691b      	ldr	r3, [r3, #16]
 8010bc8:	617b      	str	r3, [r7, #20]
 8010bca:	e01a      	b.n	8010c02 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010bd4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010bd8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	695b      	ldr	r3, [r3, #20]
 8010be8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	699b      	ldr	r3, [r3, #24]
 8010bf0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c04:	0e1b      	lsrs	r3, r3, #24
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0e:	0c1b      	lsrs	r3, r3, #16
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c18:	0a1b      	lsrs	r3, r3, #8
 8010c1a:	b2da      	uxtb	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	091b      	lsrs	r3, r3, #4
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	f003 030f 	and.w	r3, r3, #15
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	f003 030f 	and.w	r3, r3, #15
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010c3e:	6a3b      	ldr	r3, [r7, #32]
 8010c40:	0e1b      	lsrs	r3, r3, #24
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	0c1b      	lsrs	r3, r3, #16
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8010c52:	6a3b      	ldr	r3, [r7, #32]
 8010c54:	0a1b      	lsrs	r3, r3, #8
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010c64:	69fb      	ldr	r3, [r7, #28]
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	0e1b      	lsrs	r3, r3, #24
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	0c1b      	lsrs	r3, r3, #16
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	0a1b      	lsrs	r3, r3, #8
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	0e1b      	lsrs	r3, r3, #24
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	0c1b      	lsrs	r3, r3, #16
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	b2da      	uxtb	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8010ca6:	2300      	movs	r3, #0
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	372c      	adds	r7, #44	; 0x2c
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr
 8010cb4:	58004000 	.word	0x58004000
 8010cb8:	a94656b9 	.word	0xa94656b9

08010cbc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	4a08      	ldr	r2, [pc, #32]	; (8010cec <hci_init+0x30>)
 8010ccc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8010cce:	4a08      	ldr	r2, [pc, #32]	; (8010cf0 <hci_init+0x34>)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8010cd4:	4806      	ldr	r0, [pc, #24]	; (8010cf0 <hci_init+0x34>)
 8010cd6:	f000 f973 	bl	8010fc0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 f8d4 	bl	8010e8c <TlInit>

  return;
 8010ce4:	bf00      	nop
}
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	200011a0 	.word	0x200011a0
 8010cf0:	20001178 	.word	0x20001178

08010cf4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010cfa:	4822      	ldr	r0, [pc, #136]	; (8010d84 <hci_user_evt_proc+0x90>)
 8010cfc:	f000 fd50 	bl	80117a0 <LST_is_empty>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d12b      	bne.n	8010d5e <hci_user_evt_proc+0x6a>
 8010d06:	4b20      	ldr	r3, [pc, #128]	; (8010d88 <hci_user_evt_proc+0x94>)
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d027      	beq.n	8010d5e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010d0e:	f107 030c 	add.w	r3, r7, #12
 8010d12:	4619      	mov	r1, r3
 8010d14:	481b      	ldr	r0, [pc, #108]	; (8010d84 <hci_user_evt_proc+0x90>)
 8010d16:	f000 fdd2 	bl	80118be <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8010d1a:	4b1c      	ldr	r3, [pc, #112]	; (8010d8c <hci_user_evt_proc+0x98>)
 8010d1c:	69db      	ldr	r3, [r3, #28]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00c      	beq.n	8010d3c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8010d26:	2301      	movs	r3, #1
 8010d28:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010d2a:	4b18      	ldr	r3, [pc, #96]	; (8010d8c <hci_user_evt_proc+0x98>)
 8010d2c:	69db      	ldr	r3, [r3, #28]
 8010d2e:	1d3a      	adds	r2, r7, #4
 8010d30:	4610      	mov	r0, r2
 8010d32:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8010d34:	793a      	ldrb	r2, [r7, #4]
 8010d36:	4b14      	ldr	r3, [pc, #80]	; (8010d88 <hci_user_evt_proc+0x94>)
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	e002      	b.n	8010d42 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010d3c:	4b12      	ldr	r3, [pc, #72]	; (8010d88 <hci_user_evt_proc+0x94>)
 8010d3e:	2201      	movs	r2, #1
 8010d40:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8010d42:	4b11      	ldr	r3, [pc, #68]	; (8010d88 <hci_user_evt_proc+0x94>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d004      	beq.n	8010d54 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f000 fc03 	bl	8011558 <TL_MM_EvtDone>
 8010d52:	e004      	b.n	8010d5e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	4619      	mov	r1, r3
 8010d58:	480a      	ldr	r0, [pc, #40]	; (8010d84 <hci_user_evt_proc+0x90>)
 8010d5a:	f000 fd43 	bl	80117e4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010d5e:	4809      	ldr	r0, [pc, #36]	; (8010d84 <hci_user_evt_proc+0x90>)
 8010d60:	f000 fd1e 	bl	80117a0 <LST_is_empty>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d107      	bne.n	8010d7a <hci_user_evt_proc+0x86>
 8010d6a:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <hci_user_evt_proc+0x94>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8010d72:	4804      	ldr	r0, [pc, #16]	; (8010d84 <hci_user_evt_proc+0x90>)
 8010d74:	f001 fcf4 	bl	8012760 <hci_notify_asynch_evt>
  }


  return;
 8010d78:	bf00      	nop
 8010d7a:	bf00      	nop
}
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	20000cc0 	.word	0x20000cc0
 8010d88:	20000ccc 	.word	0x20000ccc
 8010d8c:	20001178 	.word	0x20001178

08010d90 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b088      	sub	sp, #32
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	f000 f8cb 	bl	8010f38 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8010da2:	2300      	movs	r3, #0
 8010da4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	885b      	ldrh	r3, [r3, #2]
 8010daa:	b21b      	sxth	r3, r3
 8010dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010db0:	b21a      	sxth	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	029b      	lsls	r3, r3, #10
 8010db8:	b21b      	sxth	r3, r3
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	b2d9      	uxtb	r1, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	689a      	ldr	r2, [r3, #8]
 8010dca:	8bbb      	ldrh	r3, [r7, #28]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f000 f88d 	bl	8010eec <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8010dd2:	e04e      	b.n	8010e72 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8010dd4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8010dd8:	f001 fcd9 	bl	801278e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010ddc:	e043      	b.n	8010e66 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8010dde:	f107 030c 	add.w	r3, r7, #12
 8010de2:	4619      	mov	r1, r3
 8010de4:	4828      	ldr	r0, [pc, #160]	; (8010e88 <hci_send_req+0xf8>)
 8010de6:	f000 fd6a 	bl	80118be <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	7a5b      	ldrb	r3, [r3, #9]
 8010dee:	2b0f      	cmp	r3, #15
 8010df0:	d114      	bne.n	8010e1c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	330b      	adds	r3, #11
 8010df6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	885b      	ldrh	r3, [r3, #2]
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	8bba      	ldrh	r2, [r7, #28]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d104      	bne.n	8010e0e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	691b      	ldr	r3, [r3, #16]
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	7812      	ldrb	r2, [r2, #0]
 8010e0c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	785b      	ldrb	r3, [r3, #1]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d027      	beq.n	8010e66 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010e16:	2301      	movs	r3, #1
 8010e18:	77fb      	strb	r3, [r7, #31]
 8010e1a:	e024      	b.n	8010e66 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	330b      	adds	r3, #11
 8010e20:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	8bba      	ldrh	r2, [r7, #28]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d114      	bne.n	8010e5a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	7a9b      	ldrb	r3, [r3, #10]
 8010e34:	3b03      	subs	r3, #3
 8010e36:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	695a      	ldr	r2, [r3, #20]
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	bfa8      	it	ge
 8010e42:	461a      	movge	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6918      	ldr	r0, [r3, #16]
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	1cd9      	adds	r1, r3, #3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	695b      	ldr	r3, [r3, #20]
 8010e54:	461a      	mov	r2, r3
 8010e56:	f003 f8f5 	bl	8014044 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010e62:	2301      	movs	r3, #1
 8010e64:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010e66:	4808      	ldr	r0, [pc, #32]	; (8010e88 <hci_send_req+0xf8>)
 8010e68:	f000 fc9a 	bl	80117a0 <LST_is_empty>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d0b5      	beq.n	8010dde <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8010e72:	7ffb      	ldrb	r3, [r7, #31]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d0ad      	beq.n	8010dd4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8010e78:	2001      	movs	r0, #1
 8010e7a:	f000 f85d 	bl	8010f38 <NotifyCmdStatus>

  return 0;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3720      	adds	r7, #32
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	20001198 	.word	0x20001198

08010e8c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8010e94:	480f      	ldr	r0, [pc, #60]	; (8010ed4 <TlInit+0x48>)
 8010e96:	f000 fc73 	bl	8011780 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8010e9a:	4a0f      	ldr	r2, [pc, #60]	; (8010ed8 <TlInit+0x4c>)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8010ea0:	480e      	ldr	r0, [pc, #56]	; (8010edc <TlInit+0x50>)
 8010ea2:	f000 fc6d 	bl	8011780 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010ea6:	4b0e      	ldr	r3, [pc, #56]	; (8010ee0 <TlInit+0x54>)
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8010eac:	4b0d      	ldr	r3, [pc, #52]	; (8010ee4 <TlInit+0x58>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d00a      	beq.n	8010eca <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8010eb8:	4b0b      	ldr	r3, [pc, #44]	; (8010ee8 <TlInit+0x5c>)
 8010eba:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8010ebc:	4b09      	ldr	r3, [pc, #36]	; (8010ee4 <TlInit+0x58>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f107 0208 	add.w	r2, r7, #8
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	4798      	blx	r3
  }

  return;
 8010ec8:	bf00      	nop
 8010eca:	bf00      	nop
}
 8010ecc:	3718      	adds	r7, #24
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20001198 	.word	0x20001198
 8010ed8:	20000cc8 	.word	0x20000cc8
 8010edc:	20000cc0 	.word	0x20000cc0
 8010ee0:	20000ccc 	.word	0x20000ccc
 8010ee4:	20001178 	.word	0x20001178
 8010ee8:	08010f79 	.word	0x08010f79

08010eec <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	603a      	str	r2, [r7, #0]
 8010ef6:	80fb      	strh	r3, [r7, #6]
 8010ef8:	460b      	mov	r3, r1
 8010efa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8010efc:	4b0c      	ldr	r3, [pc, #48]	; (8010f30 <SendCmd+0x44>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	88fa      	ldrh	r2, [r7, #6]
 8010f02:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8010f06:	4b0a      	ldr	r3, [pc, #40]	; (8010f30 <SendCmd+0x44>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	797a      	ldrb	r2, [r7, #5]
 8010f0c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8010f0e:	4b08      	ldr	r3, [pc, #32]	; (8010f30 <SendCmd+0x44>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	330c      	adds	r3, #12
 8010f14:	797a      	ldrb	r2, [r7, #5]
 8010f16:	6839      	ldr	r1, [r7, #0]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f003 f893 	bl	8014044 <memcpy>

  hciContext.io.Send(0,0);
 8010f1e:	4b05      	ldr	r3, [pc, #20]	; (8010f34 <SendCmd+0x48>)
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	2100      	movs	r1, #0
 8010f24:	2000      	movs	r0, #0
 8010f26:	4798      	blx	r3

  return;
 8010f28:	bf00      	nop
}
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	20000cc8 	.word	0x20000cc8
 8010f34:	20001178 	.word	0x20001178

08010f38 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8010f42:	79fb      	ldrb	r3, [r7, #7]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d108      	bne.n	8010f5a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8010f48:	4b0a      	ldr	r3, [pc, #40]	; (8010f74 <NotifyCmdStatus+0x3c>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d00d      	beq.n	8010f6c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010f50:	4b08      	ldr	r3, [pc, #32]	; (8010f74 <NotifyCmdStatus+0x3c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2000      	movs	r0, #0
 8010f56:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8010f58:	e008      	b.n	8010f6c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8010f5a:	4b06      	ldr	r3, [pc, #24]	; (8010f74 <NotifyCmdStatus+0x3c>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d004      	beq.n	8010f6c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8010f62:	4b04      	ldr	r3, [pc, #16]	; (8010f74 <NotifyCmdStatus+0x3c>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2001      	movs	r0, #1
 8010f68:	4798      	blx	r3
  return;
 8010f6a:	bf00      	nop
 8010f6c:	bf00      	nop
}
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	200011a0 	.word	0x200011a0

08010f78 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	7a5b      	ldrb	r3, [r3, #9]
 8010f84:	2b0f      	cmp	r3, #15
 8010f86:	d003      	beq.n	8010f90 <TlEvtReceived+0x18>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	7a5b      	ldrb	r3, [r3, #9]
 8010f8c:	2b0e      	cmp	r3, #14
 8010f8e:	d107      	bne.n	8010fa0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8010f90:	6879      	ldr	r1, [r7, #4]
 8010f92:	4809      	ldr	r0, [pc, #36]	; (8010fb8 <TlEvtReceived+0x40>)
 8010f94:	f000 fc4c 	bl	8011830 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8010f98:	2000      	movs	r0, #0
 8010f9a:	f001 fbed 	bl	8012778 <hci_cmd_resp_release>
 8010f9e:	e006      	b.n	8010fae <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	4806      	ldr	r0, [pc, #24]	; (8010fbc <TlEvtReceived+0x44>)
 8010fa4:	f000 fc44 	bl	8011830 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010fa8:	4804      	ldr	r0, [pc, #16]	; (8010fbc <TlEvtReceived+0x44>)
 8010faa:	f001 fbd9 	bl	8012760 <hci_notify_asynch_evt>
  }

  return;
 8010fae:	bf00      	nop
}
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20001198 	.word	0x20001198
 8010fbc:	20000cc0 	.word	0x20000cc0

08010fc0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a05      	ldr	r2, [pc, #20]	; (8010fe0 <hci_register_io_bus+0x20>)
 8010fcc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4a04      	ldr	r2, [pc, #16]	; (8010fe4 <hci_register_io_bus+0x24>)
 8010fd2:	611a      	str	r2, [r3, #16]

  return;
 8010fd4:	bf00      	nop
}
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr
 8010fe0:	080112d1 	.word	0x080112d1
 8010fe4:	08011339 	.word	0x08011339

08010fe8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	4a08      	ldr	r2, [pc, #32]	; (8011018 <shci_init+0x30>)
 8010ff8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8010ffa:	4a08      	ldr	r2, [pc, #32]	; (801101c <shci_init+0x34>)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011000:	4806      	ldr	r0, [pc, #24]	; (801101c <shci_init+0x34>)
 8011002:	f000 f911 	bl	8011228 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4618      	mov	r0, r3
 801100c:	f000 f894 	bl	8011138 <TlInit>

  return;
 8011010:	bf00      	nop
}
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	200011c4 	.word	0x200011c4
 801101c:	200011a4 	.word	0x200011a4

08011020 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011026:	4822      	ldr	r0, [pc, #136]	; (80110b0 <shci_user_evt_proc+0x90>)
 8011028:	f000 fbba 	bl	80117a0 <LST_is_empty>
 801102c:	4603      	mov	r3, r0
 801102e:	2b00      	cmp	r3, #0
 8011030:	d12b      	bne.n	801108a <shci_user_evt_proc+0x6a>
 8011032:	4b20      	ldr	r3, [pc, #128]	; (80110b4 <shci_user_evt_proc+0x94>)
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d027      	beq.n	801108a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801103a:	f107 030c 	add.w	r3, r7, #12
 801103e:	4619      	mov	r1, r3
 8011040:	481b      	ldr	r0, [pc, #108]	; (80110b0 <shci_user_evt_proc+0x90>)
 8011042:	f000 fc3c 	bl	80118be <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011046:	4b1c      	ldr	r3, [pc, #112]	; (80110b8 <shci_user_evt_proc+0x98>)
 8011048:	69db      	ldr	r3, [r3, #28]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00c      	beq.n	8011068 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8011052:	2301      	movs	r3, #1
 8011054:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011056:	4b18      	ldr	r3, [pc, #96]	; (80110b8 <shci_user_evt_proc+0x98>)
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	1d3a      	adds	r2, r7, #4
 801105c:	4610      	mov	r0, r2
 801105e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8011060:	793a      	ldrb	r2, [r7, #4]
 8011062:	4b14      	ldr	r3, [pc, #80]	; (80110b4 <shci_user_evt_proc+0x94>)
 8011064:	701a      	strb	r2, [r3, #0]
 8011066:	e002      	b.n	801106e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011068:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <shci_user_evt_proc+0x94>)
 801106a:	2201      	movs	r2, #1
 801106c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801106e:	4b11      	ldr	r3, [pc, #68]	; (80110b4 <shci_user_evt_proc+0x94>)
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d004      	beq.n	8011080 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	4618      	mov	r0, r3
 801107a:	f000 fa6d 	bl	8011558 <TL_MM_EvtDone>
 801107e:	e004      	b.n	801108a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	4619      	mov	r1, r3
 8011084:	480a      	ldr	r0, [pc, #40]	; (80110b0 <shci_user_evt_proc+0x90>)
 8011086:	f000 fbad 	bl	80117e4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801108a:	4809      	ldr	r0, [pc, #36]	; (80110b0 <shci_user_evt_proc+0x90>)
 801108c:	f000 fb88 	bl	80117a0 <LST_is_empty>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d107      	bne.n	80110a6 <shci_user_evt_proc+0x86>
 8011096:	4b07      	ldr	r3, [pc, #28]	; (80110b4 <shci_user_evt_proc+0x94>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d003      	beq.n	80110a6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801109e:	4804      	ldr	r0, [pc, #16]	; (80110b0 <shci_user_evt_proc+0x90>)
 80110a0:	f7f0 fbd5 	bl	800184e <shci_notify_asynch_evt>
  }


  return;
 80110a4:	bf00      	nop
 80110a6:	bf00      	nop
}
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	20000cd0 	.word	0x20000cd0
 80110b4:	20000ce0 	.word	0x20000ce0
 80110b8:	200011a4 	.word	0x200011a4

080110bc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	60ba      	str	r2, [r7, #8]
 80110c4:	607b      	str	r3, [r7, #4]
 80110c6:	4603      	mov	r3, r0
 80110c8:	81fb      	strh	r3, [r7, #14]
 80110ca:	460b      	mov	r3, r1
 80110cc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80110ce:	2000      	movs	r0, #0
 80110d0:	f000 f864 	bl	801119c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80110d4:	4b16      	ldr	r3, [pc, #88]	; (8011130 <shci_send+0x74>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	89fa      	ldrh	r2, [r7, #14]
 80110da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80110de:	4b14      	ldr	r3, [pc, #80]	; (8011130 <shci_send+0x74>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	7b7a      	ldrb	r2, [r7, #13]
 80110e4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80110e6:	4b12      	ldr	r3, [pc, #72]	; (8011130 <shci_send+0x74>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	330c      	adds	r3, #12
 80110ec:	7b7a      	ldrb	r2, [r7, #13]
 80110ee:	68b9      	ldr	r1, [r7, #8]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f002 ffa7 	bl	8014044 <memcpy>

  shciContext.io.Send(0,0);
 80110f6:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <shci_send+0x78>)
 80110f8:	691b      	ldr	r3, [r3, #16]
 80110fa:	2100      	movs	r1, #0
 80110fc:	2000      	movs	r0, #0
 80110fe:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011100:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8011104:	f7f0 fbba 	bl	800187c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f103 0008 	add.w	r0, r3, #8
 801110e:	4b08      	ldr	r3, [pc, #32]	; (8011130 <shci_send+0x74>)
 8011110:	6819      	ldr	r1, [r3, #0]
 8011112:	4b07      	ldr	r3, [pc, #28]	; (8011130 <shci_send+0x74>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	789b      	ldrb	r3, [r3, #2]
 8011118:	3303      	adds	r3, #3
 801111a:	461a      	mov	r2, r3
 801111c:	f002 ff92 	bl	8014044 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011120:	2001      	movs	r0, #1
 8011122:	f000 f83b 	bl	801119c <Cmd_SetStatus>

  return;
 8011126:	bf00      	nop
}
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	20000cdc 	.word	0x20000cdc
 8011134:	200011a4 	.word	0x200011a4

08011138 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8011140:	4a10      	ldr	r2, [pc, #64]	; (8011184 <TlInit+0x4c>)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8011146:	4810      	ldr	r0, [pc, #64]	; (8011188 <TlInit+0x50>)
 8011148:	f000 fb1a 	bl	8011780 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801114c:	2001      	movs	r0, #1
 801114e:	f000 f825 	bl	801119c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011152:	4b0e      	ldr	r3, [pc, #56]	; (801118c <TlInit+0x54>)
 8011154:	2201      	movs	r2, #1
 8011156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8011158:	4b0d      	ldr	r3, [pc, #52]	; (8011190 <TlInit+0x58>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d00c      	beq.n	801117a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8011164:	4b0b      	ldr	r3, [pc, #44]	; (8011194 <TlInit+0x5c>)
 8011166:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8011168:	4b0b      	ldr	r3, [pc, #44]	; (8011198 <TlInit+0x60>)
 801116a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 801116c:	4b08      	ldr	r3, [pc, #32]	; (8011190 <TlInit+0x58>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f107 020c 	add.w	r2, r7, #12
 8011174:	4610      	mov	r0, r2
 8011176:	4798      	blx	r3
  }

  return;
 8011178:	bf00      	nop
 801117a:	bf00      	nop
}
 801117c:	3718      	adds	r7, #24
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	20000cdc 	.word	0x20000cdc
 8011188:	20000cd0 	.word	0x20000cd0
 801118c:	20000ce0 	.word	0x20000ce0
 8011190:	200011a4 	.word	0x200011a4
 8011194:	080111ed 	.word	0x080111ed
 8011198:	08011205 	.word	0x08011205

0801119c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	4603      	mov	r3, r0
 80111a4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80111a6:	79fb      	ldrb	r3, [r7, #7]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10b      	bne.n	80111c4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80111ac:	4b0d      	ldr	r3, [pc, #52]	; (80111e4 <Cmd_SetStatus+0x48>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d003      	beq.n	80111bc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80111b4:	4b0b      	ldr	r3, [pc, #44]	; (80111e4 <Cmd_SetStatus+0x48>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2000      	movs	r0, #0
 80111ba:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80111bc:	4b0a      	ldr	r3, [pc, #40]	; (80111e8 <Cmd_SetStatus+0x4c>)
 80111be:	2200      	movs	r2, #0
 80111c0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80111c2:	e00b      	b.n	80111dc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80111c4:	4b08      	ldr	r3, [pc, #32]	; (80111e8 <Cmd_SetStatus+0x4c>)
 80111c6:	2201      	movs	r2, #1
 80111c8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80111ca:	4b06      	ldr	r3, [pc, #24]	; (80111e4 <Cmd_SetStatus+0x48>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d004      	beq.n	80111dc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80111d2:	4b04      	ldr	r3, [pc, #16]	; (80111e4 <Cmd_SetStatus+0x48>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2001      	movs	r0, #1
 80111d8:	4798      	blx	r3
  return;
 80111da:	bf00      	nop
 80111dc:	bf00      	nop
}
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	200011c4 	.word	0x200011c4
 80111e8:	20000cd8 	.word	0x20000cd8

080111ec <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80111f4:	2000      	movs	r0, #0
 80111f6:	f7f0 fb36 	bl	8001866 <shci_cmd_resp_release>

  return;
 80111fa:	bf00      	nop
}
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801120c:	6879      	ldr	r1, [r7, #4]
 801120e:	4805      	ldr	r0, [pc, #20]	; (8011224 <TlUserEvtReceived+0x20>)
 8011210:	f000 fb0e 	bl	8011830 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011214:	4803      	ldr	r0, [pc, #12]	; (8011224 <TlUserEvtReceived+0x20>)
 8011216:	f7f0 fb1a 	bl	800184e <shci_notify_asynch_evt>

  return;
 801121a:	bf00      	nop
}
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	20000cd0 	.word	0x20000cd0

08011228 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4a05      	ldr	r2, [pc, #20]	; (8011248 <shci_register_io_bus+0x20>)
 8011234:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4a04      	ldr	r2, [pc, #16]	; (801124c <shci_register_io_bus+0x24>)
 801123a:	611a      	str	r2, [r3, #16]

  return;
 801123c:	bf00      	nop
}
 801123e:	370c      	adds	r7, #12
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr
 8011248:	080113e5 	.word	0x080113e5
 801124c:	08011439 	.word	0x08011439

08011250 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8011254:	f002 fb7a 	bl	801394c <HW_IPCC_Enable>

  return;
 8011258:	bf00      	nop
}
 801125a:	bd80      	pop	{r7, pc}

0801125c <TL_Init>:


void TL_Init( void )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8011260:	4b10      	ldr	r3, [pc, #64]	; (80112a4 <TL_Init+0x48>)
 8011262:	4a11      	ldr	r2, [pc, #68]	; (80112a8 <TL_Init+0x4c>)
 8011264:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8011266:	4b0f      	ldr	r3, [pc, #60]	; (80112a4 <TL_Init+0x48>)
 8011268:	4a10      	ldr	r2, [pc, #64]	; (80112ac <TL_Init+0x50>)
 801126a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 801126c:	4b0d      	ldr	r3, [pc, #52]	; (80112a4 <TL_Init+0x48>)
 801126e:	4a10      	ldr	r2, [pc, #64]	; (80112b0 <TL_Init+0x54>)
 8011270:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8011272:	4b0c      	ldr	r3, [pc, #48]	; (80112a4 <TL_Init+0x48>)
 8011274:	4a0f      	ldr	r2, [pc, #60]	; (80112b4 <TL_Init+0x58>)
 8011276:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8011278:	4b0a      	ldr	r3, [pc, #40]	; (80112a4 <TL_Init+0x48>)
 801127a:	4a0f      	ldr	r2, [pc, #60]	; (80112b8 <TL_Init+0x5c>)
 801127c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801127e:	4b09      	ldr	r3, [pc, #36]	; (80112a4 <TL_Init+0x48>)
 8011280:	4a0e      	ldr	r2, [pc, #56]	; (80112bc <TL_Init+0x60>)
 8011282:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011284:	4b07      	ldr	r3, [pc, #28]	; (80112a4 <TL_Init+0x48>)
 8011286:	4a0e      	ldr	r2, [pc, #56]	; (80112c0 <TL_Init+0x64>)
 8011288:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801128a:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <TL_Init+0x48>)
 801128c:	4a0d      	ldr	r2, [pc, #52]	; (80112c4 <TL_Init+0x68>)
 801128e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011290:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <TL_Init+0x48>)
 8011292:	4a0d      	ldr	r2, [pc, #52]	; (80112c8 <TL_Init+0x6c>)
 8011294:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8011296:	4b03      	ldr	r3, [pc, #12]	; (80112a4 <TL_Init+0x48>)
 8011298:	4a0c      	ldr	r2, [pc, #48]	; (80112cc <TL_Init+0x70>)
 801129a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 801129c:	f002 fb6a 	bl	8013974 <HW_IPCC_Init>

  return;
 80112a0:	bf00      	nop
}
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	20030000 	.word	0x20030000
 80112a8:	20030028 	.word	0x20030028
 80112ac:	20030048 	.word	0x20030048
 80112b0:	20030058 	.word	0x20030058
 80112b4:	20030068 	.word	0x20030068
 80112b8:	20030070 	.word	0x20030070
 80112bc:	20030078 	.word	0x20030078
 80112c0:	20030080 	.word	0x20030080
 80112c4:	2003009c 	.word	0x2003009c
 80112c8:	200300a0 	.word	0x200300a0
 80112cc:	200300ac 	.word	0x200300ac

080112d0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80112dc:	4811      	ldr	r0, [pc, #68]	; (8011324 <TL_BLE_Init+0x54>)
 80112de:	f000 fa4f 	bl	8011780 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80112e2:	4b11      	ldr	r3, [pc, #68]	; (8011328 <TL_BLE_Init+0x58>)
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	689a      	ldr	r2, [r3, #8]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	68da      	ldr	r2, [r3, #12]
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	4a0c      	ldr	r2, [pc, #48]	; (801132c <TL_BLE_Init+0x5c>)
 80112fc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	4a08      	ldr	r2, [pc, #32]	; (8011324 <TL_BLE_Init+0x54>)
 8011302:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011304:	f002 fb4c 	bl	80139a0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a08      	ldr	r2, [pc, #32]	; (8011330 <TL_BLE_Init+0x60>)
 801130e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	4a07      	ldr	r2, [pc, #28]	; (8011334 <TL_BLE_Init+0x64>)
 8011316:	6013      	str	r3, [r2, #0]

  return 0;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	200300c8 	.word	0x200300c8
 8011328:	20030000 	.word	0x20030000
 801132c:	20000c88 	.word	0x20000c88
 8011330:	200011d0 	.word	0x200011d0
 8011334:	200011d4 	.word	0x200011d4

08011338 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	460b      	mov	r3, r1
 8011342:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011344:	4b09      	ldr	r3, [pc, #36]	; (801136c <TL_BLE_SendCmd+0x34>)
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2201      	movs	r2, #1
 801134c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801134e:	4b07      	ldr	r3, [pc, #28]	; (801136c <TL_BLE_SendCmd+0x34>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4619      	mov	r1, r3
 8011356:	2001      	movs	r0, #1
 8011358:	f000 f96c 	bl	8011634 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 801135c:	f002 fb2a 	bl	80139b4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	20030000 	.word	0x20030000

08011370 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8011376:	e01c      	b.n	80113b2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8011378:	1d3b      	adds	r3, r7, #4
 801137a:	4619      	mov	r1, r3
 801137c:	4812      	ldr	r0, [pc, #72]	; (80113c8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801137e:	f000 fa9e 	bl	80118be <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	7a5b      	ldrb	r3, [r3, #9]
 8011386:	2b0f      	cmp	r3, #15
 8011388:	d003      	beq.n	8011392 <HW_IPCC_BLE_RxEvtNot+0x22>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	7a5b      	ldrb	r3, [r3, #9]
 801138e:	2b0e      	cmp	r3, #14
 8011390:	d105      	bne.n	801139e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4619      	mov	r1, r3
 8011396:	2002      	movs	r0, #2
 8011398:	f000 f94c 	bl	8011634 <OutputDbgTrace>
 801139c:	e004      	b.n	80113a8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4619      	mov	r1, r3
 80113a2:	2003      	movs	r0, #3
 80113a4:	f000 f946 	bl	8011634 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80113a8:	4b08      	ldr	r3, [pc, #32]	; (80113cc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	4610      	mov	r0, r2
 80113b0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80113b2:	4805      	ldr	r0, [pc, #20]	; (80113c8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80113b4:	f000 f9f4 	bl	80117a0 <LST_is_empty>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d0dc      	beq.n	8011378 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80113be:	bf00      	nop
}
 80113c0:	3708      	adds	r7, #8
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	200300c8 	.word	0x200300c8
 80113cc:	200011d0 	.word	0x200011d0

080113d0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80113d4:	4b02      	ldr	r3, [pc, #8]	; (80113e0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4798      	blx	r3

  return;
 80113da:	bf00      	nop
}
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	200011d4 	.word	0x200011d4

080113e4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80113f0:	480d      	ldr	r0, [pc, #52]	; (8011428 <TL_SYS_Init+0x44>)
 80113f2:	f000 f9c5 	bl	8011780 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80113f6:	4b0d      	ldr	r3, [pc, #52]	; (801142c <TL_SYS_Init+0x48>)
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	689a      	ldr	r2, [r3, #8]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	4a08      	ldr	r2, [pc, #32]	; (8011428 <TL_SYS_Init+0x44>)
 8011408:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801140a:	f002 faf5 	bl	80139f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4a07      	ldr	r2, [pc, #28]	; (8011430 <TL_SYS_Init+0x4c>)
 8011414:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	4a06      	ldr	r2, [pc, #24]	; (8011434 <TL_SYS_Init+0x50>)
 801141c:	6013      	str	r3, [r2, #0]

  return 0;
 801141e:	2300      	movs	r3, #0
}
 8011420:	4618      	mov	r0, r3
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	200300d0 	.word	0x200300d0
 801142c:	20030000 	.word	0x20030000
 8011430:	200011d8 	.word	0x200011d8
 8011434:	200011dc 	.word	0x200011dc

08011438 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8011444:	4b09      	ldr	r3, [pc, #36]	; (801146c <TL_SYS_SendCmd+0x34>)
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2210      	movs	r2, #16
 801144c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801144e:	4b07      	ldr	r3, [pc, #28]	; (801146c <TL_SYS_SendCmd+0x34>)
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4619      	mov	r1, r3
 8011456:	2004      	movs	r0, #4
 8011458:	f000 f8ec 	bl	8011634 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 801145c:	f002 fad6 	bl	8013a0c <HW_IPCC_SYS_SendCmd>

  return 0;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	20030000 	.word	0x20030000

08011470 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011474:	4b07      	ldr	r3, [pc, #28]	; (8011494 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4619      	mov	r1, r3
 801147c:	2005      	movs	r0, #5
 801147e:	f000 f8d9 	bl	8011634 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011482:	4b05      	ldr	r3, [pc, #20]	; (8011498 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	4a03      	ldr	r2, [pc, #12]	; (8011494 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011488:	68d2      	ldr	r2, [r2, #12]
 801148a:	6812      	ldr	r2, [r2, #0]
 801148c:	4610      	mov	r0, r2
 801148e:	4798      	blx	r3

  return;
 8011490:	bf00      	nop
}
 8011492:	bd80      	pop	{r7, pc}
 8011494:	20030000 	.word	0x20030000
 8011498:	200011d8 	.word	0x200011d8

0801149c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80114a2:	e00e      	b.n	80114c2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80114a4:	1d3b      	adds	r3, r7, #4
 80114a6:	4619      	mov	r1, r3
 80114a8:	480b      	ldr	r0, [pc, #44]	; (80114d8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80114aa:	f000 fa08 	bl	80118be <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	4619      	mov	r1, r3
 80114b2:	2006      	movs	r0, #6
 80114b4:	f000 f8be 	bl	8011634 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80114b8:	4b08      	ldr	r3, [pc, #32]	; (80114dc <HW_IPCC_SYS_EvtNot+0x40>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	4610      	mov	r0, r2
 80114c0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80114c2:	4805      	ldr	r0, [pc, #20]	; (80114d8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80114c4:	f000 f96c 	bl	80117a0 <LST_is_empty>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d0ea      	beq.n	80114a4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80114ce:	bf00      	nop
}
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	200300d0 	.word	0x200300d0
 80114dc:	200011dc 	.word	0x200011dc

080114e0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80114e8:	4817      	ldr	r0, [pc, #92]	; (8011548 <TL_MM_Init+0x68>)
 80114ea:	f000 f949 	bl	8011780 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80114ee:	4817      	ldr	r0, [pc, #92]	; (801154c <TL_MM_Init+0x6c>)
 80114f0:	f000 f946 	bl	8011780 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80114f4:	4b16      	ldr	r3, [pc, #88]	; (8011550 <TL_MM_Init+0x70>)
 80114f6:	691b      	ldr	r3, [r3, #16]
 80114f8:	4a16      	ldr	r2, [pc, #88]	; (8011554 <TL_MM_Init+0x74>)
 80114fa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80114fc:	4b15      	ldr	r3, [pc, #84]	; (8011554 <TL_MM_Init+0x74>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	6892      	ldr	r2, [r2, #8]
 8011504:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8011506:	4b13      	ldr	r3, [pc, #76]	; (8011554 <TL_MM_Init+0x74>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	68d2      	ldr	r2, [r2, #12]
 801150e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011510:	4b10      	ldr	r3, [pc, #64]	; (8011554 <TL_MM_Init+0x74>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4a0c      	ldr	r2, [pc, #48]	; (8011548 <TL_MM_Init+0x68>)
 8011516:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011518:	4b0e      	ldr	r3, [pc, #56]	; (8011554 <TL_MM_Init+0x74>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	6812      	ldr	r2, [r2, #0]
 8011520:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8011522:	4b0c      	ldr	r3, [pc, #48]	; (8011554 <TL_MM_Init+0x74>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	6852      	ldr	r2, [r2, #4]
 801152a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801152c:	4b09      	ldr	r3, [pc, #36]	; (8011554 <TL_MM_Init+0x74>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	6912      	ldr	r2, [r2, #16]
 8011534:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8011536:	4b07      	ldr	r3, [pc, #28]	; (8011554 <TL_MM_Init+0x74>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	6952      	ldr	r2, [r2, #20]
 801153e:	619a      	str	r2, [r3, #24]

  return;
 8011540:	bf00      	nop
}
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	200300b8 	.word	0x200300b8
 801154c:	200011c8 	.word	0x200011c8
 8011550:	20030000 	.word	0x20030000
 8011554:	200011e0 	.word	0x200011e0

08011558 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	4807      	ldr	r0, [pc, #28]	; (8011580 <TL_MM_EvtDone+0x28>)
 8011564:	f000 f964 	bl	8011830 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011568:	6879      	ldr	r1, [r7, #4]
 801156a:	2000      	movs	r0, #0
 801156c:	f000 f862 	bl	8011634 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011570:	4804      	ldr	r0, [pc, #16]	; (8011584 <TL_MM_EvtDone+0x2c>)
 8011572:	f002 fa71 	bl	8013a58 <HW_IPCC_MM_SendFreeBuf>

  return;
 8011576:	bf00      	nop
}
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	200011c8 	.word	0x200011c8
 8011584:	08011589 	.word	0x08011589

08011588 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801158e:	e00c      	b.n	80115aa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011590:	1d3b      	adds	r3, r7, #4
 8011592:	4619      	mov	r1, r3
 8011594:	480a      	ldr	r0, [pc, #40]	; (80115c0 <SendFreeBuf+0x38>)
 8011596:	f000 f992 	bl	80118be <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801159a:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <SendFreeBuf+0x3c>)
 801159c:	691b      	ldr	r3, [r3, #16]
 801159e:	691b      	ldr	r3, [r3, #16]
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	4611      	mov	r1, r2
 80115a4:	4618      	mov	r0, r3
 80115a6:	f000 f943 	bl	8011830 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80115aa:	4805      	ldr	r0, [pc, #20]	; (80115c0 <SendFreeBuf+0x38>)
 80115ac:	f000 f8f8 	bl	80117a0 <LST_is_empty>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0ec      	beq.n	8011590 <SendFreeBuf+0x8>
  }

  return;
 80115b6:	bf00      	nop
}
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	200011c8 	.word	0x200011c8
 80115c4:	20030000 	.word	0x20030000

080115c8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80115cc:	4805      	ldr	r0, [pc, #20]	; (80115e4 <TL_TRACES_Init+0x1c>)
 80115ce:	f000 f8d7 	bl	8011780 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80115d2:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <TL_TRACES_Init+0x20>)
 80115d4:	695b      	ldr	r3, [r3, #20]
 80115d6:	4a03      	ldr	r2, [pc, #12]	; (80115e4 <TL_TRACES_Init+0x1c>)
 80115d8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80115da:	f002 fa73 	bl	8013ac4 <HW_IPCC_TRACES_Init>

  return;
 80115de:	bf00      	nop
}
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	200300c0 	.word	0x200300c0
 80115e8:	20030000 	.word	0x20030000

080115ec <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80115f2:	e008      	b.n	8011606 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80115f4:	1d3b      	adds	r3, r7, #4
 80115f6:	4619      	mov	r1, r3
 80115f8:	4808      	ldr	r0, [pc, #32]	; (801161c <HW_IPCC_TRACES_EvtNot+0x30>)
 80115fa:	f000 f960 	bl	80118be <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4618      	mov	r0, r3
 8011602:	f000 f80d 	bl	8011620 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011606:	4805      	ldr	r0, [pc, #20]	; (801161c <HW_IPCC_TRACES_EvtNot+0x30>)
 8011608:	f000 f8ca 	bl	80117a0 <LST_is_empty>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d0f0      	beq.n	80115f4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011612:	bf00      	nop
}
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	200300c0 	.word	0x200300c0

08011620 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011634:	b480      	push	{r7}
 8011636:	b085      	sub	sp, #20
 8011638:	af00      	add	r7, sp, #0
 801163a:	4603      	mov	r3, r0
 801163c:	6039      	str	r1, [r7, #0]
 801163e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011640:	79fb      	ldrb	r3, [r7, #7]
 8011642:	2b06      	cmp	r3, #6
 8011644:	d845      	bhi.n	80116d2 <OutputDbgTrace+0x9e>
 8011646:	a201      	add	r2, pc, #4	; (adr r2, 801164c <OutputDbgTrace+0x18>)
 8011648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801164c:	08011669 	.word	0x08011669
 8011650:	0801168d 	.word	0x0801168d
 8011654:	08011693 	.word	0x08011693
 8011658:	080116a7 	.word	0x080116a7
 801165c:	080116b3 	.word	0x080116b3
 8011660:	080116b9 	.word	0x080116b9
 8011664:	080116c7 	.word	0x080116c7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	7a5b      	ldrb	r3, [r3, #9]
 8011670:	2bff      	cmp	r3, #255	; 0xff
 8011672:	d005      	beq.n	8011680 <OutputDbgTrace+0x4c>
 8011674:	2bff      	cmp	r3, #255	; 0xff
 8011676:	dc05      	bgt.n	8011684 <OutputDbgTrace+0x50>
 8011678:	2b0e      	cmp	r3, #14
 801167a:	d005      	beq.n	8011688 <OutputDbgTrace+0x54>
 801167c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801167e:	e001      	b.n	8011684 <OutputDbgTrace+0x50>
          break;
 8011680:	bf00      	nop
 8011682:	e027      	b.n	80116d4 <OutputDbgTrace+0xa0>
          break;
 8011684:	bf00      	nop
 8011686:	e025      	b.n	80116d4 <OutputDbgTrace+0xa0>
          break;
 8011688:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801168a:	e023      	b.n	80116d4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011690:	e020      	b.n	80116d4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	7a5b      	ldrb	r3, [r3, #9]
 801169a:	2b0e      	cmp	r3, #14
 801169c:	d001      	beq.n	80116a2 <OutputDbgTrace+0x6e>
 801169e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80116a0:	e000      	b.n	80116a4 <OutputDbgTrace+0x70>
          break;
 80116a2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80116a4:	e016      	b.n	80116d4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	7a5b      	ldrb	r3, [r3, #9]
 80116ae:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80116b0:	e010      	b.n	80116d4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80116b6:	e00d      	b.n	80116d4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	7a5b      	ldrb	r3, [r3, #9]
 80116c0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80116c2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80116c4:	e006      	b.n	80116d4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	7a5b      	ldrb	r3, [r3, #9]
 80116ce:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80116d0:	e000      	b.n	80116d4 <OutputDbgTrace+0xa0>

    default:
      break;
 80116d2:	bf00      	nop
  }

  return;
 80116d4:	bf00      	nop
}
 80116d6:	3714      	adds	r7, #20
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80116ec:	215c      	movs	r1, #92	; 0x5c
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f003 f9ec 	bl	8014acc <strrchr>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d007      	beq.n	801170a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80116fa:	215c      	movs	r1, #92	; 0x5c
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f003 f9e5 	bl	8014acc <strrchr>
 8011702:	4603      	mov	r3, r0
 8011704:	3301      	adds	r3, #1
 8011706:	60fb      	str	r3, [r7, #12]
 8011708:	e00d      	b.n	8011726 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 801170a:	212f      	movs	r1, #47	; 0x2f
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f003 f9dd 	bl	8014acc <strrchr>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d006      	beq.n	8011726 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011718:	212f      	movs	r1, #47	; 0x2f
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f003 f9d6 	bl	8014acc <strrchr>
 8011720:	4603      	mov	r3, r0
 8011722:	3301      	adds	r3, #1
 8011724:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011726:	68fb      	ldr	r3, [r7, #12]
}
 8011728:	4618      	mov	r0, r3
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	4603      	mov	r3, r0
 8011738:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801173a:	4b0f      	ldr	r3, [pc, #60]	; (8011778 <OTP_Read+0x48>)
 801173c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801173e:	e002      	b.n	8011746 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	3b08      	subs	r3, #8
 8011744:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	3307      	adds	r3, #7
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	79fa      	ldrb	r2, [r7, #7]
 801174e:	429a      	cmp	r2, r3
 8011750:	d003      	beq.n	801175a <OTP_Read+0x2a>
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	4a09      	ldr	r2, [pc, #36]	; (801177c <OTP_Read+0x4c>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d1f2      	bne.n	8011740 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	3307      	adds	r3, #7
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	79fa      	ldrb	r2, [r7, #7]
 8011762:	429a      	cmp	r2, r3
 8011764:	d001      	beq.n	801176a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011766:	2300      	movs	r3, #0
 8011768:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801176a:	68fb      	ldr	r3, [r7, #12]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3714      	adds	r7, #20
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr
 8011778:	1fff73f8 	.word	0x1fff73f8
 801177c:	1fff7000 	.word	0x1fff7000

08011780 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	605a      	str	r2, [r3, #4]
}
 8011794:	bf00      	nop
 8011796:	370c      	adds	r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b087      	sub	sp, #28
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117a8:	f3ef 8310 	mrs	r3, PRIMASK
 80117ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80117ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80117b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80117b2:	b672      	cpsid	i
}
 80117b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d102      	bne.n	80117c6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80117c0:	2301      	movs	r3, #1
 80117c2:	75fb      	strb	r3, [r7, #23]
 80117c4:	e001      	b.n	80117ca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80117c6:	2300      	movs	r3, #0
 80117c8:	75fb      	strb	r3, [r7, #23]
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	f383 8810 	msr	PRIMASK, r3
}
 80117d4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80117d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	371c      	adds	r7, #28
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b087      	sub	sp, #28
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117ee:	f3ef 8310 	mrs	r3, PRIMASK
 80117f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80117f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80117f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80117f8:	b672      	cpsid	i
}
 80117fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	683a      	ldr	r2, [r7, #0]
 801180e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	605a      	str	r2, [r3, #4]
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	f383 8810 	msr	PRIMASK, r3
}
 8011822:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011824:	bf00      	nop
 8011826:	371c      	adds	r7, #28
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8011830:	b480      	push	{r7}
 8011832:	b087      	sub	sp, #28
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801183a:	f3ef 8310 	mrs	r3, PRIMASK
 801183e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011840:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011844:	b672      	cpsid	i
}
 8011846:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	683a      	ldr	r2, [r7, #0]
 801185a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	601a      	str	r2, [r3, #0]
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	f383 8810 	msr	PRIMASK, r3
}
 801186e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011870:	bf00      	nop
 8011872:	371c      	adds	r7, #28
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011884:	f3ef 8310 	mrs	r3, PRIMASK
 8011888:	60fb      	str	r3, [r7, #12]
  return(result);
 801188a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801188c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801188e:	b672      	cpsid	i
}
 8011890:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	6812      	ldr	r2, [r2, #0]
 801189a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	6852      	ldr	r2, [r2, #4]
 80118a4:	605a      	str	r2, [r3, #4]
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	f383 8810 	msr	PRIMASK, r3
}
 80118b0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80118b2:	bf00      	nop
 80118b4:	371c      	adds	r7, #28
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b086      	sub	sp, #24
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
 80118c6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118c8:	f3ef 8310 	mrs	r3, PRIMASK
 80118cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80118ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80118d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80118d2:	b672      	cpsid	i
}
 80118d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7ff ffca 	bl	801187c <LST_remove_node>
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	f383 8810 	msr	PRIMASK, r3
}
 80118f2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80118f4:	bf00      	nop
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80118fc:	b480      	push	{r7}
 80118fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8011900:	4b03      	ldr	r3, [pc, #12]	; (8011910 <LL_FLASH_GetUDN+0x14>)
 8011902:	681b      	ldr	r3, [r3, #0]
}
 8011904:	4618      	mov	r0, r3
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop
 8011910:	1fff7580 	.word	0x1fff7580

08011914 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8011914:	b480      	push	{r7}
 8011916:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8011918:	4b03      	ldr	r3, [pc, #12]	; (8011928 <LL_FLASH_GetDeviceID+0x14>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	b2db      	uxtb	r3, r3
}
 801191e:	4618      	mov	r0, r3
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr
 8011928:	1fff7584 	.word	0x1fff7584

0801192c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 801192c:	b480      	push	{r7}
 801192e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8011930:	4b03      	ldr	r3, [pc, #12]	; (8011940 <LL_FLASH_GetSTCompanyID+0x14>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	0a1b      	lsrs	r3, r3, #8
}
 8011936:	4618      	mov	r0, r3
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	1fff7584 	.word	0x1fff7584

08011944 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8011944:	b5b0      	push	{r4, r5, r7, lr}
 8011946:	b090      	sub	sp, #64	; 0x40
 8011948:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801194a:	2392      	movs	r3, #146	; 0x92
 801194c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8011950:	4b45      	ldr	r3, [pc, #276]	; (8011a68 <APP_BLE_Init+0x124>)
 8011952:	1d3c      	adds	r4, r7, #4
 8011954:	461d      	mov	r5, r3
 8011956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801195e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011962:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011966:	c403      	stmia	r4!, {r0, r1}
 8011968:	7022      	strb	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801196a:	f000 fb3d 	bl	8011fe8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801196e:	2101      	movs	r1, #1
 8011970:	2002      	movs	r0, #2
 8011972:	f002 f8cf 	bl	8013b14 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8011976:	4a3d      	ldr	r2, [pc, #244]	; (8011a6c <APP_BLE_Init+0x128>)
 8011978:	2100      	movs	r1, #0
 801197a:	2002      	movs	r0, #2
 801197c:	f002 f9f6 	bl	8013d6c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8011980:	1d3b      	adds	r3, r7, #4
 8011982:	4618      	mov	r0, r3
 8011984:	f7ff f8a8 	bl	8010ad8 <SHCI_C2_BLE_Init>
 8011988:	4603      	mov	r3, r0
 801198a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 801198e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8011992:	2b00      	cmp	r3, #0
 8011994:	d012      	beq.n	80119bc <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8011996:	4836      	ldr	r0, [pc, #216]	; (8011a70 <APP_BLE_Init+0x12c>)
 8011998:	f7ff fea2 	bl	80116e0 <DbgTraceGetFileName>
 801199c:	4601      	mov	r1, r0
 801199e:	f240 1347 	movw	r3, #327	; 0x147
 80119a2:	4a34      	ldr	r2, [pc, #208]	; (8011a74 <APP_BLE_Init+0x130>)
 80119a4:	4834      	ldr	r0, [pc, #208]	; (8011a78 <APP_BLE_Init+0x134>)
 80119a6:	f002 ffcd 	bl	8014944 <iprintf>
 80119aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80119ae:	4619      	mov	r1, r3
 80119b0:	4832      	ldr	r0, [pc, #200]	; (8011a7c <APP_BLE_Init+0x138>)
 80119b2:	f002 ffc7 	bl	8014944 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80119b6:	f7f0 ffed 	bl	8002994 <Error_Handler>
 80119ba:	e00c      	b.n	80119d6 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80119bc:	482c      	ldr	r0, [pc, #176]	; (8011a70 <APP_BLE_Init+0x12c>)
 80119be:	f7ff fe8f 	bl	80116e0 <DbgTraceGetFileName>
 80119c2:	4601      	mov	r1, r0
 80119c4:	f240 134d 	movw	r3, #333	; 0x14d
 80119c8:	4a2a      	ldr	r2, [pc, #168]	; (8011a74 <APP_BLE_Init+0x130>)
 80119ca:	482b      	ldr	r0, [pc, #172]	; (8011a78 <APP_BLE_Init+0x134>)
 80119cc:	f002 ffba 	bl	8014944 <iprintf>
 80119d0:	482b      	ldr	r0, [pc, #172]	; (8011a80 <APP_BLE_Init+0x13c>)
 80119d2:	f002 ffb7 	bl	8014944 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80119d6:	f000 fb1d 	bl	8012014 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80119da:	f7fe ffd7 	bl	801098c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80119de:	4b29      	ldr	r3, [pc, #164]	; (8011a84 <APP_BLE_Init+0x140>)
 80119e0:	2200      	movs	r2, #0
 80119e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80119e6:	4b27      	ldr	r3, [pc, #156]	; (8011a84 <APP_BLE_Init+0x140>)
 80119e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ec:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80119ee:	4a26      	ldr	r2, [pc, #152]	; (8011a88 <APP_BLE_Init+0x144>)
 80119f0:	2100      	movs	r1, #0
 80119f2:	2001      	movs	r0, #1
 80119f4:	f002 f9ba 	bl	8013d6c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80119f8:	2006      	movs	r0, #6
 80119fa:	f7fe fe3a 	bl	8010672 <aci_hal_set_radio_activity_mask>
 80119fe:	4603      	mov	r3, r0
 8011a00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8011a04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d010      	beq.n	8011a2e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8011a0c:	4818      	ldr	r0, [pc, #96]	; (8011a70 <APP_BLE_Init+0x12c>)
 8011a0e:	f7ff fe67 	bl	80116e0 <DbgTraceGetFileName>
 8011a12:	4601      	mov	r1, r0
 8011a14:	f240 1371 	movw	r3, #369	; 0x171
 8011a18:	4a16      	ldr	r2, [pc, #88]	; (8011a74 <APP_BLE_Init+0x130>)
 8011a1a:	4817      	ldr	r0, [pc, #92]	; (8011a78 <APP_BLE_Init+0x134>)
 8011a1c:	f002 ff92 	bl	8014944 <iprintf>
 8011a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a24:	4619      	mov	r1, r3
 8011a26:	4819      	ldr	r0, [pc, #100]	; (8011a8c <APP_BLE_Init+0x148>)
 8011a28:	f002 ff8c 	bl	8014944 <iprintf>
 8011a2c:	e00c      	b.n	8011a48 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8011a2e:	4810      	ldr	r0, [pc, #64]	; (8011a70 <APP_BLE_Init+0x12c>)
 8011a30:	f7ff fe56 	bl	80116e0 <DbgTraceGetFileName>
 8011a34:	4601      	mov	r1, r0
 8011a36:	f240 1375 	movw	r3, #373	; 0x175
 8011a3a:	4a0e      	ldr	r2, [pc, #56]	; (8011a74 <APP_BLE_Init+0x130>)
 8011a3c:	480e      	ldr	r0, [pc, #56]	; (8011a78 <APP_BLE_Init+0x134>)
 8011a3e:	f002 ff81 	bl	8014944 <iprintf>
 8011a42:	4813      	ldr	r0, [pc, #76]	; (8011a90 <APP_BLE_Init+0x14c>)
 8011a44:	f002 ff7e 	bl	8014944 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8011a48:	f000 ff4e 	bl	80128e8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8011a4c:	4b0d      	ldr	r3, [pc, #52]	; (8011a84 <APP_BLE_Init+0x140>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8011a52:	4b0c      	ldr	r3, [pc, #48]	; (8011a84 <APP_BLE_Init+0x140>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8011a58:	2001      	movs	r0, #1
 8011a5a:	f000 fd6f 	bl	801253c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8011a5e:	bf00      	nop
}
 8011a60:	3740      	adds	r7, #64	; 0x40
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bdb0      	pop	{r4, r5, r7, pc}
 8011a66:	bf00      	nop
 8011a68:	080176c8 	.word	0x080176c8
 8011a6c:	08010cf5 	.word	0x08010cf5
 8011a70:	080175bc 	.word	0x080175bc
 8011a74:	08018a34 	.word	0x08018a34
 8011a78:	080175d8 	.word	0x080175d8
 8011a7c:	080175ec 	.word	0x080175ec
 8011a80:	08017624 	.word	0x08017624
 8011a84:	200011ec 	.word	0x200011ec
 8011a88:	080126c1 	.word	0x080126c1
 8011a8c:	0801764c 	.word	0x0801764c
 8011a90:	08017690 	.word	0x08017690

08011a94 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8011a94:	b5b0      	push	{r4, r5, r7, lr}
 8011a96:	b08e      	sub	sp, #56	; 0x38
 8011a98:	af04      	add	r7, sp, #16
 8011a9a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8011a9c:	2392      	movs	r3, #146	; 0x92
 8011a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8011aa8:	6a3b      	ldr	r3, [r7, #32]
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	2bff      	cmp	r3, #255	; 0xff
 8011aae:	f000 811d 	beq.w	8011cec <SVCCTL_App_Notification+0x258>
 8011ab2:	2bff      	cmp	r3, #255	; 0xff
 8011ab4:	f300 8269 	bgt.w	8011f8a <SVCCTL_App_Notification+0x4f6>
 8011ab8:	2b05      	cmp	r3, #5
 8011aba:	d002      	beq.n	8011ac2 <SVCCTL_App_Notification+0x2e>
 8011abc:	2b3e      	cmp	r3, #62	; 0x3e
 8011abe:	d042      	beq.n	8011b46 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8011ac0:	e263      	b.n	8011f8a <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8011ac2:	6a3b      	ldr	r3, [r7, #32]
 8011ac4:	3302      	adds	r3, #2
 8011ac6:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	4bb1      	ldr	r3, [pc, #708]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011ad2:	8adb      	ldrh	r3, [r3, #22]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d128      	bne.n	8011b2a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8011ad8:	4baf      	ldr	r3, [pc, #700]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011ada:	2200      	movs	r2, #0
 8011adc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8011ade:	4bae      	ldr	r3, [pc, #696]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8011ae6:	48ad      	ldr	r0, [pc, #692]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011ae8:	f7ff fdfa 	bl	80116e0 <DbgTraceGetFileName>
 8011aec:	4601      	mov	r1, r0
 8011aee:	f240 13b9 	movw	r3, #441	; 0x1b9
 8011af2:	4aab      	ldr	r2, [pc, #684]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011af4:	48ab      	ldr	r0, [pc, #684]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011af6:	f002 ff25 	bl	8014944 <iprintf>
 8011afa:	48ab      	ldr	r0, [pc, #684]	; (8011da8 <SVCCTL_App_Notification+0x314>)
 8011afc:	f002 ffbe 	bl	8014a7c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8011b00:	48a6      	ldr	r0, [pc, #664]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011b02:	f7ff fded 	bl	80116e0 <DbgTraceGetFileName>
 8011b06:	4601      	mov	r1, r0
 8011b08:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8011b0c:	4aa4      	ldr	r2, [pc, #656]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011b0e:	48a5      	ldr	r0, [pc, #660]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011b10:	f002 ff18 	bl	8014944 <iprintf>
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	78db      	ldrb	r3, [r3, #3]
 8011b22:	461a      	mov	r2, r3
 8011b24:	48a1      	ldr	r0, [pc, #644]	; (8011dac <SVCCTL_App_Notification+0x318>)
 8011b26:	f002 ff0d 	bl	8014944 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8011b2a:	2001      	movs	r0, #1
 8011b2c:	f000 fd06 	bl	801253c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8011b30:	4b9f      	ldr	r3, [pc, #636]	; (8011db0 <SVCCTL_App_Notification+0x31c>)
 8011b32:	2201      	movs	r2, #1
 8011b34:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011b36:	4b98      	ldr	r3, [pc, #608]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011b38:	8ada      	ldrh	r2, [r3, #22]
 8011b3a:	4b9d      	ldr	r3, [pc, #628]	; (8011db0 <SVCCTL_App_Notification+0x31c>)
 8011b3c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8011b3e:	489c      	ldr	r0, [pc, #624]	; (8011db0 <SVCCTL_App_Notification+0x31c>)
 8011b40:	f000 febe 	bl	80128c0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8011b44:	e224      	b.n	8011f90 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8011b46:	6a3b      	ldr	r3, [r7, #32]
 8011b48:	3302      	adds	r3, #2
 8011b4a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d042      	beq.n	8011bda <SVCCTL_App_Notification+0x146>
 8011b54:	2b03      	cmp	r3, #3
 8011b56:	f040 80c7 	bne.w	8011ce8 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8011b60:	488e      	ldr	r0, [pc, #568]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011b62:	f7ff fdbd 	bl	80116e0 <DbgTraceGetFileName>
 8011b66:	4601      	mov	r1, r0
 8011b68:	f240 13e1 	movw	r3, #481	; 0x1e1
 8011b6c:	4a8c      	ldr	r2, [pc, #560]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011b6e:	488d      	ldr	r0, [pc, #564]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011b70:	f002 fee8 	bl	8014944 <iprintf>
 8011b74:	488f      	ldr	r0, [pc, #572]	; (8011db4 <SVCCTL_App_Notification+0x320>)
 8011b76:	f002 ff81 	bl	8014a7c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8011b7a:	4888      	ldr	r0, [pc, #544]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011b7c:	f7ff fdb0 	bl	80116e0 <DbgTraceGetFileName>
 8011b80:	4601      	mov	r1, r0
 8011b82:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8011b86:	4a86      	ldr	r2, [pc, #536]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011b88:	4886      	ldr	r0, [pc, #536]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011b8a:	f002 fedb 	bl	8014944 <iprintf>
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ee fc9c 	bl	80004d4 <__aeabi_i2d>
 8011b9c:	f04f 0200 	mov.w	r2, #0
 8011ba0:	4b85      	ldr	r3, [pc, #532]	; (8011db8 <SVCCTL_App_Notification+0x324>)
 8011ba2:	f7ee fd01 	bl	80005a8 <__aeabi_dmul>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4610      	mov	r0, r2
 8011bac:	4619      	mov	r1, r3
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	461c      	mov	r4, r3
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4413      	add	r3, r2
 8011bc8:	005b      	lsls	r3, r3, #1
 8011bca:	9301      	str	r3, [sp, #4]
 8011bcc:	9400      	str	r4, [sp, #0]
 8011bce:	4602      	mov	r2, r0
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	487a      	ldr	r0, [pc, #488]	; (8011dbc <SVCCTL_App_Notification+0x328>)
 8011bd4:	f002 feb6 	bl	8014944 <iprintf>
          break;
 8011bd8:	e087      	b.n	8011cea <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8011be0:	486e      	ldr	r0, [pc, #440]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011be2:	f7ff fd7d 	bl	80116e0 <DbgTraceGetFileName>
 8011be6:	4601      	mov	r1, r0
 8011be8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011bec:	4a6c      	ldr	r2, [pc, #432]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011bee:	486d      	ldr	r0, [pc, #436]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011bf0:	f002 fea8 	bl	8014944 <iprintf>
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	4870      	ldr	r0, [pc, #448]	; (8011dc0 <SVCCTL_App_Notification+0x32c>)
 8011c00:	f002 fea0 	bl	8014944 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8011c04:	4865      	ldr	r0, [pc, #404]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011c06:	f7ff fd6b 	bl	80116e0 <DbgTraceGetFileName>
 8011c0a:	4601      	mov	r1, r0
 8011c0c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8011c10:	4a63      	ldr	r2, [pc, #396]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011c12:	4864      	ldr	r0, [pc, #400]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011c14:	f002 fe96 	bl	8014944 <iprintf>
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	7a9b      	ldrb	r3, [r3, #10]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	7a5b      	ldrb	r3, [r3, #9]
 8011c22:	461c      	mov	r4, r3
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	7a1b      	ldrb	r3, [r3, #8]
 8011c28:	461d      	mov	r5, r3
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	79db      	ldrb	r3, [r3, #7]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	799b      	ldrb	r3, [r3, #6]
 8011c34:	4619      	mov	r1, r3
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	795b      	ldrb	r3, [r3, #5]
 8011c3a:	9302      	str	r3, [sp, #8]
 8011c3c:	9101      	str	r1, [sp, #4]
 8011c3e:	9200      	str	r2, [sp, #0]
 8011c40:	462b      	mov	r3, r5
 8011c42:	4622      	mov	r2, r4
 8011c44:	4601      	mov	r1, r0
 8011c46:	485f      	ldr	r0, [pc, #380]	; (8011dc4 <SVCCTL_App_Notification+0x330>)
 8011c48:	f002 fe7c 	bl	8014944 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8011c4c:	4853      	ldr	r0, [pc, #332]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011c4e:	f7ff fd47 	bl	80116e0 <DbgTraceGetFileName>
 8011c52:	4601      	mov	r1, r0
 8011c54:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8011c58:	4a51      	ldr	r2, [pc, #324]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011c5a:	4852      	ldr	r0, [pc, #328]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011c5c:	f002 fe72 	bl	8014944 <iprintf>
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ee fc33 	bl	80004d4 <__aeabi_i2d>
 8011c6e:	f04f 0200 	mov.w	r2, #0
 8011c72:	4b51      	ldr	r3, [pc, #324]	; (8011db8 <SVCCTL_App_Notification+0x324>)
 8011c74:	f7ee fc98 	bl	80005a8 <__aeabi_dmul>
 8011c78:	4602      	mov	r2, r0
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	4619      	mov	r1, r3
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	461c      	mov	r4, r3
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	461a      	mov	r2, r3
 8011c94:	4613      	mov	r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	005b      	lsls	r3, r3, #1
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	9400      	str	r4, [sp, #0]
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	4845      	ldr	r0, [pc, #276]	; (8011dbc <SVCCTL_App_Notification+0x328>)
 8011ca6:	f002 fe4d 	bl	8014944 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8011caa:	4b3b      	ldr	r3, [pc, #236]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011cac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011cb0:	2b04      	cmp	r3, #4
 8011cb2:	d104      	bne.n	8011cbe <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8011cb4:	4b38      	ldr	r3, [pc, #224]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011cb6:	2206      	movs	r2, #6
 8011cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8011cbc:	e003      	b.n	8011cc6 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8011cbe:	4b36      	ldr	r3, [pc, #216]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011cc0:	2205      	movs	r2, #5
 8011cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	4b32      	ldr	r3, [pc, #200]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011cd0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8011cd2:	4b37      	ldr	r3, [pc, #220]	; (8011db0 <SVCCTL_App_Notification+0x31c>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011cd8:	4b2f      	ldr	r3, [pc, #188]	; (8011d98 <SVCCTL_App_Notification+0x304>)
 8011cda:	8ada      	ldrh	r2, [r3, #22]
 8011cdc:	4b34      	ldr	r3, [pc, #208]	; (8011db0 <SVCCTL_App_Notification+0x31c>)
 8011cde:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8011ce0:	4833      	ldr	r0, [pc, #204]	; (8011db0 <SVCCTL_App_Notification+0x31c>)
 8011ce2:	f000 fded 	bl	80128c0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8011ce6:	e000      	b.n	8011cea <SVCCTL_App_Notification+0x256>
          break;
 8011ce8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8011cea:	e151      	b.n	8011f90 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	3302      	adds	r3, #2
 8011cf0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011cfc:	f000 8141 	beq.w	8011f82 <SVCCTL_App_Notification+0x4ee>
 8011d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d04:	f300 8143 	bgt.w	8011f8e <SVCCTL_App_Notification+0x4fa>
 8011d08:	2b04      	cmp	r3, #4
 8011d0a:	f000 813c 	beq.w	8011f86 <SVCCTL_App_Notification+0x4f2>
 8011d0e:	2b04      	cmp	r3, #4
 8011d10:	f2c0 813d 	blt.w	8011f8e <SVCCTL_App_Notification+0x4fa>
 8011d14:	f240 420a 	movw	r2, #1034	; 0x40a
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	f300 8138 	bgt.w	8011f8e <SVCCTL_App_Notification+0x4fa>
 8011d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d22:	f340 8134 	ble.w	8011f8e <SVCCTL_App_Notification+0x4fa>
 8011d26:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8011d2a:	2b09      	cmp	r3, #9
 8011d2c:	f200 812f 	bhi.w	8011f8e <SVCCTL_App_Notification+0x4fa>
 8011d30:	a201      	add	r2, pc, #4	; (adr r2, 8011d38 <SVCCTL_App_Notification+0x2a4>)
 8011d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d36:	bf00      	nop
 8011d38:	08011efd 	.word	0x08011efd
 8011d3c:	08011dd1 	.word	0x08011dd1
 8011d40:	08011f8f 	.word	0x08011f8f
 8011d44:	08011f8f 	.word	0x08011f8f
 8011d48:	08011f8f 	.word	0x08011f8f
 8011d4c:	08011f8f 	.word	0x08011f8f
 8011d50:	08011d61 	.word	0x08011d61
 8011d54:	08011f8f 	.word	0x08011f8f
 8011d58:	08011e43 	.word	0x08011e43
 8011d5c:	08011d7d 	.word	0x08011d7d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8011d60:	480e      	ldr	r0, [pc, #56]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011d62:	f7ff fcbd 	bl	80116e0 <DbgTraceGetFileName>
 8011d66:	4601      	mov	r1, r0
 8011d68:	f240 233e 	movw	r3, #574	; 0x23e
 8011d6c:	4a0c      	ldr	r2, [pc, #48]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011d6e:	480d      	ldr	r0, [pc, #52]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011d70:	f002 fde8 	bl	8014944 <iprintf>
 8011d74:	4814      	ldr	r0, [pc, #80]	; (8011dc8 <SVCCTL_App_Notification+0x334>)
 8011d76:	f002 fde5 	bl	8014944 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8011d7a:	e105      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8011d7c:	4807      	ldr	r0, [pc, #28]	; (8011d9c <SVCCTL_App_Notification+0x308>)
 8011d7e:	f7ff fcaf 	bl	80116e0 <DbgTraceGetFileName>
 8011d82:	4601      	mov	r1, r0
 8011d84:	f240 234e 	movw	r3, #590	; 0x24e
 8011d88:	4a05      	ldr	r2, [pc, #20]	; (8011da0 <SVCCTL_App_Notification+0x30c>)
 8011d8a:	4806      	ldr	r0, [pc, #24]	; (8011da4 <SVCCTL_App_Notification+0x310>)
 8011d8c:	f002 fdda 	bl	8014944 <iprintf>
 8011d90:	480e      	ldr	r0, [pc, #56]	; (8011dcc <SVCCTL_App_Notification+0x338>)
 8011d92:	f002 fe73 	bl	8014a7c <puts>
          break;
 8011d96:	e0f7      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
 8011d98:	200011ec 	.word	0x200011ec
 8011d9c:	080175bc 	.word	0x080175bc
 8011da0:	08018a44 	.word	0x08018a44
 8011da4:	080175d8 	.word	0x080175d8
 8011da8:	08017704 	.word	0x08017704
 8011dac:	08017730 	.word	0x08017730
 8011db0:	20001270 	.word	0x20001270
 8011db4:	0801776c 	.word	0x0801776c
 8011db8:	3ff40000 	.word	0x3ff40000
 8011dbc:	080177a0 	.word	0x080177a0
 8011dc0:	0801780c 	.word	0x0801780c
 8011dc4:	08017854 	.word	0x08017854
 8011dc8:	080178a4 	.word	0x080178a4
 8011dcc:	080178cc 	.word	0x080178cc
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8011dd0:	4872      	ldr	r0, [pc, #456]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011dd2:	f7ff fc85 	bl	80116e0 <DbgTraceGetFileName>
 8011dd6:	4601      	mov	r1, r0
 8011dd8:	f240 2355 	movw	r3, #597	; 0x255
 8011ddc:	4a70      	ldr	r2, [pc, #448]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011dde:	4871      	ldr	r0, [pc, #452]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011de0:	f002 fdb0 	bl	8014944 <iprintf>
 8011de4:	4870      	ldr	r0, [pc, #448]	; (8011fa8 <SVCCTL_App_Notification+0x514>)
 8011de6:	f002 fe49 	bl	8014a7c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8011dea:	4b70      	ldr	r3, [pc, #448]	; (8011fac <SVCCTL_App_Notification+0x518>)
 8011dec:	8adb      	ldrh	r3, [r3, #22]
 8011dee:	4970      	ldr	r1, [pc, #448]	; (8011fb0 <SVCCTL_App_Notification+0x51c>)
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fd fe95 	bl	800fb20 <aci_gap_pass_key_resp>
 8011df6:	4603      	mov	r3, r0
 8011df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8011dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d010      	beq.n	8011e26 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8011e04:	4865      	ldr	r0, [pc, #404]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011e06:	f7ff fc6b 	bl	80116e0 <DbgTraceGetFileName>
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	f240 235a 	movw	r3, #602	; 0x25a
 8011e10:	4a63      	ldr	r2, [pc, #396]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011e12:	4864      	ldr	r0, [pc, #400]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011e14:	f002 fd96 	bl	8014944 <iprintf>
 8011e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4865      	ldr	r0, [pc, #404]	; (8011fb4 <SVCCTL_App_Notification+0x520>)
 8011e20:	f002 fd90 	bl	8014944 <iprintf>
          break;
 8011e24:	e0b0      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8011e26:	485d      	ldr	r0, [pc, #372]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011e28:	f7ff fc5a 	bl	80116e0 <DbgTraceGetFileName>
 8011e2c:	4601      	mov	r1, r0
 8011e2e:	f240 235e 	movw	r3, #606	; 0x25e
 8011e32:	4a5b      	ldr	r2, [pc, #364]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011e34:	485b      	ldr	r0, [pc, #364]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011e36:	f002 fd85 	bl	8014944 <iprintf>
 8011e3a:	485f      	ldr	r0, [pc, #380]	; (8011fb8 <SVCCTL_App_Notification+0x524>)
 8011e3c:	f002 fe1e 	bl	8014a7c <puts>
          break;
 8011e40:	e0a2      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8011e42:	4856      	ldr	r0, [pc, #344]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011e44:	f7ff fc4c 	bl	80116e0 <DbgTraceGetFileName>
 8011e48:	4601      	mov	r1, r0
 8011e4a:	f240 2366 	movw	r3, #614	; 0x266
 8011e4e:	4a54      	ldr	r2, [pc, #336]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011e50:	4854      	ldr	r0, [pc, #336]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011e52:	f002 fd77 	bl	8014944 <iprintf>
 8011e56:	4859      	ldr	r0, [pc, #356]	; (8011fbc <SVCCTL_App_Notification+0x528>)
 8011e58:	f002 fe10 	bl	8014a7c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8011e5c:	484f      	ldr	r0, [pc, #316]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011e5e:	f7ff fc3f 	bl	80116e0 <DbgTraceGetFileName>
 8011e62:	4601      	mov	r1, r0
 8011e64:	f240 2367 	movw	r3, #615	; 0x267
 8011e68:	4a4d      	ldr	r2, [pc, #308]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011e6a:	484e      	ldr	r0, [pc, #312]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011e6c:	f002 fd6a 	bl	8014944 <iprintf>
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	3302      	adds	r3, #2
 8011e74:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8011e78:	4619      	mov	r1, r3
 8011e7a:	4851      	ldr	r0, [pc, #324]	; (8011fc0 <SVCCTL_App_Notification+0x52c>)
 8011e7c:	f002 fd62 	bl	8014944 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8011e80:	4846      	ldr	r0, [pc, #280]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011e82:	f7ff fc2d 	bl	80116e0 <DbgTraceGetFileName>
 8011e86:	4601      	mov	r1, r0
 8011e88:	f240 2369 	movw	r3, #617	; 0x269
 8011e8c:	4a44      	ldr	r2, [pc, #272]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011e8e:	4845      	ldr	r0, [pc, #276]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011e90:	f002 fd58 	bl	8014944 <iprintf>
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	3302      	adds	r3, #2
 8011e98:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	4849      	ldr	r0, [pc, #292]	; (8011fc4 <SVCCTL_App_Notification+0x530>)
 8011ea0:	f002 fd50 	bl	8014944 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8011ea4:	4b41      	ldr	r3, [pc, #260]	; (8011fac <SVCCTL_App_Notification+0x518>)
 8011ea6:	8adb      	ldrh	r3, [r3, #22]
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fd ffe2 	bl	800fe74 <aci_gap_numeric_comparison_value_confirm_yesno>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8011eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d010      	beq.n	8011ee0 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8011ebe:	4837      	ldr	r0, [pc, #220]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011ec0:	f7ff fc0e 	bl	80116e0 <DbgTraceGetFileName>
 8011ec4:	4601      	mov	r1, r0
 8011ec6:	f240 236e 	movw	r3, #622	; 0x26e
 8011eca:	4a35      	ldr	r2, [pc, #212]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011ecc:	4835      	ldr	r0, [pc, #212]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011ece:	f002 fd39 	bl	8014944 <iprintf>
 8011ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed6:	4619      	mov	r1, r3
 8011ed8:	483b      	ldr	r0, [pc, #236]	; (8011fc8 <SVCCTL_App_Notification+0x534>)
 8011eda:	f002 fd33 	bl	8014944 <iprintf>
          break;
 8011ede:	e053      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8011ee0:	482e      	ldr	r0, [pc, #184]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011ee2:	f7ff fbfd 	bl	80116e0 <DbgTraceGetFileName>
 8011ee6:	4601      	mov	r1, r0
 8011ee8:	f240 2372 	movw	r3, #626	; 0x272
 8011eec:	4a2c      	ldr	r2, [pc, #176]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011eee:	482d      	ldr	r0, [pc, #180]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011ef0:	f002 fd28 	bl	8014944 <iprintf>
 8011ef4:	4835      	ldr	r0, [pc, #212]	; (8011fcc <SVCCTL_App_Notification+0x538>)
 8011ef6:	f002 fdc1 	bl	8014a7c <puts>
          break;
 8011efa:	e045      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	3302      	adds	r3, #2
 8011f00:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8011f02:	4826      	ldr	r0, [pc, #152]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011f04:	f7ff fbec 	bl	80116e0 <DbgTraceGetFileName>
 8011f08:	4601      	mov	r1, r0
 8011f0a:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8011f0e:	4a24      	ldr	r2, [pc, #144]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011f10:	4824      	ldr	r0, [pc, #144]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011f12:	f002 fd17 	bl	8014944 <iprintf>
 8011f16:	482e      	ldr	r0, [pc, #184]	; (8011fd0 <SVCCTL_App_Notification+0x53c>)
 8011f18:	f002 fdb0 	bl	8014a7c <puts>
          if (p_pairing_complete->Status != 0)
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	789b      	ldrb	r3, [r3, #2]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d013      	beq.n	8011f4c <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8011f24:	481d      	ldr	r0, [pc, #116]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011f26:	f7ff fbdb 	bl	80116e0 <DbgTraceGetFileName>
 8011f2a:	4601      	mov	r1, r0
 8011f2c:	f240 237f 	movw	r3, #639	; 0x27f
 8011f30:	4a1b      	ldr	r2, [pc, #108]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011f32:	481c      	ldr	r0, [pc, #112]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011f34:	f002 fd06 	bl	8014944 <iprintf>
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	789b      	ldrb	r3, [r3, #2]
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	78db      	ldrb	r3, [r3, #3]
 8011f42:	461a      	mov	r2, r3
 8011f44:	4823      	ldr	r0, [pc, #140]	; (8011fd4 <SVCCTL_App_Notification+0x540>)
 8011f46:	f002 fcfd 	bl	8014944 <iprintf>
 8011f4a:	e00c      	b.n	8011f66 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 8011f4c:	4813      	ldr	r0, [pc, #76]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011f4e:	f7ff fbc7 	bl	80116e0 <DbgTraceGetFileName>
 8011f52:	4601      	mov	r1, r0
 8011f54:	f240 2383 	movw	r3, #643	; 0x283
 8011f58:	4a11      	ldr	r2, [pc, #68]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011f5a:	4812      	ldr	r0, [pc, #72]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011f5c:	f002 fcf2 	bl	8014944 <iprintf>
 8011f60:	481d      	ldr	r0, [pc, #116]	; (8011fd8 <SVCCTL_App_Notification+0x544>)
 8011f62:	f002 fd8b 	bl	8014a7c <puts>
          APP_DBG_MSG("\n");
 8011f66:	480d      	ldr	r0, [pc, #52]	; (8011f9c <SVCCTL_App_Notification+0x508>)
 8011f68:	f7ff fbba 	bl	80116e0 <DbgTraceGetFileName>
 8011f6c:	4601      	mov	r1, r0
 8011f6e:	f240 2385 	movw	r3, #645	; 0x285
 8011f72:	4a0b      	ldr	r2, [pc, #44]	; (8011fa0 <SVCCTL_App_Notification+0x50c>)
 8011f74:	480b      	ldr	r0, [pc, #44]	; (8011fa4 <SVCCTL_App_Notification+0x510>)
 8011f76:	f002 fce5 	bl	8014944 <iprintf>
 8011f7a:	200a      	movs	r0, #10
 8011f7c:	f002 fcfa 	bl	8014974 <putchar>
          break;
 8011f80:	e002      	b.n	8011f88 <SVCCTL_App_Notification+0x4f4>
          break;
 8011f82:	bf00      	nop
 8011f84:	e003      	b.n	8011f8e <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8011f86:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011f88:	e001      	b.n	8011f8e <SVCCTL_App_Notification+0x4fa>
      break;
 8011f8a:	bf00      	nop
 8011f8c:	e000      	b.n	8011f90 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011f8e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8011f90:	2301      	movs	r3, #1
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3728      	adds	r7, #40	; 0x28
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bdb0      	pop	{r4, r5, r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	080175bc 	.word	0x080175bc
 8011fa0:	08018a44 	.word	0x08018a44
 8011fa4:	080175d8 	.word	0x080175d8
 8011fa8:	080178fc 	.word	0x080178fc
 8011fac:	200011ec 	.word	0x200011ec
 8011fb0:	0001b207 	.word	0x0001b207
 8011fb4:	08017924 	.word	0x08017924
 8011fb8:	08017958 	.word	0x08017958
 8011fbc:	08017980 	.word	0x08017980
 8011fc0:	080179b4 	.word	0x080179b4
 8011fc4:	080179d0 	.word	0x080179d0
 8011fc8:	080179e8 	.word	0x080179e8
 8011fcc:	08017a38 	.word	0x08017a38
 8011fd0:	08017a80 	.word	0x08017a80
 8011fd4:	08017aac 	.word	0x08017aac
 8011fd8:	08017ae8 	.word	0x08017ae8

08011fdc <APP_BLE_Key_Button3_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button3_Action(void)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	af00      	add	r7, sp, #0
	FSVC_APP_B3_Button_Action();
 8011fe0:	f000 fcb8 	bl	8012954 <FSVC_APP_B3_Button_Action>
}
 8011fe4:	bf00      	nop
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8011fee:	4b06      	ldr	r3, [pc, #24]	; (8012008 <Ble_Tl_Init+0x20>)
 8011ff0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8011ff2:	4b06      	ldr	r3, [pc, #24]	; (801200c <Ble_Tl_Init+0x24>)
 8011ff4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8011ff6:	463b      	mov	r3, r7
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	4805      	ldr	r0, [pc, #20]	; (8012010 <Ble_Tl_Init+0x28>)
 8011ffc:	f7fe fe5e 	bl	8010cbc <hci_init>

  return;
 8012000:	bf00      	nop
}
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	200300d8 	.word	0x200300d8
 801200c:	080127dd 	.word	0x080127dd
 8012010:	080127a5 	.word	0x080127a5

08012014 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8012014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012016:	b08d      	sub	sp, #52	; 0x34
 8012018:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801201a:	2300      	movs	r3, #0
 801201c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801201e:	2392      	movs	r3, #146	; 0x92
 8012020:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8012022:	48a3      	ldr	r0, [pc, #652]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012024:	f7ff fb5c 	bl	80116e0 <DbgTraceGetFileName>
 8012028:	4601      	mov	r1, r0
 801202a:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 801202e:	4aa1      	ldr	r2, [pc, #644]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012030:	48a1      	ldr	r0, [pc, #644]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012032:	f002 fc87 	bl	8014944 <iprintf>
 8012036:	48a1      	ldr	r0, [pc, #644]	; (80122bc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8012038:	f002 fd20 	bl	8014a7c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801203c:	f7fe fb6d 	bl	801071a <hci_reset>
 8012040:	4603      	mov	r3, r0
 8012042:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012044:	7dfb      	ldrb	r3, [r7, #23]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00f      	beq.n	801206a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 801204a:	4899      	ldr	r0, [pc, #612]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801204c:	f7ff fb48 	bl	80116e0 <DbgTraceGetFileName>
 8012050:	4601      	mov	r1, r0
 8012052:	f240 23d1 	movw	r3, #721	; 0x2d1
 8012056:	4a97      	ldr	r2, [pc, #604]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012058:	4897      	ldr	r0, [pc, #604]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801205a:	f002 fc73 	bl	8014944 <iprintf>
 801205e:	7dfb      	ldrb	r3, [r7, #23]
 8012060:	4619      	mov	r1, r3
 8012062:	4897      	ldr	r0, [pc, #604]	; (80122c0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8012064:	f002 fc6e 	bl	8014944 <iprintf>
 8012068:	e00c      	b.n	8012084 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 801206a:	4891      	ldr	r0, [pc, #580]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801206c:	f7ff fb38 	bl	80116e0 <DbgTraceGetFileName>
 8012070:	4601      	mov	r1, r0
 8012072:	f240 23d5 	movw	r3, #725	; 0x2d5
 8012076:	4a8f      	ldr	r2, [pc, #572]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012078:	488f      	ldr	r0, [pc, #572]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801207a:	f002 fc63 	bl	8014944 <iprintf>
 801207e:	4891      	ldr	r0, [pc, #580]	; (80122c4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8012080:	f002 fcfc 	bl	8014a7c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8012084:	f000 fad8 	bl	8012638 <BleGetBdAddress>
 8012088:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801208a:	693a      	ldr	r2, [r7, #16]
 801208c:	2106      	movs	r1, #6
 801208e:	2000      	movs	r0, #0
 8012090:	f7fe fa03 	bl	801049a <aci_hal_write_config_data>
 8012094:	4603      	mov	r3, r0
 8012096:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00f      	beq.n	80120be <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 801209e:	4884      	ldr	r0, [pc, #528]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80120a0:	f7ff fb1e 	bl	80116e0 <DbgTraceGetFileName>
 80120a4:	4601      	mov	r1, r0
 80120a6:	f240 23df 	movw	r3, #735	; 0x2df
 80120aa:	4a82      	ldr	r2, [pc, #520]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80120ac:	4882      	ldr	r0, [pc, #520]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80120ae:	f002 fc49 	bl	8014944 <iprintf>
 80120b2:	7dfb      	ldrb	r3, [r7, #23]
 80120b4:	4619      	mov	r1, r3
 80120b6:	4884      	ldr	r0, [pc, #528]	; (80122c8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 80120b8:	f002 fc44 	bl	8014944 <iprintf>
 80120bc:	e035      	b.n	801212a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80120be:	487c      	ldr	r0, [pc, #496]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80120c0:	f7ff fb0e 	bl	80116e0 <DbgTraceGetFileName>
 80120c4:	4601      	mov	r1, r0
 80120c6:	f240 23e3 	movw	r3, #739	; 0x2e3
 80120ca:	4a7a      	ldr	r2, [pc, #488]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80120cc:	487a      	ldr	r0, [pc, #488]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80120ce:	f002 fc39 	bl	8014944 <iprintf>
 80120d2:	487e      	ldr	r0, [pc, #504]	; (80122cc <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80120d4:	f002 fcd2 	bl	8014a7c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80120d8:	4875      	ldr	r0, [pc, #468]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80120da:	f7ff fb01 	bl	80116e0 <DbgTraceGetFileName>
 80120de:	4601      	mov	r1, r0
 80120e0:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 80120e4:	4a73      	ldr	r2, [pc, #460]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80120e6:	4874      	ldr	r0, [pc, #464]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80120e8:	f002 fc2c 	bl	8014944 <iprintf>
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	3305      	adds	r3, #5
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	4618      	mov	r0, r3
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	3304      	adds	r3, #4
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	461c      	mov	r4, r3
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	3303      	adds	r3, #3
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	461d      	mov	r5, r3
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	3302      	adds	r3, #2
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	461a      	mov	r2, r3
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	3301      	adds	r3, #1
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	4619      	mov	r1, r3
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	9302      	str	r3, [sp, #8]
 801211a:	9101      	str	r1, [sp, #4]
 801211c:	9200      	str	r2, [sp, #0]
 801211e:	462b      	mov	r3, r5
 8012120:	4622      	mov	r2, r4
 8012122:	4601      	mov	r1, r0
 8012124:	486a      	ldr	r0, [pc, #424]	; (80122d0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8012126:	f002 fc0d 	bl	8014944 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801212a:	4a6a      	ldr	r2, [pc, #424]	; (80122d4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 801212c:	2110      	movs	r1, #16
 801212e:	2018      	movs	r0, #24
 8012130:	f7fe f9b3 	bl	801049a <aci_hal_write_config_data>
 8012134:	4603      	mov	r3, r0
 8012136:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012138:	7dfb      	ldrb	r3, [r7, #23]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d00f      	beq.n	801215e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 801213e:	485c      	ldr	r0, [pc, #368]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012140:	f7ff face 	bl	80116e0 <DbgTraceGetFileName>
 8012144:	4601      	mov	r1, r0
 8012146:	f240 332e 	movw	r3, #814	; 0x32e
 801214a:	4a5a      	ldr	r2, [pc, #360]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801214c:	485a      	ldr	r0, [pc, #360]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801214e:	f002 fbf9 	bl	8014944 <iprintf>
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	4619      	mov	r1, r3
 8012156:	4860      	ldr	r0, [pc, #384]	; (80122d8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8012158:	f002 fbf4 	bl	8014944 <iprintf>
 801215c:	e00c      	b.n	8012178 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 801215e:	4854      	ldr	r0, [pc, #336]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012160:	f7ff fabe 	bl	80116e0 <DbgTraceGetFileName>
 8012164:	4601      	mov	r1, r0
 8012166:	f240 3332 	movw	r3, #818	; 0x332
 801216a:	4a52      	ldr	r2, [pc, #328]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801216c:	4852      	ldr	r0, [pc, #328]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801216e:	f002 fbe9 	bl	8014944 <iprintf>
 8012172:	485a      	ldr	r0, [pc, #360]	; (80122dc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8012174:	f002 fc82 	bl	8014a7c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8012178:	4a59      	ldr	r2, [pc, #356]	; (80122e0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 801217a:	2110      	movs	r1, #16
 801217c:	2008      	movs	r0, #8
 801217e:	f7fe f98c 	bl	801049a <aci_hal_write_config_data>
 8012182:	4603      	mov	r3, r0
 8012184:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012186:	7dfb      	ldrb	r3, [r7, #23]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d00f      	beq.n	80121ac <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 801218c:	4848      	ldr	r0, [pc, #288]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801218e:	f7ff faa7 	bl	80116e0 <DbgTraceGetFileName>
 8012192:	4601      	mov	r1, r0
 8012194:	f240 333b 	movw	r3, #827	; 0x33b
 8012198:	4a46      	ldr	r2, [pc, #280]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801219a:	4847      	ldr	r0, [pc, #284]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801219c:	f002 fbd2 	bl	8014944 <iprintf>
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
 80121a2:	4619      	mov	r1, r3
 80121a4:	484f      	ldr	r0, [pc, #316]	; (80122e4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 80121a6:	f002 fbcd 	bl	8014944 <iprintf>
 80121aa:	e00c      	b.n	80121c6 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80121ac:	4840      	ldr	r0, [pc, #256]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80121ae:	f7ff fa97 	bl	80116e0 <DbgTraceGetFileName>
 80121b2:	4601      	mov	r1, r0
 80121b4:	f240 333f 	movw	r3, #831	; 0x33f
 80121b8:	4a3e      	ldr	r2, [pc, #248]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80121ba:	483f      	ldr	r0, [pc, #252]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80121bc:	f002 fbc2 	bl	8014944 <iprintf>
 80121c0:	4849      	ldr	r0, [pc, #292]	; (80122e8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80121c2:	f002 fc5b 	bl	8014a7c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80121c6:	2118      	movs	r1, #24
 80121c8:	2001      	movs	r0, #1
 80121ca:	f7fe f9eb 	bl	80105a4 <aci_hal_set_tx_power_level>
 80121ce:	4603      	mov	r3, r0
 80121d0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80121d2:	7dfb      	ldrb	r3, [r7, #23]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00f      	beq.n	80121f8 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80121d8:	4835      	ldr	r0, [pc, #212]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80121da:	f7ff fa81 	bl	80116e0 <DbgTraceGetFileName>
 80121de:	4601      	mov	r1, r0
 80121e0:	f44f 7352 	mov.w	r3, #840	; 0x348
 80121e4:	4a33      	ldr	r2, [pc, #204]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80121e6:	4834      	ldr	r0, [pc, #208]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80121e8:	f002 fbac 	bl	8014944 <iprintf>
 80121ec:	7dfb      	ldrb	r3, [r7, #23]
 80121ee:	4619      	mov	r1, r3
 80121f0:	483e      	ldr	r0, [pc, #248]	; (80122ec <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80121f2:	f002 fba7 	bl	8014944 <iprintf>
 80121f6:	e00c      	b.n	8012212 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80121f8:	482d      	ldr	r0, [pc, #180]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80121fa:	f7ff fa71 	bl	80116e0 <DbgTraceGetFileName>
 80121fe:	4601      	mov	r1, r0
 8012200:	f44f 7353 	mov.w	r3, #844	; 0x34c
 8012204:	4a2b      	ldr	r2, [pc, #172]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012206:	482c      	ldr	r0, [pc, #176]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012208:	f002 fb9c 	bl	8014944 <iprintf>
 801220c:	4838      	ldr	r0, [pc, #224]	; (80122f0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 801220e:	f002 fc35 	bl	8014a7c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8012212:	f7fd fe96 	bl	800ff42 <aci_gatt_init>
 8012216:	4603      	mov	r3, r0
 8012218:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801221a:	7dfb      	ldrb	r3, [r7, #23]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00f      	beq.n	8012240 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8012220:	4823      	ldr	r0, [pc, #140]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012222:	f7ff fa5d 	bl	80116e0 <DbgTraceGetFileName>
 8012226:	4601      	mov	r1, r0
 8012228:	f240 3355 	movw	r3, #853	; 0x355
 801222c:	4a21      	ldr	r2, [pc, #132]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801222e:	4822      	ldr	r0, [pc, #136]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012230:	f002 fb88 	bl	8014944 <iprintf>
 8012234:	7dfb      	ldrb	r3, [r7, #23]
 8012236:	4619      	mov	r1, r3
 8012238:	482e      	ldr	r0, [pc, #184]	; (80122f4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801223a:	f002 fb83 	bl	8014944 <iprintf>
 801223e:	e00c      	b.n	801225a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8012240:	481b      	ldr	r0, [pc, #108]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012242:	f7ff fa4d 	bl	80116e0 <DbgTraceGetFileName>
 8012246:	4601      	mov	r1, r0
 8012248:	f240 3359 	movw	r3, #857	; 0x359
 801224c:	4a19      	ldr	r2, [pc, #100]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801224e:	481a      	ldr	r0, [pc, #104]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012250:	f002 fb78 	bl	8014944 <iprintf>
 8012254:	4828      	ldr	r0, [pc, #160]	; (80122f8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8012256:	f002 fc11 	bl	8014a7c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801225e:	7bfb      	ldrb	r3, [r7, #15]
 8012260:	f043 0301 	orr.w	r3, r3, #1
 8012264:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8012266:	7bfb      	ldrb	r3, [r7, #15]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d069      	beq.n	8012340 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 801226c:	4b23      	ldr	r3, [pc, #140]	; (80122fc <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 801226e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8012270:	1dba      	adds	r2, r7, #6
 8012272:	7bf8      	ldrb	r0, [r7, #15]
 8012274:	1cbb      	adds	r3, r7, #2
 8012276:	9301      	str	r3, [sp, #4]
 8012278:	1d3b      	adds	r3, r7, #4
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	4613      	mov	r3, r2
 801227e:	2205      	movs	r2, #5
 8012280:	2100      	movs	r1, #0
 8012282:	f7fd fcb4 	bl	800fbee <aci_gap_init>
 8012286:	4603      	mov	r3, r0
 8012288:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 801228a:	7dfb      	ldrb	r3, [r7, #23]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d039      	beq.n	8012304 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8012290:	4807      	ldr	r0, [pc, #28]	; (80122b0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012292:	f7ff fa25 	bl	80116e0 <DbgTraceGetFileName>
 8012296:	4601      	mov	r1, r0
 8012298:	f240 3379 	movw	r3, #889	; 0x379
 801229c:	4a05      	ldr	r2, [pc, #20]	; (80122b4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801229e:	4806      	ldr	r0, [pc, #24]	; (80122b8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80122a0:	f002 fb50 	bl	8014944 <iprintf>
 80122a4:	7dfb      	ldrb	r3, [r7, #23]
 80122a6:	4619      	mov	r1, r3
 80122a8:	4815      	ldr	r0, [pc, #84]	; (8012300 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80122aa:	f002 fb4b 	bl	8014944 <iprintf>
 80122ae:	e036      	b.n	801231e <Ble_Hci_Gap_Gatt_Init+0x30a>
 80122b0:	080175bc 	.word	0x080175bc
 80122b4:	08018a5c 	.word	0x08018a5c
 80122b8:	080175d8 	.word	0x080175d8
 80122bc:	08017b00 	.word	0x08017b00
 80122c0:	08017b2c 	.word	0x08017b2c
 80122c4:	08017b5c 	.word	0x08017b5c
 80122c8:	08017b7c 	.word	0x08017b7c
 80122cc:	08017bd8 	.word	0x08017bd8
 80122d0:	08017c24 	.word	0x08017c24
 80122d4:	08018a14 	.word	0x08018a14
 80122d8:	08017c60 	.word	0x08017c60
 80122dc:	08017cb8 	.word	0x08017cb8
 80122e0:	08018a24 	.word	0x08018a24
 80122e4:	08017d00 	.word	0x08017d00
 80122e8:	08017d58 	.word	0x08017d58
 80122ec:	08017da0 	.word	0x08017da0
 80122f0:	08017de0 	.word	0x08017de0
 80122f4:	08017e10 	.word	0x08017e10
 80122f8:	08017e44 	.word	0x08017e44
 80122fc:	08017e68 	.word	0x08017e68
 8012300:	08017e70 	.word	0x08017e70
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8012304:	487e      	ldr	r0, [pc, #504]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8012306:	f7ff f9eb 	bl	80116e0 <DbgTraceGetFileName>
 801230a:	4601      	mov	r1, r0
 801230c:	f240 337d 	movw	r3, #893	; 0x37d
 8012310:	4a7c      	ldr	r2, [pc, #496]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8012312:	487d      	ldr	r0, [pc, #500]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8012314:	f002 fb16 	bl	8014944 <iprintf>
 8012318:	487c      	ldr	r0, [pc, #496]	; (801250c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 801231a:	f002 fbaf 	bl	8014a7c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 801231e:	88fc      	ldrh	r4, [r7, #6]
 8012320:	88bd      	ldrh	r5, [r7, #4]
 8012322:	68b8      	ldr	r0, [r7, #8]
 8012324:	f7ed ff2c 	bl	8000180 <strlen>
 8012328:	4603      	mov	r3, r0
 801232a:	b2da      	uxtb	r2, r3
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	9300      	str	r3, [sp, #0]
 8012330:	4613      	mov	r3, r2
 8012332:	2200      	movs	r2, #0
 8012334:	4629      	mov	r1, r5
 8012336:	4620      	mov	r0, r4
 8012338:	f7fe f806 	bl	8010348 <aci_gatt_update_char_value>
 801233c:	4603      	mov	r3, r0
 801233e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8012340:	88f8      	ldrh	r0, [r7, #6]
 8012342:	8879      	ldrh	r1, [r7, #2]
 8012344:	463b      	mov	r3, r7
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	2302      	movs	r3, #2
 801234a:	2200      	movs	r2, #0
 801234c:	f7fd fffc 	bl	8010348 <aci_gatt_update_char_value>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8012354:	2202      	movs	r2, #2
 8012356:	2102      	movs	r1, #2
 8012358:	2000      	movs	r0, #0
 801235a:	f7fe fa02 	bl	8010762 <hci_le_set_default_phy>
 801235e:	4603      	mov	r3, r0
 8012360:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012362:	7dfb      	ldrb	r3, [r7, #23]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00f      	beq.n	8012388 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8012368:	4865      	ldr	r0, [pc, #404]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801236a:	f7ff f9b9 	bl	80116e0 <DbgTraceGetFileName>
 801236e:	4601      	mov	r1, r0
 8012370:	f240 339f 	movw	r3, #927	; 0x39f
 8012374:	4a63      	ldr	r2, [pc, #396]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8012376:	4864      	ldr	r0, [pc, #400]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8012378:	f002 fae4 	bl	8014944 <iprintf>
 801237c:	7dfb      	ldrb	r3, [r7, #23]
 801237e:	4619      	mov	r1, r3
 8012380:	4863      	ldr	r0, [pc, #396]	; (8012510 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8012382:	f002 fadf 	bl	8014944 <iprintf>
 8012386:	e00c      	b.n	80123a2 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8012388:	485d      	ldr	r0, [pc, #372]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801238a:	f7ff f9a9 	bl	80116e0 <DbgTraceGetFileName>
 801238e:	4601      	mov	r1, r0
 8012390:	f240 33a3 	movw	r3, #931	; 0x3a3
 8012394:	4a5b      	ldr	r2, [pc, #364]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8012396:	485c      	ldr	r0, [pc, #368]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8012398:	f002 fad4 	bl	8014944 <iprintf>
 801239c:	485d      	ldr	r0, [pc, #372]	; (8012514 <Ble_Hci_Gap_Gatt_Init+0x500>)
 801239e:	f002 fb6d 	bl	8014a7c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80123a2:	4b5d      	ldr	r3, [pc, #372]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80123a4:	2201      	movs	r2, #1
 80123a6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80123a8:	4b5b      	ldr	r3, [pc, #364]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7fd fa9f 	bl	800f8f0 <aci_gap_set_io_capability>
 80123b2:	4603      	mov	r3, r0
 80123b4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80123b6:	7dfb      	ldrb	r3, [r7, #23]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00f      	beq.n	80123dc <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80123bc:	4850      	ldr	r0, [pc, #320]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80123be:	f7ff f98f 	bl	80116e0 <DbgTraceGetFileName>
 80123c2:	4601      	mov	r1, r0
 80123c4:	f240 33ad 	movw	r3, #941	; 0x3ad
 80123c8:	4a4e      	ldr	r2, [pc, #312]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80123ca:	484f      	ldr	r0, [pc, #316]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80123cc:	f002 faba 	bl	8014944 <iprintf>
 80123d0:	7dfb      	ldrb	r3, [r7, #23]
 80123d2:	4619      	mov	r1, r3
 80123d4:	4851      	ldr	r0, [pc, #324]	; (801251c <Ble_Hci_Gap_Gatt_Init+0x508>)
 80123d6:	f002 fab5 	bl	8014944 <iprintf>
 80123da:	e00c      	b.n	80123f6 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80123dc:	4848      	ldr	r0, [pc, #288]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80123de:	f7ff f97f 	bl	80116e0 <DbgTraceGetFileName>
 80123e2:	4601      	mov	r1, r0
 80123e4:	f240 33b1 	movw	r3, #945	; 0x3b1
 80123e8:	4a46      	ldr	r2, [pc, #280]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80123ea:	4847      	ldr	r0, [pc, #284]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80123ec:	f002 faaa 	bl	8014944 <iprintf>
 80123f0:	484b      	ldr	r0, [pc, #300]	; (8012520 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 80123f2:	f002 fb43 	bl	8014a7c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80123f6:	4b48      	ldr	r3, [pc, #288]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80123f8:	2201      	movs	r2, #1
 80123fa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80123fc:	4b46      	ldr	r3, [pc, #280]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80123fe:	2208      	movs	r2, #8
 8012400:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8012402:	4b45      	ldr	r3, [pc, #276]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012404:	2210      	movs	r2, #16
 8012406:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8012408:	4b43      	ldr	r3, [pc, #268]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801240a:	2200      	movs	r2, #0
 801240c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801240e:	4b42      	ldr	r3, [pc, #264]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012410:	4a44      	ldr	r2, [pc, #272]	; (8012524 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8012412:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8012414:	4b40      	ldr	r3, [pc, #256]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012416:	2200      	movs	r2, #0
 8012418:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801241a:	4b3f      	ldr	r3, [pc, #252]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801241c:	789c      	ldrb	r4, [r3, #2]
 801241e:	4b3e      	ldr	r3, [pc, #248]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012420:	785d      	ldrb	r5, [r3, #1]
 8012422:	4b3d      	ldr	r3, [pc, #244]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012424:	791b      	ldrb	r3, [r3, #4]
 8012426:	4a3c      	ldr	r2, [pc, #240]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012428:	7952      	ldrb	r2, [r2, #5]
 801242a:	493b      	ldr	r1, [pc, #236]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801242c:	78c9      	ldrb	r1, [r1, #3]
 801242e:	483a      	ldr	r0, [pc, #232]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012430:	6880      	ldr	r0, [r0, #8]
 8012432:	2600      	movs	r6, #0
 8012434:	9604      	str	r6, [sp, #16]
 8012436:	9003      	str	r0, [sp, #12]
 8012438:	9102      	str	r1, [sp, #8]
 801243a:	9201      	str	r2, [sp, #4]
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	2300      	movs	r3, #0
 8012440:	2201      	movs	r2, #1
 8012442:	4629      	mov	r1, r5
 8012444:	4620      	mov	r0, r4
 8012446:	f7fd faa7 	bl	800f998 <aci_gap_set_authentication_requirement>
 801244a:	4603      	mov	r3, r0
 801244c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 801244e:	7dfb      	ldrb	r3, [r7, #23]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00f      	beq.n	8012474 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8012454:	482a      	ldr	r0, [pc, #168]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8012456:	f7ff f943 	bl	80116e0 <DbgTraceGetFileName>
 801245a:	4601      	mov	r1, r0
 801245c:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8012460:	4a28      	ldr	r2, [pc, #160]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8012462:	4829      	ldr	r0, [pc, #164]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8012464:	f002 fa6e 	bl	8014944 <iprintf>
 8012468:	7dfb      	ldrb	r3, [r7, #23]
 801246a:	4619      	mov	r1, r3
 801246c:	482e      	ldr	r0, [pc, #184]	; (8012528 <Ble_Hci_Gap_Gatt_Init+0x514>)
 801246e:	f002 fa69 	bl	8014944 <iprintf>
 8012472:	e00c      	b.n	801248e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8012474:	4822      	ldr	r0, [pc, #136]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8012476:	f7ff f933 	bl	80116e0 <DbgTraceGetFileName>
 801247a:	4601      	mov	r1, r0
 801247c:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8012480:	4a20      	ldr	r2, [pc, #128]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8012482:	4821      	ldr	r0, [pc, #132]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8012484:	f002 fa5e 	bl	8014944 <iprintf>
 8012488:	4828      	ldr	r0, [pc, #160]	; (801252c <Ble_Hci_Gap_Gatt_Init+0x518>)
 801248a:	f002 faf7 	bl	8014a7c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801248e:	4b22      	ldr	r3, [pc, #136]	; (8012518 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8012490:	789b      	ldrb	r3, [r3, #2]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d023      	beq.n	80124de <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 8012496:	f7fd fcc9 	bl	800fe2c <aci_gap_configure_whitelist>
 801249a:	4603      	mov	r3, r0
 801249c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 801249e:	7dfb      	ldrb	r3, [r7, #23]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00f      	beq.n	80124c4 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80124a4:	4816      	ldr	r0, [pc, #88]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80124a6:	f7ff f91b 	bl	80116e0 <DbgTraceGetFileName>
 80124aa:	4601      	mov	r1, r0
 80124ac:	f240 33db 	movw	r3, #987	; 0x3db
 80124b0:	4a14      	ldr	r2, [pc, #80]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80124b2:	4815      	ldr	r0, [pc, #84]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80124b4:	f002 fa46 	bl	8014944 <iprintf>
 80124b8:	7dfb      	ldrb	r3, [r7, #23]
 80124ba:	4619      	mov	r1, r3
 80124bc:	481c      	ldr	r0, [pc, #112]	; (8012530 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80124be:	f002 fa41 	bl	8014944 <iprintf>
 80124c2:	e00c      	b.n	80124de <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80124c4:	480e      	ldr	r0, [pc, #56]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80124c6:	f7ff f90b 	bl	80116e0 <DbgTraceGetFileName>
 80124ca:	4601      	mov	r1, r0
 80124cc:	f240 33df 	movw	r3, #991	; 0x3df
 80124d0:	4a0c      	ldr	r2, [pc, #48]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80124d2:	480d      	ldr	r0, [pc, #52]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80124d4:	f002 fa36 	bl	8014944 <iprintf>
 80124d8:	4816      	ldr	r0, [pc, #88]	; (8012534 <Ble_Hci_Gap_Gatt_Init+0x520>)
 80124da:	f002 facf 	bl	8014a7c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80124de:	4808      	ldr	r0, [pc, #32]	; (8012500 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80124e0:	f7ff f8fe 	bl	80116e0 <DbgTraceGetFileName>
 80124e4:	4601      	mov	r1, r0
 80124e6:	f240 33e2 	movw	r3, #994	; 0x3e2
 80124ea:	4a06      	ldr	r2, [pc, #24]	; (8012504 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80124ec:	4806      	ldr	r0, [pc, #24]	; (8012508 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80124ee:	f002 fa29 	bl	8014944 <iprintf>
 80124f2:	4811      	ldr	r0, [pc, #68]	; (8012538 <Ble_Hci_Gap_Gatt_Init+0x524>)
 80124f4:	f002 fa26 	bl	8014944 <iprintf>
}
 80124f8:	bf00      	nop
 80124fa:	371c      	adds	r7, #28
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012500:	080175bc 	.word	0x080175bc
 8012504:	08018a5c 	.word	0x08018a5c
 8012508:	080175d8 	.word	0x080175d8
 801250c:	08017ea0 	.word	0x08017ea0
 8012510:	08017ec0 	.word	0x08017ec0
 8012514:	08017efc 	.word	0x08017efc
 8012518:	200011ec 	.word	0x200011ec
 801251c:	08017f28 	.word	0x08017f28
 8012520:	08017f68 	.word	0x08017f68
 8012524:	0001b207 	.word	0x0001b207
 8012528:	08017f98 	.word	0x08017f98
 801252c:	08017fe4 	.word	0x08017fe4
 8012530:	08018020 	.word	0x08018020
 8012534:	08018060 	.word	0x08018060
 8012538:	08018090 	.word	0x08018090

0801253c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b08c      	sub	sp, #48	; 0x30
 8012540:	af08      	add	r7, sp, #32
 8012542:	4603      	mov	r3, r0
 8012544:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012546:	2392      	movs	r3, #146	; 0x92
 8012548:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801254a:	4a32      	ldr	r2, [pc, #200]	; (8012614 <Adv_Request+0xd8>)
 801254c:	79fb      	ldrb	r3, [r7, #7]
 801254e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8012552:	2300      	movs	r3, #0
 8012554:	9306      	str	r3, [sp, #24]
 8012556:	2300      	movs	r3, #0
 8012558:	9305      	str	r3, [sp, #20]
 801255a:	2300      	movs	r3, #0
 801255c:	9304      	str	r3, [sp, #16]
 801255e:	2300      	movs	r3, #0
 8012560:	9303      	str	r3, [sp, #12]
 8012562:	2300      	movs	r3, #0
 8012564:	9302      	str	r3, [sp, #8]
 8012566:	2300      	movs	r3, #0
 8012568:	9301      	str	r3, [sp, #4]
 801256a:	2300      	movs	r3, #0
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	2300      	movs	r3, #0
 8012570:	22a0      	movs	r2, #160	; 0xa0
 8012572:	2180      	movs	r1, #128	; 0x80
 8012574:	2000      	movs	r0, #0
 8012576:	f7fd f8c1 	bl	800f6fc <aci_gap_set_discoverable>
 801257a:	4603      	mov	r3, r0
 801257c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00f      	beq.n	80125a4 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8012584:	4824      	ldr	r0, [pc, #144]	; (8012618 <Adv_Request+0xdc>)
 8012586:	f7ff f8ab 	bl	80116e0 <DbgTraceGetFileName>
 801258a:	4601      	mov	r1, r0
 801258c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8012590:	4a22      	ldr	r2, [pc, #136]	; (801261c <Adv_Request+0xe0>)
 8012592:	4823      	ldr	r0, [pc, #140]	; (8012620 <Adv_Request+0xe4>)
 8012594:	f002 f9d6 	bl	8014944 <iprintf>
 8012598:	7bfb      	ldrb	r3, [r7, #15]
 801259a:	4619      	mov	r1, r3
 801259c:	4821      	ldr	r0, [pc, #132]	; (8012624 <Adv_Request+0xe8>)
 801259e:	f002 f9d1 	bl	8014944 <iprintf>
 80125a2:	e00c      	b.n	80125be <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80125a4:	481c      	ldr	r0, [pc, #112]	; (8012618 <Adv_Request+0xdc>)
 80125a6:	f7ff f89b 	bl	80116e0 <DbgTraceGetFileName>
 80125aa:	4601      	mov	r1, r0
 80125ac:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80125b0:	4a1a      	ldr	r2, [pc, #104]	; (801261c <Adv_Request+0xe0>)
 80125b2:	481b      	ldr	r0, [pc, #108]	; (8012620 <Adv_Request+0xe4>)
 80125b4:	f002 f9c6 	bl	8014944 <iprintf>
 80125b8:	481b      	ldr	r0, [pc, #108]	; (8012628 <Adv_Request+0xec>)
 80125ba:	f002 fa5f 	bl	8014a7c <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80125be:	491b      	ldr	r1, [pc, #108]	; (801262c <Adv_Request+0xf0>)
 80125c0:	2018      	movs	r0, #24
 80125c2:	f7fd fbc1 	bl	800fd48 <aci_gap_update_adv_data>
 80125c6:	4603      	mov	r3, r0
 80125c8:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80125ca:	7bfb      	ldrb	r3, [r7, #15]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00f      	beq.n	80125f0 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80125d0:	4811      	ldr	r0, [pc, #68]	; (8012618 <Adv_Request+0xdc>)
 80125d2:	f7ff f885 	bl	80116e0 <DbgTraceGetFileName>
 80125d6:	4601      	mov	r1, r0
 80125d8:	f240 4303 	movw	r3, #1027	; 0x403
 80125dc:	4a0f      	ldr	r2, [pc, #60]	; (801261c <Adv_Request+0xe0>)
 80125de:	4810      	ldr	r0, [pc, #64]	; (8012620 <Adv_Request+0xe4>)
 80125e0:	f002 f9b0 	bl	8014944 <iprintf>
 80125e4:	7bfb      	ldrb	r3, [r7, #15]
 80125e6:	4619      	mov	r1, r3
 80125e8:	4811      	ldr	r0, [pc, #68]	; (8012630 <Adv_Request+0xf4>)
 80125ea:	f002 f9ab 	bl	8014944 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80125ee:	e00d      	b.n	801260c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80125f0:	4809      	ldr	r0, [pc, #36]	; (8012618 <Adv_Request+0xdc>)
 80125f2:	f7ff f875 	bl	80116e0 <DbgTraceGetFileName>
 80125f6:	4601      	mov	r1, r0
 80125f8:	f240 4307 	movw	r3, #1031	; 0x407
 80125fc:	4a07      	ldr	r2, [pc, #28]	; (801261c <Adv_Request+0xe0>)
 80125fe:	4808      	ldr	r0, [pc, #32]	; (8012620 <Adv_Request+0xe4>)
 8012600:	f002 f9a0 	bl	8014944 <iprintf>
 8012604:	480b      	ldr	r0, [pc, #44]	; (8012634 <Adv_Request+0xf8>)
 8012606:	f002 f99d 	bl	8014944 <iprintf>
  return;
 801260a:	bf00      	nop
}
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	200011ec 	.word	0x200011ec
 8012618:	080175bc 	.word	0x080175bc
 801261c:	08018a74 	.word	0x08018a74
 8012620:	080175d8 	.word	0x080175d8
 8012624:	080180bc 	.word	0x080180bc
 8012628:	080180f4 	.word	0x080180f4
 801262c:	20000190 	.word	0x20000190
 8012630:	0801811c 	.word	0x0801811c
 8012634:	08018150 	.word	0x08018150

08012638 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b086      	sub	sp, #24
 801263c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801263e:	f7ff f95d 	bl	80118fc <LL_FLASH_GetUDN>
 8012642:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264a:	d023      	beq.n	8012694 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 801264c:	f7ff f96e 	bl	801192c <LL_FLASH_GetSTCompanyID>
 8012650:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8012652:	f7ff f95f 	bl	8011914 <LL_FLASH_GetDeviceID>
 8012656:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	b2da      	uxtb	r2, r3
 801265c:	4b16      	ldr	r3, [pc, #88]	; (80126b8 <BleGetBdAddress+0x80>)
 801265e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	0a1b      	lsrs	r3, r3, #8
 8012664:	b2da      	uxtb	r2, r3
 8012666:	4b14      	ldr	r3, [pc, #80]	; (80126b8 <BleGetBdAddress+0x80>)
 8012668:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	b2da      	uxtb	r2, r3
 801266e:	4b12      	ldr	r3, [pc, #72]	; (80126b8 <BleGetBdAddress+0x80>)
 8012670:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	b2da      	uxtb	r2, r3
 8012676:	4b10      	ldr	r3, [pc, #64]	; (80126b8 <BleGetBdAddress+0x80>)
 8012678:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	0a1b      	lsrs	r3, r3, #8
 801267e:	b2da      	uxtb	r2, r3
 8012680:	4b0d      	ldr	r3, [pc, #52]	; (80126b8 <BleGetBdAddress+0x80>)
 8012682:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	0c1b      	lsrs	r3, r3, #16
 8012688:	b2da      	uxtb	r2, r3
 801268a:	4b0b      	ldr	r3, [pc, #44]	; (80126b8 <BleGetBdAddress+0x80>)
 801268c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801268e:	4b0a      	ldr	r3, [pc, #40]	; (80126b8 <BleGetBdAddress+0x80>)
 8012690:	617b      	str	r3, [r7, #20]
 8012692:	e00b      	b.n	80126ac <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8012694:	2000      	movs	r0, #0
 8012696:	f7ff f84b 	bl	8011730 <OTP_Read>
 801269a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d002      	beq.n	80126a8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	617b      	str	r3, [r7, #20]
 80126a6:	e001      	b.n	80126ac <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80126a8:	4b04      	ldr	r3, [pc, #16]	; (80126bc <BleGetBdAddress+0x84>)
 80126aa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80126ac:	697b      	ldr	r3, [r7, #20]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3718      	adds	r7, #24
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	200011e4 	.word	0x200011e4
 80126bc:	08018a0c 	.word	0x08018a0c

080126c0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80126c6:	4b1f      	ldr	r3, [pc, #124]	; (8012744 <Adv_Cancel+0x84>)
 80126c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80126cc:	2b05      	cmp	r3, #5
 80126ce:	d035      	beq.n	801273c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80126d0:	2392      	movs	r3, #146	; 0x92
 80126d2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80126d4:	f7fc ffee 	bl	800f6b4 <aci_gap_set_non_discoverable>
 80126d8:	4603      	mov	r3, r0
 80126da:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80126dc:	4b19      	ldr	r3, [pc, #100]	; (8012744 <Adv_Cancel+0x84>)
 80126de:	2200      	movs	r2, #0
 80126e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80126e4:	79fb      	ldrb	r3, [r7, #7]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00d      	beq.n	8012706 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80126ea:	4817      	ldr	r0, [pc, #92]	; (8012748 <Adv_Cancel+0x88>)
 80126ec:	f7fe fff8 	bl	80116e0 <DbgTraceGetFileName>
 80126f0:	4601      	mov	r1, r0
 80126f2:	f240 4355 	movw	r3, #1109	; 0x455
 80126f6:	4a15      	ldr	r2, [pc, #84]	; (801274c <Adv_Cancel+0x8c>)
 80126f8:	4815      	ldr	r0, [pc, #84]	; (8012750 <Adv_Cancel+0x90>)
 80126fa:	f002 f923 	bl	8014944 <iprintf>
 80126fe:	4815      	ldr	r0, [pc, #84]	; (8012754 <Adv_Cancel+0x94>)
 8012700:	f002 f920 	bl	8014944 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8012704:	e01a      	b.n	801273c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8012706:	4810      	ldr	r0, [pc, #64]	; (8012748 <Adv_Cancel+0x88>)
 8012708:	f7fe ffea 	bl	80116e0 <DbgTraceGetFileName>
 801270c:	4601      	mov	r1, r0
 801270e:	f240 4359 	movw	r3, #1113	; 0x459
 8012712:	4a0e      	ldr	r2, [pc, #56]	; (801274c <Adv_Cancel+0x8c>)
 8012714:	480e      	ldr	r0, [pc, #56]	; (8012750 <Adv_Cancel+0x90>)
 8012716:	f002 f915 	bl	8014944 <iprintf>
 801271a:	480f      	ldr	r0, [pc, #60]	; (8012758 <Adv_Cancel+0x98>)
 801271c:	f002 f912 	bl	8014944 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8012720:	4809      	ldr	r0, [pc, #36]	; (8012748 <Adv_Cancel+0x88>)
 8012722:	f7fe ffdd 	bl	80116e0 <DbgTraceGetFileName>
 8012726:	4601      	mov	r1, r0
 8012728:	f240 435a 	movw	r3, #1114	; 0x45a
 801272c:	4a07      	ldr	r2, [pc, #28]	; (801274c <Adv_Cancel+0x8c>)
 801272e:	4808      	ldr	r0, [pc, #32]	; (8012750 <Adv_Cancel+0x90>)
 8012730:	f002 f908 	bl	8014944 <iprintf>
 8012734:	4809      	ldr	r0, [pc, #36]	; (801275c <Adv_Cancel+0x9c>)
 8012736:	f002 f905 	bl	8014944 <iprintf>
  return;
 801273a:	bf00      	nop
 801273c:	bf00      	nop
}
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	200011ec 	.word	0x200011ec
 8012748:	080175bc 	.word	0x080175bc
 801274c:	08018a80 	.word	0x08018a80
 8012750:	080175d8 	.word	0x080175d8
 8012754:	08018178 	.word	0x08018178
 8012758:	0801819c 	.word	0x0801819c
 801275c:	080181a4 	.word	0x080181a4

08012760 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8012768:	2100      	movs	r1, #0
 801276a:	2002      	movs	r0, #2
 801276c:	f001 fb20 	bl	8013db0 <UTIL_SEQ_SetTask>

  return;
 8012770:	bf00      	nop
}
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012780:	2001      	movs	r0, #1
 8012782:	f001 fb81 	bl	8013e88 <UTIL_SEQ_SetEvt>

  return;
 8012786:	bf00      	nop
}
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8012796:	2001      	movs	r0, #1
 8012798:	f001 fb96 	bl	8013ec8 <UTIL_SEQ_WaitEvt>

  return;
 801279c:	bf00      	nop
}
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	3308      	adds	r3, #8
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fe f93a 	bl	8010a30 <SVCCTL_UserEvtRx>
 80127bc:	4603      	mov	r3, r0
 80127be:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80127c0:	7afb      	ldrb	r3, [r7, #11]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d003      	beq.n	80127ce <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2201      	movs	r2, #1
 80127ca:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80127cc:	e003      	b.n	80127d6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2200      	movs	r2, #0
 80127d2:	701a      	strb	r2, [r3, #0]
  return;
 80127d4:	bf00      	nop
}
 80127d6:	3710      	adds	r7, #16
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	4603      	mov	r3, r0
 80127e4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80127e6:	79fb      	ldrb	r3, [r7, #7]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d002      	beq.n	80127f2 <BLE_StatusNot+0x16>
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d006      	beq.n	80127fe <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80127f0:	e00b      	b.n	801280a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80127f2:	237f      	movs	r3, #127	; 0x7f
 80127f4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f001 fb06 	bl	8013e08 <UTIL_SEQ_PauseTask>
      break;
 80127fc:	e005      	b.n	801280a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80127fe:	237f      	movs	r3, #127	; 0x7f
 8012800:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f001 fb20 	bl	8013e48 <UTIL_SEQ_ResumeTask>
      break;
 8012808:	bf00      	nop
  }

  return;
 801280a:	bf00      	nop
}
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
	...

08012814 <Custom_STM_App_Notification>:
static void Custom_Ledc_Update_Char();
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6859      	ldr	r1, [r3, #4]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	7a1b      	ldrb	r3, [r3, #8]
 8012824:	461a      	mov	r2, r3
 8012826:	4824      	ldr	r0, [pc, #144]	; (80128b8 <Custom_STM_App_Notification+0xa4>)
 8012828:	f001 fc0c 	bl	8014044 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b07      	cmp	r3, #7
 8012832:	d83b      	bhi.n	80128ac <Custom_STM_App_Notification+0x98>
 8012834:	a201      	add	r2, pc, #4	; (adr r2, 801283c <Custom_STM_App_Notification+0x28>)
 8012836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801283a:	bf00      	nop
 801283c:	0801285d 	.word	0x0801285d
 8012840:	08012869 	.word	0x08012869
 8012844:	08012871 	.word	0x08012871
 8012848:	0801287d 	.word	0x0801287d
 801284c:	08012885 	.word	0x08012885
 8012850:	08012891 	.word	0x08012891
 8012854:	08012899 	.word	0x08012899
 8012858:	080128a5 	.word	0x080128a5
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* First_service */
    case CUSTOM_STM_VIT_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_VIT_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Vit_Notification_Status = 1;
 801285c:	4b17      	ldr	r3, [pc, #92]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 801285e:	2201      	movs	r2, #1
 8012860:	701a      	strb	r2, [r3, #0]
    	Custom_Vit_Send_Notification();
 8012862:	f000 f8b9 	bl	80129d8 <Custom_Vit_Send_Notification>
      /* USER CODE END CUSTOM_STM_VIT_NOTIFY_ENABLED_EVT */
      break;
 8012866:	e022      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_VIT_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_VIT_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Vit_Notification_Status = 0;
 8012868:	4b14      	ldr	r3, [pc, #80]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 801286a:	2200      	movs	r2, #0
 801286c:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_VIT_NOTIFY_DISABLED_EVT */
      break;
 801286e:	e01e      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Temp_Notification_Status = 1;
 8012870:	4b12      	ldr	r3, [pc, #72]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 8012872:	2201      	movs	r2, #1
 8012874:	705a      	strb	r2, [r3, #1]
    	Custom_Temp_Send_Notification();
 8012876:	f000 f955 	bl	8012b24 <Custom_Temp_Send_Notification>
      /* USER CODE END CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT */
      break;
 801287a:	e018      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Temp_Notification_Status = 0;
 801287c:	4b0f      	ldr	r3, [pc, #60]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 801287e:	2200      	movs	r2, #0
 8012880:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT */
      break;
 8012882:	e014      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_LAT_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LAT_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Lat_Notification_Status = 1;
 8012884:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 8012886:	2201      	movs	r2, #1
 8012888:	709a      	strb	r2, [r3, #2]
    	Custom_Lat_Send_Notification();
 801288a:	f000 f9bd 	bl	8012c08 <Custom_Lat_Send_Notification>
      /* USER CODE END CUSTOM_STM_LAT_NOTIFY_ENABLED_EVT */
      break;
 801288e:	e00e      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_LAT_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LAT_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Lat_Notification_Status = 0;
 8012890:	4b0a      	ldr	r3, [pc, #40]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 8012892:	2200      	movs	r2, #0
 8012894:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_LAT_NOTIFY_DISABLED_EVT */
      break;
 8012896:	e00a      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_LONG_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LONG_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Long_Notification_Status = 1;
 8012898:	4b08      	ldr	r3, [pc, #32]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 801289a:	2201      	movs	r2, #1
 801289c:	70da      	strb	r2, [r3, #3]
    	Custom_Long_Send_Notification();
 801289e:	f000 fa25 	bl	8012cec <Custom_Long_Send_Notification>
      /* USER CODE END CUSTOM_STM_LONG_NOTIFY_ENABLED_EVT */
      break;
 80128a2:	e004      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    case CUSTOM_STM_LONG_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LONG_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Long_Notification_Status = 0;
 80128a4:	4b05      	ldr	r3, [pc, #20]	; (80128bc <Custom_STM_App_Notification+0xa8>)
 80128a6:	2200      	movs	r2, #0
 80128a8:	70da      	strb	r2, [r3, #3]
      /* USER CODE END CUSTOM_STM_LONG_NOTIFY_DISABLED_EVT */
      break;
 80128aa:	e000      	b.n	80128ae <Custom_STM_App_Notification+0x9a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80128ac:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80128ae:	bf00      	nop
}
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20001280 	.word	0x20001280
 80128bc:	20001274 	.word	0x20001274

080128c0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b083      	sub	sp, #12
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <Custom_APP_Notification+0x16>
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d002      	beq.n	80128da <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80128d4:	e002      	b.n	80128dc <Custom_APP_Notification+0x1c>
      break;
 80128d6:	bf00      	nop
 80128d8:	e000      	b.n	80128dc <Custom_APP_Notification+0x1c>
      break;
 80128da:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80128dc:	bf00      	nop
}
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	// +BCH
	HAL_TIM_Base_Start_IT(&htim2);
 80128ec:	4814      	ldr	r0, [pc, #80]	; (8012940 <Custom_APP_Init+0x58>)
 80128ee:	f7fb fdb1 	bl	800e454 <HAL_TIM_Base_Start_IT>
	IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0,MOTION_ACCELERO);
 80128f2:	2102      	movs	r1, #2
 80128f4:	2000      	movs	r0, #0
 80128f6:	f7f7 fd15 	bl	800a324 <IKS01A3_MOTION_SENSOR_Init>
	IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 80128fa:	2101      	movs	r1, #1
 80128fc:	2000      	movs	r0, #0
 80128fe:	f7f7 f9b7 	bl	8009c70 <IKS01A3_ENV_SENSOR_Init>
	UTIL_SEQ_RegTask(1<<CFG_TASK_LAT_ID, UTIL_SEQ_RFU, Custom_Lat_Send_Notification);
 8012902:	4a10      	ldr	r2, [pc, #64]	; (8012944 <Custom_APP_Init+0x5c>)
 8012904:	2100      	movs	r1, #0
 8012906:	2020      	movs	r0, #32
 8012908:	f001 fa30 	bl	8013d6c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_LONG_ID, UTIL_SEQ_RFU, Custom_Long_Send_Notification);
 801290c:	4a0e      	ldr	r2, [pc, #56]	; (8012948 <Custom_APP_Init+0x60>)
 801290e:	2100      	movs	r1, #0
 8012910:	2040      	movs	r0, #64	; 0x40
 8012912:	f001 fa2b 	bl	8013d6c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_VIT_ID, UTIL_SEQ_RFU, Custom_Vit_Send_Notification);
 8012916:	4a0d      	ldr	r2, [pc, #52]	; (801294c <Custom_APP_Init+0x64>)
 8012918:	2100      	movs	r1, #0
 801291a:	2004      	movs	r0, #4
 801291c:	f001 fa26 	bl	8013d6c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_TEMP_ID, UTIL_SEQ_RFU, Custom_Temp_Send_Notification);
 8012920:	4a0b      	ldr	r2, [pc, #44]	; (8012950 <Custom_APP_Init+0x68>)
 8012922:	2100      	movs	r1, #0
 8012924:	2008      	movs	r0, #8
 8012926:	f001 fa21 	bl	8013d6c <UTIL_SEQ_RegTask>
	Custom_Lat_Update_Char();
 801292a:	f000 f959 	bl	8012be0 <Custom_Lat_Update_Char>
	Custom_Long_Update_Char();
 801292e:	f000 f9c9 	bl	8012cc4 <Custom_Long_Update_Char>
	Custom_Vit_Update_Char();
 8012932:	f000 f83d 	bl	80129b0 <Custom_Vit_Update_Char>
	Custom_Temp_Update_Char();
 8012936:	f000 f8e1 	bl	8012afc <Custom_Temp_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 801293a:	bf00      	nop
}
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	20000e00 	.word	0x20000e00
 8012944:	08012c09 	.word	0x08012c09
 8012948:	08012ced 	.word	0x08012ced
 801294c:	080129d9 	.word	0x080129d9
 8012950:	08012b25 	.word	0x08012b25

08012954 <FSVC_APP_B3_Button_Action>:

/* USER CODE BEGIN FD */
// +BCH
void FSVC_APP_B3_Button_Action(void)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_B3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8012958:	2100      	movs	r1, #0
 801295a:	2010      	movs	r0, #16
 801295c:	f001 fa28 	bl	8013db0 <UTIL_SEQ_SetTask>
  Custom_App_Context.swc_status = 3;
 8012960:	4b02      	ldr	r3, [pc, #8]	; (801296c <FSVC_APP_B3_Button_Action+0x18>)
 8012962:	2203      	movs	r2, #3
 8012964:	711a      	strb	r2, [r3, #4]

  return;
 8012966:	bf00      	nop
}
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	20001274 	.word	0x20001274

08012970 <GPS_LAT_Action>:

void GPS_LAT_Action(void)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_LAT_ID, CFG_SCH_PRIO_0);
 8012974:	2100      	movs	r1, #0
 8012976:	2020      	movs	r0, #32
 8012978:	f001 fa1a 	bl	8013db0 <UTIL_SEQ_SetTask>
}
 801297c:	bf00      	nop
 801297e:	bd80      	pop	{r7, pc}

08012980 <GPS_LONG_Action>:

void GPS_LONG_Action(void)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_LONG_ID, CFG_SCH_PRIO_0);
 8012984:	2100      	movs	r1, #0
 8012986:	2040      	movs	r0, #64	; 0x40
 8012988:	f001 fa12 	bl	8013db0 <UTIL_SEQ_SetTask>
}
 801298c:	bf00      	nop
 801298e:	bd80      	pop	{r7, pc}

08012990 <Accelerometre_Action>:

void Accelerometre_Action(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_VIT_ID, CFG_SCH_PRIO_0);
 8012994:	2100      	movs	r1, #0
 8012996:	2004      	movs	r0, #4
 8012998:	f001 fa0a 	bl	8013db0 <UTIL_SEQ_SetTask>
}
 801299c:	bf00      	nop
 801299e:	bd80      	pop	{r7, pc}

080129a0 <Temperature_Action>:

void Temperature_Action(void)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_TEMP_ID, CFG_SCH_PRIO_0);
 80129a4:	2100      	movs	r1, #0
 80129a6:	2008      	movs	r0, #8
 80129a8:	f001 fa02 	bl	8013db0 <UTIL_SEQ_SetTask>
}
 80129ac:	bf00      	nop
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <Custom_Vit_Update_Char>:
 *
 *************************************************************/

/* First_service */
void Custom_Vit_Update_Char(void) /* Property Read */
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80129b6:	2300      	movs	r3, #0
 80129b8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Vit_UC_1*/

  /* USER CODE END Vit_UC_1*/

  if (updateflag != 0)
 80129ba:	79fb      	ldrb	r3, [r7, #7]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d004      	beq.n	80129ca <Custom_Vit_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_VIT, (uint8_t *)UpdateCharData);
 80129c0:	4904      	ldr	r1, [pc, #16]	; (80129d4 <Custom_Vit_Update_Char+0x24>)
 80129c2:	2000      	movs	r0, #0
 80129c4:	f000 fcb4 	bl	8013330 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Vit_UC_Last*/

  /* USER CODE END Vit_UC_Last*/
  return;
 80129c8:	bf00      	nop
 80129ca:	bf00      	nop
}
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	20001280 	.word	0x20001280

080129d8 <Custom_Vit_Send_Notification>:

void Custom_Vit_Send_Notification(void) /* Property Notification */
{
 80129d8:	b5b0      	push	{r4, r5, r7, lr}
 80129da:	b08a      	sub	sp, #40	; 0x28
 80129dc:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80129de:	2300      	movs	r3, #0
 80129e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN Vit_NS_1*/
	  	// +BCH

  	  	date_axes data= {.axes.x = 0, .axes.y = 0, .axes.z = 0};
 80129e4:	f107 0314 	add.w	r3, r7, #20
 80129e8:	2200      	movs	r2, #0
 80129ea:	601a      	str	r2, [r3, #0]
 80129ec:	605a      	str	r2, [r3, #4]
 80129ee:	609a      	str	r2, [r3, #8]
 80129f0:	60da      	str	r2, [r3, #12]
	  	if (Custom_App_Context.Vit_Notification_Status == 1)
 80129f2:	4b39      	ldr	r3, [pc, #228]	; (8012ad8 <Custom_Vit_Send_Notification+0x100>)
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d153      	bne.n	8012aa2 <Custom_Vit_Send_Notification+0xca>
		{
		  updateflag = 1;
 80129fa:	2301      	movs	r3, #1
 80129fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		  // Read the acceleration values from the IKS01A3 accelerometer:
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &data.axes);
 8012a00:	f107 0314 	add.w	r3, r7, #20
 8012a04:	3304      	adds	r3, #4
 8012a06:	461a      	mov	r2, r3
 8012a08:	2102      	movs	r1, #2
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	f7f7 fd86 	bl	800a51c <IKS01A3_MOTION_SENSOR_GetAxes>

		  data.vitesse = fabs(sqrt((data.axes.x * data.axes.x) + (data.axes.y * data.axes.y) + (data.axes.z * data.axes.z)) - 998);
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	69ba      	ldr	r2, [r7, #24]
 8012a14:	fb03 f202 	mul.w	r2, r3, r2
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	69f9      	ldr	r1, [r7, #28]
 8012a1c:	fb01 f303 	mul.w	r3, r1, r3
 8012a20:	441a      	add	r2, r3
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	6a39      	ldr	r1, [r7, #32]
 8012a26:	fb01 f303 	mul.w	r3, r1, r3
 8012a2a:	4413      	add	r3, r2
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7ed fd51 	bl	80004d4 <__aeabi_i2d>
 8012a32:	4602      	mov	r2, r0
 8012a34:	460b      	mov	r3, r1
 8012a36:	ec43 2b10 	vmov	d0, r2, r3
 8012a3a:	f004 fafb 	bl	8017034 <sqrt>
 8012a3e:	ec51 0b10 	vmov	r0, r1, d0
 8012a42:	f04f 0200 	mov.w	r2, #0
 8012a46:	4b25      	ldr	r3, [pc, #148]	; (8012adc <Custom_Vit_Send_Notification+0x104>)
 8012a48:	f7ed fbf6 	bl	8000238 <__aeabi_dsub>
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	460b      	mov	r3, r1
 8012a50:	4610      	mov	r0, r2
 8012a52:	4619      	mov	r1, r3
 8012a54:	f7ee f880 	bl	8000b58 <__aeabi_d2f>
 8012a58:	ee07 0a90 	vmov	s15, r0
 8012a5c:	eef0 7ae7 	vabs.f32	s15, s15
 8012a60:	edc7 7a05 	vstr	s15, [r7, #20]

		  // Convertir la valeur de vitesse en une chaîne de caractères
		  char vitesse_str[20]; // Déclarer une chaîne de caractères pour stocker la valeur de vitesse convertie
		  sprintf(vitesse_str, "%.2f", data.vitesse); // Convertir la valeur de vitesse en une chaîne de caractères avec deux décimales après la virgule
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7ed fd46 	bl	80004f8 <__aeabi_f2d>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4638      	mov	r0, r7
 8012a72:	491b      	ldr	r1, [pc, #108]	; (8012ae0 <Custom_Vit_Send_Notification+0x108>)
 8012a74:	f002 f80a 	bl	8014a8c <siprintf>

		  // Copier la chaîne de caractères convertie dans NotifyCharData
		  memcpy(&NotifyCharData[0], vitesse_str, sizeof(vitesse_str));
 8012a78:	4b1a      	ldr	r3, [pc, #104]	; (8012ae4 <Custom_Vit_Send_Notification+0x10c>)
 8012a7a:	461d      	mov	r5, r3
 8012a7c:	463c      	mov	r4, r7
 8012a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a82:	6823      	ldr	r3, [r4, #0]
 8012a84:	602b      	str	r3, [r5, #0]

		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT SPEED SENT \n");
 8012a86:	4818      	ldr	r0, [pc, #96]	; (8012ae8 <Custom_Vit_Send_Notification+0x110>)
 8012a88:	f7fe fe2a 	bl	80116e0 <DbgTraceGetFileName>
 8012a8c:	4601      	mov	r1, r0
 8012a8e:	f240 136d 	movw	r3, #365	; 0x16d
 8012a92:	4a16      	ldr	r2, [pc, #88]	; (8012aec <Custom_Vit_Send_Notification+0x114>)
 8012a94:	4816      	ldr	r0, [pc, #88]	; (8012af0 <Custom_Vit_Send_Notification+0x118>)
 8012a96:	f001 ff55 	bl	8014944 <iprintf>
 8012a9a:	4816      	ldr	r0, [pc, #88]	; (8012af4 <Custom_Vit_Send_Notification+0x11c>)
 8012a9c:	f001 ffee 	bl	8014a7c <puts>
 8012aa0:	e00c      	b.n	8012abc <Custom_Vit_Send_Notification+0xe4>
		}
		else
		{
		  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8012aa2:	4811      	ldr	r0, [pc, #68]	; (8012ae8 <Custom_Vit_Send_Notification+0x110>)
 8012aa4:	f7fe fe1c 	bl	80116e0 <DbgTraceGetFileName>
 8012aa8:	4601      	mov	r1, r0
 8012aaa:	f240 1371 	movw	r3, #369	; 0x171
 8012aae:	4a0f      	ldr	r2, [pc, #60]	; (8012aec <Custom_Vit_Send_Notification+0x114>)
 8012ab0:	480f      	ldr	r0, [pc, #60]	; (8012af0 <Custom_Vit_Send_Notification+0x118>)
 8012ab2:	f001 ff47 	bl	8014944 <iprintf>
 8012ab6:	4810      	ldr	r0, [pc, #64]	; (8012af8 <Custom_Vit_Send_Notification+0x120>)
 8012ab8:	f001 ffe0 	bl	8014a7c <puts>
		}
  /* USER CODE END Vit_NS_1*/

  if (updateflag != 0)
 8012abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d004      	beq.n	8012ace <Custom_Vit_Send_Notification+0xf6>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_VIT, (uint8_t *)NotifyCharData);
 8012ac4:	4907      	ldr	r1, [pc, #28]	; (8012ae4 <Custom_Vit_Send_Notification+0x10c>)
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	f000 fc32 	bl	8013330 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Vit_NS_Last*/

  /* USER CODE END Vit_NS_Last*/

  return;
 8012acc:	bf00      	nop
 8012ace:	bf00      	nop
}
 8012ad0:	3728      	adds	r7, #40	; 0x28
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	20001274 	.word	0x20001274
 8012adc:	408f3000 	.word	0x408f3000
 8012ae0:	080181c0 	.word	0x080181c0
 8012ae4:	20001378 	.word	0x20001378
 8012ae8:	080181c8 	.word	0x080181c8
 8012aec:	08018a8c 	.word	0x08018a8c
 8012af0:	080181e8 	.word	0x080181e8
 8012af4:	080181fc 	.word	0x080181fc
 8012af8:	08018238 	.word	0x08018238

08012afc <Custom_Temp_Update_Char>:

void Custom_Temp_Update_Char(void) /* Property Read */
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Temp_UC_1*/

  /* USER CODE END Temp_UC_1*/

  if (updateflag != 0)
 8012b06:	79fb      	ldrb	r3, [r7, #7]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d004      	beq.n	8012b16 <Custom_Temp_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, (uint8_t *)UpdateCharData);
 8012b0c:	4904      	ldr	r1, [pc, #16]	; (8012b20 <Custom_Temp_Update_Char+0x24>)
 8012b0e:	2001      	movs	r0, #1
 8012b10:	f000 fc0e 	bl	8013330 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Temp_UC_Last*/

  /* USER CODE END Temp_UC_Last*/
  return;
 8012b14:	bf00      	nop
 8012b16:	bf00      	nop
}
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	20001280 	.word	0x20001280

08012b24 <Custom_Temp_Send_Notification>:

void Custom_Temp_Send_Notification(void) /* Property Notification */
{
 8012b24:	b5b0      	push	{r4, r5, r7, lr}
 8012b26:	b088      	sub	sp, #32
 8012b28:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	77fb      	strb	r3, [r7, #31]

  /* USER CODE BEGIN Temp_NS_1*/
		  	// +BCH
	  	  	date_env data = {.temp = 0.0f};
 8012b2e:	f04f 0300 	mov.w	r3, #0
 8012b32:	61bb      	str	r3, [r7, #24]
		  	if (Custom_App_Context.Temp_Notification_Status == 1)
 8012b34:	4b22      	ldr	r3, [pc, #136]	; (8012bc0 <Custom_Temp_Send_Notification+0x9c>)
 8012b36:	785b      	ldrb	r3, [r3, #1]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d127      	bne.n	8012b8c <Custom_Temp_Send_Notification+0x68>
			{
			  updateflag = 1;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	77fb      	strb	r3, [r7, #31]

			  // Read the temperature value from the HTS221 sensor,
			  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &data.temp);
 8012b40:	f107 0318 	add.w	r3, r7, #24
 8012b44:	461a      	mov	r2, r3
 8012b46:	2101      	movs	r1, #1
 8012b48:	2000      	movs	r0, #0
 8012b4a:	f7f7 f98d 	bl	8009e68 <IKS01A3_ENV_SENSOR_GetValue>

			  // Convertir la valeur de vitesse en une chaîne de caractères
			  char temperature_str[20]; // Déclarer une chaîne de caractères pour stocker la valeur de vitesse convertie
			  sprintf(temperature_str, "%.2f", data.temp);
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ed fcd1 	bl	80004f8 <__aeabi_f2d>
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	1d38      	adds	r0, r7, #4
 8012b5c:	4919      	ldr	r1, [pc, #100]	; (8012bc4 <Custom_Temp_Send_Notification+0xa0>)
 8012b5e:	f001 ff95 	bl	8014a8c <siprintf>

			  // Copy a converted character string into NotifyCharData
			  memcpy(&NotifyCharData[0], temperature_str, sizeof(temperature_str));
 8012b62:	4b19      	ldr	r3, [pc, #100]	; (8012bc8 <Custom_Temp_Send_Notification+0xa4>)
 8012b64:	461d      	mov	r5, r3
 8012b66:	1d3c      	adds	r4, r7, #4
 8012b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b6c:	6823      	ldr	r3, [r4, #0]
 8012b6e:	602b      	str	r3, [r5, #0]

			  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT TEMP SENT \n");
 8012b70:	4816      	ldr	r0, [pc, #88]	; (8012bcc <Custom_Temp_Send_Notification+0xa8>)
 8012b72:	f7fe fdb5 	bl	80116e0 <DbgTraceGetFileName>
 8012b76:	4601      	mov	r1, r0
 8012b78:	f240 13a9 	movw	r3, #425	; 0x1a9
 8012b7c:	4a14      	ldr	r2, [pc, #80]	; (8012bd0 <Custom_Temp_Send_Notification+0xac>)
 8012b7e:	4815      	ldr	r0, [pc, #84]	; (8012bd4 <Custom_Temp_Send_Notification+0xb0>)
 8012b80:	f001 fee0 	bl	8014944 <iprintf>
 8012b84:	4814      	ldr	r0, [pc, #80]	; (8012bd8 <Custom_Temp_Send_Notification+0xb4>)
 8012b86:	f001 ff79 	bl	8014a7c <puts>
 8012b8a:	e00c      	b.n	8012ba6 <Custom_Temp_Send_Notification+0x82>
			}
			else
			{
			  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8012b8c:	480f      	ldr	r0, [pc, #60]	; (8012bcc <Custom_Temp_Send_Notification+0xa8>)
 8012b8e:	f7fe fda7 	bl	80116e0 <DbgTraceGetFileName>
 8012b92:	4601      	mov	r1, r0
 8012b94:	f240 13ad 	movw	r3, #429	; 0x1ad
 8012b98:	4a0d      	ldr	r2, [pc, #52]	; (8012bd0 <Custom_Temp_Send_Notification+0xac>)
 8012b9a:	480e      	ldr	r0, [pc, #56]	; (8012bd4 <Custom_Temp_Send_Notification+0xb0>)
 8012b9c:	f001 fed2 	bl	8014944 <iprintf>
 8012ba0:	480e      	ldr	r0, [pc, #56]	; (8012bdc <Custom_Temp_Send_Notification+0xb8>)
 8012ba2:	f001 ff6b 	bl	8014a7c <puts>
			}
  /* USER CODE END Temp_NS_1*/

  if (updateflag != 0)
 8012ba6:	7ffb      	ldrb	r3, [r7, #31]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d004      	beq.n	8012bb6 <Custom_Temp_Send_Notification+0x92>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, (uint8_t *)NotifyCharData);
 8012bac:	4906      	ldr	r1, [pc, #24]	; (8012bc8 <Custom_Temp_Send_Notification+0xa4>)
 8012bae:	2001      	movs	r0, #1
 8012bb0:	f000 fbbe 	bl	8013330 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Temp_NS_Last*/

  /* USER CODE END Temp_NS_Last*/

  return;
 8012bb4:	bf00      	nop
 8012bb6:	bf00      	nop
}
 8012bb8:	3720      	adds	r7, #32
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20001274 	.word	0x20001274
 8012bc4:	080181c0 	.word	0x080181c0
 8012bc8:	20001378 	.word	0x20001378
 8012bcc:	080181c8 	.word	0x080181c8
 8012bd0:	08018aac 	.word	0x08018aac
 8012bd4:	080181e8 	.word	0x080181e8
 8012bd8:	08018280 	.word	0x08018280
 8012bdc:	08018238 	.word	0x08018238

08012be0 <Custom_Lat_Update_Char>:

void Custom_Lat_Update_Char(void) /* Property Read */
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Lat_UC_1*/

  /* USER CODE END Lat_UC_1*/

  if (updateflag != 0)
 8012bea:	79fb      	ldrb	r3, [r7, #7]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d004      	beq.n	8012bfa <Custom_Lat_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_LAT, (uint8_t *)UpdateCharData);
 8012bf0:	4904      	ldr	r1, [pc, #16]	; (8012c04 <Custom_Lat_Update_Char+0x24>)
 8012bf2:	2002      	movs	r0, #2
 8012bf4:	f000 fb9c 	bl	8013330 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Lat_UC_Last*/

  /* USER CODE END Lat_UC_Last*/
  return;
 8012bf8:	bf00      	nop
 8012bfa:	bf00      	nop
}
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	20001280 	.word	0x20001280

08012c08 <Custom_Lat_Send_Notification>:

void Custom_Lat_Send_Notification(void) /* Property Notification */
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Lat_NS_1*/

    if (Custom_App_Context.Lat_Notification_Status == 1)
 8012c12:	4b23      	ldr	r3, [pc, #140]	; (8012ca0 <Custom_Lat_Send_Notification+0x98>)
 8012c14:	789b      	ldrb	r3, [r3, #2]
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d128      	bne.n	8012c6c <Custom_Lat_Send_Notification+0x64>
    {
        updateflag = 1;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	71fb      	strb	r3, [r7, #7]

        static int index = 0;
        if (index >= sizeof(coordinatesLat) / sizeof(coordinatesLat[0])) {
 8012c1e:	4b21      	ldr	r3, [pc, #132]	; (8012ca4 <Custom_Lat_Send_Notification+0x9c>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2b06      	cmp	r3, #6
 8012c24:	d902      	bls.n	8012c2c <Custom_Lat_Send_Notification+0x24>
            index = 0;
 8012c26:	4b1f      	ldr	r3, [pc, #124]	; (8012ca4 <Custom_Lat_Send_Notification+0x9c>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	601a      	str	r2, [r3, #0]
        }

        // Copier la latitude dans NotifyCharData

        memcpy(&NotifyCharData[0], coordinatesLat[index].latitude, sizeof(coordinatesLat[index].latitude));
 8012c2c:	4b1d      	ldr	r3, [pc, #116]	; (8012ca4 <Custom_Lat_Send_Notification+0x9c>)
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	4613      	mov	r3, r2
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4a1b      	ldr	r2, [pc, #108]	; (8012ca8 <Custom_Lat_Send_Notification+0xa0>)
 8012c3a:	4413      	add	r3, r2
 8012c3c:	220a      	movs	r2, #10
 8012c3e:	4619      	mov	r1, r3
 8012c40:	481a      	ldr	r0, [pc, #104]	; (8012cac <Custom_Lat_Send_Notification+0xa4>)
 8012c42:	f001 f9ff 	bl	8014044 <memcpy>

        index++;
 8012c46:	4b17      	ldr	r3, [pc, #92]	; (8012ca4 <Custom_Lat_Send_Notification+0x9c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	4a15      	ldr	r2, [pc, #84]	; (8012ca4 <Custom_Lat_Send_Notification+0x9c>)
 8012c4e:	6013      	str	r3, [r2, #0]
        APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT LATITUDE SENT \n");
 8012c50:	4817      	ldr	r0, [pc, #92]	; (8012cb0 <Custom_Lat_Send_Notification+0xa8>)
 8012c52:	f7fe fd45 	bl	80116e0 <DbgTraceGetFileName>
 8012c56:	4601      	mov	r1, r0
 8012c58:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8012c5c:	4a15      	ldr	r2, [pc, #84]	; (8012cb4 <Custom_Lat_Send_Notification+0xac>)
 8012c5e:	4816      	ldr	r0, [pc, #88]	; (8012cb8 <Custom_Lat_Send_Notification+0xb0>)
 8012c60:	f001 fe70 	bl	8014944 <iprintf>
 8012c64:	4815      	ldr	r0, [pc, #84]	; (8012cbc <Custom_Lat_Send_Notification+0xb4>)
 8012c66:	f001 ff09 	bl	8014a7c <puts>
 8012c6a:	e00c      	b.n	8012c86 <Custom_Lat_Send_Notification+0x7e>
    }
    else
    {
        APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8012c6c:	4810      	ldr	r0, [pc, #64]	; (8012cb0 <Custom_Lat_Send_Notification+0xa8>)
 8012c6e:	f7fe fd37 	bl	80116e0 <DbgTraceGetFileName>
 8012c72:	4601      	mov	r1, r0
 8012c74:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8012c78:	4a0e      	ldr	r2, [pc, #56]	; (8012cb4 <Custom_Lat_Send_Notification+0xac>)
 8012c7a:	480f      	ldr	r0, [pc, #60]	; (8012cb8 <Custom_Lat_Send_Notification+0xb0>)
 8012c7c:	f001 fe62 	bl	8014944 <iprintf>
 8012c80:	480f      	ldr	r0, [pc, #60]	; (8012cc0 <Custom_Lat_Send_Notification+0xb8>)
 8012c82:	f001 fefb 	bl	8014a7c <puts>
    }

  /* USER CODE END Lat_NS_1*/

  if (updateflag != 0)
 8012c86:	79fb      	ldrb	r3, [r7, #7]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d004      	beq.n	8012c96 <Custom_Lat_Send_Notification+0x8e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_LAT, (uint8_t *)NotifyCharData);
 8012c8c:	4907      	ldr	r1, [pc, #28]	; (8012cac <Custom_Lat_Send_Notification+0xa4>)
 8012c8e:	2002      	movs	r0, #2
 8012c90:	f000 fb4e 	bl	8013330 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Lat_NS_Last*/

  /* USER CODE END Lat_NS_Last*/

  return;
 8012c94:	bf00      	nop
 8012c96:	bf00      	nop
}
 8012c98:	3708      	adds	r7, #8
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	20001274 	.word	0x20001274
 8012ca4:	20001470 	.word	0x20001470
 8012ca8:	200001a8 	.word	0x200001a8
 8012cac:	20001378 	.word	0x20001378
 8012cb0:	080181c8 	.word	0x080181c8
 8012cb4:	08018acc 	.word	0x08018acc
 8012cb8:	080181e8 	.word	0x080181e8
 8012cbc:	080182bc 	.word	0x080182bc
 8012cc0:	08018238 	.word	0x08018238

08012cc4 <Custom_Long_Update_Char>:

void Custom_Long_Update_Char(void) /* Property Read */
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Long_UC_1*/

  /* USER CODE END Long_UC_1*/

  if (updateflag != 0)
 8012cce:	79fb      	ldrb	r3, [r7, #7]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d004      	beq.n	8012cde <Custom_Long_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_LONG, (uint8_t *)UpdateCharData);
 8012cd4:	4904      	ldr	r1, [pc, #16]	; (8012ce8 <Custom_Long_Update_Char+0x24>)
 8012cd6:	2003      	movs	r0, #3
 8012cd8:	f000 fb2a 	bl	8013330 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Long_UC_Last*/

  /* USER CODE END Long_UC_Last*/
  return;
 8012cdc:	bf00      	nop
 8012cde:	bf00      	nop
}
 8012ce0:	3708      	adds	r7, #8
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20001280 	.word	0x20001280

08012cec <Custom_Long_Send_Notification>:

void Custom_Long_Send_Notification(void) /* Property Notification */
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Long_NS_1*/

		if (Custom_App_Context.Long_Notification_Status == 1)
 8012cf6:	4b23      	ldr	r3, [pc, #140]	; (8012d84 <Custom_Long_Send_Notification+0x98>)
 8012cf8:	78db      	ldrb	r3, [r3, #3]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d128      	bne.n	8012d50 <Custom_Long_Send_Notification+0x64>
	{
	updateflag = 1;
 8012cfe:	2301      	movs	r3, #1
 8012d00:	71fb      	strb	r3, [r7, #7]

	static int index = 0;
	    if (index >= sizeof(coordinatesLong) / sizeof(coordinatesLong[0])) {
 8012d02:	4b21      	ldr	r3, [pc, #132]	; (8012d88 <Custom_Long_Send_Notification+0x9c>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	2b06      	cmp	r3, #6
 8012d08:	d902      	bls.n	8012d10 <Custom_Long_Send_Notification+0x24>
	        index = 0;
 8012d0a:	4b1f      	ldr	r3, [pc, #124]	; (8012d88 <Custom_Long_Send_Notification+0x9c>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	601a      	str	r2, [r3, #0]
	    }

	    // Convertir la latitude en tableau de bytes

        memcpy(&NotifyCharData[0], coordinatesLong[index].longitude, sizeof(coordinatesLong[index].longitude));
 8012d10:	4b1d      	ldr	r3, [pc, #116]	; (8012d88 <Custom_Long_Send_Notification+0x9c>)
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	4613      	mov	r3, r2
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	4413      	add	r3, r2
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	4a1b      	ldr	r2, [pc, #108]	; (8012d8c <Custom_Long_Send_Notification+0xa0>)
 8012d1e:	4413      	add	r3, r2
 8012d20:	220a      	movs	r2, #10
 8012d22:	4619      	mov	r1, r3
 8012d24:	481a      	ldr	r0, [pc, #104]	; (8012d90 <Custom_Long_Send_Notification+0xa4>)
 8012d26:	f001 f98d 	bl	8014044 <memcpy>

	    // Appel de la fonction d'envoi avec l'UUID correspondant à la latitude

	    index++;
 8012d2a:	4b17      	ldr	r3, [pc, #92]	; (8012d88 <Custom_Long_Send_Notification+0x9c>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	3301      	adds	r3, #1
 8012d30:	4a15      	ldr	r2, [pc, #84]	; (8012d88 <Custom_Long_Send_Notification+0x9c>)
 8012d32:	6013      	str	r3, [r2, #0]

		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT LATITUDE SENT \n");
 8012d34:	4817      	ldr	r0, [pc, #92]	; (8012d94 <Custom_Long_Send_Notification+0xa8>)
 8012d36:	f7fe fcd3 	bl	80116e0 <DbgTraceGetFileName>
 8012d3a:	4601      	mov	r1, r0
 8012d3c:	f240 2323 	movw	r3, #547	; 0x223
 8012d40:	4a15      	ldr	r2, [pc, #84]	; (8012d98 <Custom_Long_Send_Notification+0xac>)
 8012d42:	4816      	ldr	r0, [pc, #88]	; (8012d9c <Custom_Long_Send_Notification+0xb0>)
 8012d44:	f001 fdfe 	bl	8014944 <iprintf>
 8012d48:	4815      	ldr	r0, [pc, #84]	; (8012da0 <Custom_Long_Send_Notification+0xb4>)
 8012d4a:	f001 fe97 	bl	8014a7c <puts>
 8012d4e:	e00c      	b.n	8012d6a <Custom_Long_Send_Notification+0x7e>
	}
	else
	{
		APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8012d50:	4810      	ldr	r0, [pc, #64]	; (8012d94 <Custom_Long_Send_Notification+0xa8>)
 8012d52:	f7fe fcc5 	bl	80116e0 <DbgTraceGetFileName>
 8012d56:	4601      	mov	r1, r0
 8012d58:	f240 2327 	movw	r3, #551	; 0x227
 8012d5c:	4a0e      	ldr	r2, [pc, #56]	; (8012d98 <Custom_Long_Send_Notification+0xac>)
 8012d5e:	480f      	ldr	r0, [pc, #60]	; (8012d9c <Custom_Long_Send_Notification+0xb0>)
 8012d60:	f001 fdf0 	bl	8014944 <iprintf>
 8012d64:	480f      	ldr	r0, [pc, #60]	; (8012da4 <Custom_Long_Send_Notification+0xb8>)
 8012d66:	f001 fe89 	bl	8014a7c <puts>
	}

  /* USER CODE END Long_NS_1*/

  if (updateflag != 0)
 8012d6a:	79fb      	ldrb	r3, [r7, #7]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d004      	beq.n	8012d7a <Custom_Long_Send_Notification+0x8e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_LONG, (uint8_t *)NotifyCharData);
 8012d70:	4907      	ldr	r1, [pc, #28]	; (8012d90 <Custom_Long_Send_Notification+0xa4>)
 8012d72:	2003      	movs	r0, #3
 8012d74:	f000 fadc 	bl	8013330 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Long_NS_Last*/

  /* USER CODE END Long_NS_Last*/

  return;
 8012d78:	bf00      	nop
 8012d7a:	bf00      	nop
}
 8012d7c:	3708      	adds	r7, #8
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	20001274 	.word	0x20001274
 8012d88:	20001474 	.word	0x20001474
 8012d8c:	200001f0 	.word	0x200001f0
 8012d90:	20001378 	.word	0x20001378
 8012d94:	080181c8 	.word	0x080181c8
 8012d98:	08018aec 	.word	0x08018aec
 8012d9c:	080181e8 	.word	0x080181e8
 8012da0:	080182bc 	.word	0x080182bc
 8012da4:	08018238 	.word	0x08018238

08012da8 <HAL_TIM_PeriodElapsedCallback>:
{
  return;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  if (htim == &htim2){
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	4a07      	ldr	r2, [pc, #28]	; (8012dd0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d107      	bne.n	8012dc8 <HAL_TIM_PeriodElapsedCallback+0x20>
	  GPS_LAT_Action();
 8012db8:	f7ff fdda 	bl	8012970 <GPS_LAT_Action>
	  GPS_LONG_Action();
 8012dbc:	f7ff fde0 	bl	8012980 <GPS_LONG_Action>
	  Accelerometre_Action();
 8012dc0:	f7ff fde6 	bl	8012990 <Accelerometre_Action>
	  Temperature_Action();
 8012dc4:	f7ff fdec 	bl	80129a0 <Temperature_Action>
  }
}
 8012dc8:	bf00      	nop
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	20000e00 	.word	0x20000e00

08012dd4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08a      	sub	sp, #40	; 0x28
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	3301      	adds	r3, #1
 8012de6:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8012de8:	6a3b      	ldr	r3, [r7, #32]
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2bff      	cmp	r3, #255	; 0xff
 8012dee:	f040 80ad 	bne.w	8012f4c <Custom_STM_Event_Handler+0x178>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8012df2:	6a3b      	ldr	r3, [r7, #32]
 8012df4:	3302      	adds	r3, #2
 8012df6:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	881b      	ldrh	r3, [r3, #0]
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	f640 4214 	movw	r2, #3092	; 0xc14
 8012e02:	4293      	cmp	r3, r2
 8012e04:	f000 809e 	beq.w	8012f44 <Custom_STM_Event_Handler+0x170>
 8012e08:	f640 4214 	movw	r2, #3092	; 0xc14
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	f300 809b 	bgt.w	8012f48 <Custom_STM_Event_Handler+0x174>
 8012e12:	f640 4201 	movw	r2, #3073	; 0xc01
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d003      	beq.n	8012e22 <Custom_STM_Event_Handler+0x4e>
 8012e1a:	f640 4213 	movw	r2, #3091	; 0xc13
 8012e1e:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8012e20:	e093      	b.n	8012f4a <Custom_STM_Event_Handler+0x176>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	3302      	adds	r3, #2
 8012e26:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomVitHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	885b      	ldrh	r3, [r3, #2]
 8012e2c:	b29b      	uxth	r3, r3
 8012e2e:	461a      	mov	r2, r3
 8012e30:	4b4a      	ldr	r3, [pc, #296]	; (8012f5c <Custom_STM_Event_Handler+0x188>)
 8012e32:	885b      	ldrh	r3, [r3, #2]
 8012e34:	3302      	adds	r3, #2
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d119      	bne.n	8012e6e <Custom_STM_Event_Handler+0x9a>
            return_value = SVCCTL_EvtAckFlowEnable;
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	7a1b      	ldrb	r3, [r3, #8]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d002      	beq.n	8012e4e <Custom_STM_Event_Handler+0x7a>
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d008      	beq.n	8012e5e <Custom_STM_Event_Handler+0x8a>
              break;
 8012e4c:	e079      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VIT_NOTIFY_DISABLED_EVT;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012e52:	f107 0308 	add.w	r3, r7, #8
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff fcdc 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012e5c:	e071      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_VIT_NOTIFY_ENABLED_EVT;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012e62:	f107 0308 	add.w	r3, r7, #8
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff fcd4 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012e6c:	e069      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	885b      	ldrh	r3, [r3, #2]
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	461a      	mov	r2, r3
 8012e76:	4b39      	ldr	r3, [pc, #228]	; (8012f5c <Custom_STM_Event_Handler+0x188>)
 8012e78:	889b      	ldrh	r3, [r3, #4]
 8012e7a:	3302      	adds	r3, #2
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d119      	bne.n	8012eb4 <Custom_STM_Event_Handler+0xe0>
            return_value = SVCCTL_EvtAckFlowEnable;
 8012e80:	2301      	movs	r3, #1
 8012e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	7a1b      	ldrb	r3, [r3, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d002      	beq.n	8012e94 <Custom_STM_Event_Handler+0xc0>
 8012e8e:	2b01      	cmp	r3, #1
 8012e90:	d008      	beq.n	8012ea4 <Custom_STM_Event_Handler+0xd0>
              break;
 8012e92:	e056      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT;
 8012e94:	2303      	movs	r3, #3
 8012e96:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012e98:	f107 0308 	add.w	r3, r7, #8
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff fcb9 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012ea2:	e04e      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT;
 8012ea4:	2302      	movs	r3, #2
 8012ea6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012ea8:	f107 0308 	add.w	r3, r7, #8
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fcb1 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012eb2:	e046      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLatHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8012eb4:	69bb      	ldr	r3, [r7, #24]
 8012eb6:	885b      	ldrh	r3, [r3, #2]
 8012eb8:	b29b      	uxth	r3, r3
 8012eba:	461a      	mov	r2, r3
 8012ebc:	4b27      	ldr	r3, [pc, #156]	; (8012f5c <Custom_STM_Event_Handler+0x188>)
 8012ebe:	88db      	ldrh	r3, [r3, #6]
 8012ec0:	3302      	adds	r3, #2
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d119      	bne.n	8012efa <Custom_STM_Event_Handler+0x126>
            return_value = SVCCTL_EvtAckFlowEnable;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	7a1b      	ldrb	r3, [r3, #8]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d002      	beq.n	8012eda <Custom_STM_Event_Handler+0x106>
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	d008      	beq.n	8012eea <Custom_STM_Event_Handler+0x116>
              break;
 8012ed8:	e033      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LAT_NOTIFY_DISABLED_EVT;
 8012eda:	2305      	movs	r3, #5
 8012edc:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012ede:	f107 0308 	add.w	r3, r7, #8
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7ff fc96 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012ee8:	e02b      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LAT_NOTIFY_ENABLED_EVT;
 8012eea:	2304      	movs	r3, #4
 8012eec:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012eee:	f107 0308 	add.w	r3, r7, #8
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7ff fc8e 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012ef8:	e023      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLongHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	885b      	ldrh	r3, [r3, #2]
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	461a      	mov	r2, r3
 8012f02:	4b16      	ldr	r3, [pc, #88]	; (8012f5c <Custom_STM_Event_Handler+0x188>)
 8012f04:	891b      	ldrh	r3, [r3, #8]
 8012f06:	3302      	adds	r3, #2
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d119      	bne.n	8012f40 <Custom_STM_Event_Handler+0x16c>
            return_value = SVCCTL_EvtAckFlowEnable;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8012f12:	69bb      	ldr	r3, [r7, #24]
 8012f14:	7a1b      	ldrb	r3, [r3, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <Custom_STM_Event_Handler+0x14c>
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d008      	beq.n	8012f30 <Custom_STM_Event_Handler+0x15c>
              break;
 8012f1e:	e010      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LONG_NOTIFY_DISABLED_EVT;
 8012f20:	2307      	movs	r3, #7
 8012f22:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012f24:	f107 0308 	add.w	r3, r7, #8
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff fc73 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012f2e:	e008      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_LONG_NOTIFY_ENABLED_EVT;
 8012f30:	2306      	movs	r3, #6
 8012f32:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8012f34:	f107 0308 	add.w	r3, r7, #8
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7ff fc6b 	bl	8012814 <Custom_STM_App_Notification>
                break;
 8012f3e:	e000      	b.n	8012f42 <Custom_STM_Event_Handler+0x16e>
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomLongHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/
 8012f40:	bf00      	nop
          break;
 8012f42:	e002      	b.n	8012f4a <Custom_STM_Event_Handler+0x176>
          break;
 8012f44:	bf00      	nop
 8012f46:	e002      	b.n	8012f4e <Custom_STM_Event_Handler+0x17a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8012f48:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012f4a:	e000      	b.n	8012f4e <Custom_STM_Event_Handler+0x17a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8012f4c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8012f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8012f52:	4618      	mov	r0, r3
 8012f54:	3728      	adds	r7, #40	; 0x28
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20001478 	.word	0x20001478

08012f60 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b08c      	sub	sp, #48	; 0x30
 8012f64:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012f66:	2392      	movs	r3, #146	; 0x92
 8012f68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8012f6a:	48a2      	ldr	r0, [pc, #648]	; (80131f4 <SVCCTL_InitCustomSvc+0x294>)
 8012f6c:	f7fd fd46 	bl	80109fc <SVCCTL_RegisterSvcHandler>
   *                                1 for latitude configuration descriptor +
   *                                1 for longitude configuration descriptor +
   *                              = 13
   */

  COPY_FIRST_SERVICE_UUID(uuid.Char_UUID_128);
 8012f70:	238f      	movs	r3, #143	; 0x8f
 8012f72:	713b      	strb	r3, [r7, #4]
 8012f74:	23e5      	movs	r3, #229	; 0xe5
 8012f76:	717b      	strb	r3, [r7, #5]
 8012f78:	23b3      	movs	r3, #179	; 0xb3
 8012f7a:	71bb      	strb	r3, [r7, #6]
 8012f7c:	23d5      	movs	r3, #213	; 0xd5
 8012f7e:	71fb      	strb	r3, [r7, #7]
 8012f80:	232e      	movs	r3, #46	; 0x2e
 8012f82:	723b      	strb	r3, [r7, #8]
 8012f84:	237f      	movs	r3, #127	; 0x7f
 8012f86:	727b      	strb	r3, [r7, #9]
 8012f88:	234a      	movs	r3, #74	; 0x4a
 8012f8a:	72bb      	strb	r3, [r7, #10]
 8012f8c:	2398      	movs	r3, #152	; 0x98
 8012f8e:	72fb      	strb	r3, [r7, #11]
 8012f90:	232a      	movs	r3, #42	; 0x2a
 8012f92:	733b      	strb	r3, [r7, #12]
 8012f94:	2348      	movs	r3, #72	; 0x48
 8012f96:	737b      	strb	r3, [r7, #13]
 8012f98:	237a      	movs	r3, #122	; 0x7a
 8012f9a:	73bb      	strb	r3, [r7, #14]
 8012f9c:	23cc      	movs	r3, #204	; 0xcc
 8012f9e:	73fb      	strb	r3, [r7, #15]
 8012fa0:	23ed      	movs	r3, #237	; 0xed
 8012fa2:	743b      	strb	r3, [r7, #16]
 8012fa4:	23fe      	movs	r3, #254	; 0xfe
 8012fa6:	747b      	strb	r3, [r7, #17]
 8012fa8:	2300      	movs	r3, #0
 8012faa:	74bb      	strb	r3, [r7, #18]
 8012fac:	2300      	movs	r3, #0
 8012fae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8012fb0:	1d39      	adds	r1, r7, #4
 8012fb2:	4b91      	ldr	r3, [pc, #580]	; (80131f8 <SVCCTL_InitCustomSvc+0x298>)
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	230d      	movs	r3, #13
 8012fb8:	2201      	movs	r2, #1
 8012fba:	2002      	movs	r0, #2
 8012fbc:	f7fc ffe6 	bl	800ff8c <aci_gatt_add_service>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             13,
                             &(CustomContext.CustomFsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8012fc4:	7dfb      	ldrb	r3, [r7, #23]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00f      	beq.n	8012fea <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: fs, error code: 0x%x \n\r", ret);
 8012fca:	488c      	ldr	r0, [pc, #560]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 8012fcc:	f7fe fb88 	bl	80116e0 <DbgTraceGetFileName>
 8012fd0:	4601      	mov	r1, r0
 8012fd2:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8012fd6:	4a8a      	ldr	r2, [pc, #552]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 8012fd8:	488a      	ldr	r0, [pc, #552]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 8012fda:	f001 fcb3 	bl	8014944 <iprintf>
 8012fde:	7dfb      	ldrb	r3, [r7, #23]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	4889      	ldr	r0, [pc, #548]	; (8013208 <SVCCTL_InitCustomSvc+0x2a8>)
 8012fe4:	f001 fcae 	bl	8014944 <iprintf>
 8012fe8:	e00c      	b.n	8013004 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: fs \n\r");
 8012fea:	4884      	ldr	r0, [pc, #528]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 8012fec:	f7fe fb78 	bl	80116e0 <DbgTraceGetFileName>
 8012ff0:	4601      	mov	r1, r0
 8012ff2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8012ff6:	4a82      	ldr	r2, [pc, #520]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 8012ff8:	4882      	ldr	r0, [pc, #520]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 8012ffa:	f001 fca3 	bl	8014944 <iprintf>
 8012ffe:	4883      	ldr	r0, [pc, #524]	; (801320c <SVCCTL_InitCustomSvc+0x2ac>)
 8013000:	f001 fca0 	bl	8014944 <iprintf>
  }

  /**
   *  vitesse
   */
  COPY_VITESSE_UUID(uuid.Char_UUID_128);
 8013004:	2319      	movs	r3, #25
 8013006:	713b      	strb	r3, [r7, #4]
 8013008:	23ed      	movs	r3, #237	; 0xed
 801300a:	717b      	strb	r3, [r7, #5]
 801300c:	2382      	movs	r3, #130	; 0x82
 801300e:	71bb      	strb	r3, [r7, #6]
 8013010:	23ae      	movs	r3, #174	; 0xae
 8013012:	71fb      	strb	r3, [r7, #7]
 8013014:	23ed      	movs	r3, #237	; 0xed
 8013016:	723b      	strb	r3, [r7, #8]
 8013018:	2321      	movs	r3, #33	; 0x21
 801301a:	727b      	strb	r3, [r7, #9]
 801301c:	234c      	movs	r3, #76	; 0x4c
 801301e:	72bb      	strb	r3, [r7, #10]
 8013020:	239d      	movs	r3, #157	; 0x9d
 8013022:	72fb      	strb	r3, [r7, #11]
 8013024:	2341      	movs	r3, #65	; 0x41
 8013026:	733b      	strb	r3, [r7, #12]
 8013028:	2345      	movs	r3, #69	; 0x45
 801302a:	737b      	strb	r3, [r7, #13]
 801302c:	2322      	movs	r3, #34	; 0x22
 801302e:	73bb      	strb	r3, [r7, #14]
 8013030:	238e      	movs	r3, #142	; 0x8e
 8013032:	73fb      	strb	r3, [r7, #15]
 8013034:	23cc      	movs	r3, #204	; 0xcc
 8013036:	743b      	strb	r3, [r7, #16]
 8013038:	23aa      	movs	r3, #170	; 0xaa
 801303a:	747b      	strb	r3, [r7, #17]
 801303c:	2300      	movs	r3, #0
 801303e:	74bb      	strb	r3, [r7, #18]
 8013040:	2300      	movs	r3, #0
 8013042:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8013044:	4b6c      	ldr	r3, [pc, #432]	; (80131f8 <SVCCTL_InitCustomSvc+0x298>)
 8013046:	8818      	ldrh	r0, [r3, #0]
 8013048:	4b71      	ldr	r3, [pc, #452]	; (8013210 <SVCCTL_InitCustomSvc+0x2b0>)
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	b29b      	uxth	r3, r3
 801304e:	1d3a      	adds	r2, r7, #4
 8013050:	4970      	ldr	r1, [pc, #448]	; (8013214 <SVCCTL_InitCustomSvc+0x2b4>)
 8013052:	9105      	str	r1, [sp, #20]
 8013054:	2101      	movs	r1, #1
 8013056:	9104      	str	r1, [sp, #16]
 8013058:	2110      	movs	r1, #16
 801305a:	9103      	str	r1, [sp, #12]
 801305c:	2101      	movs	r1, #1
 801305e:	9102      	str	r1, [sp, #8]
 8013060:	2100      	movs	r1, #0
 8013062:	9101      	str	r1, [sp, #4]
 8013064:	2110      	movs	r1, #16
 8013066:	9100      	str	r1, [sp, #0]
 8013068:	2102      	movs	r1, #2
 801306a:	f7fd f865 	bl	8010138 <aci_gatt_add_char>
 801306e:	4603      	mov	r3, r0
 8013070:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomVitHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013072:	7dfb      	ldrb	r3, [r7, #23]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d00f      	beq.n	8013098 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : VIT, error code: 0x%x \n\r", ret);
 8013078:	4860      	ldr	r0, [pc, #384]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 801307a:	f7fe fb31 	bl	80116e0 <DbgTraceGetFileName>
 801307e:	4601      	mov	r1, r0
 8013080:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8013084:	4a5e      	ldr	r2, [pc, #376]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 8013086:	485f      	ldr	r0, [pc, #380]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 8013088:	f001 fc5c 	bl	8014944 <iprintf>
 801308c:	7dfb      	ldrb	r3, [r7, #23]
 801308e:	4619      	mov	r1, r3
 8013090:	4861      	ldr	r0, [pc, #388]	; (8013218 <SVCCTL_InitCustomSvc+0x2b8>)
 8013092:	f001 fc57 	bl	8014944 <iprintf>
 8013096:	e00c      	b.n	80130b2 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VIT \n\r");
 8013098:	4858      	ldr	r0, [pc, #352]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 801309a:	f7fe fb21 	bl	80116e0 <DbgTraceGetFileName>
 801309e:	4601      	mov	r1, r0
 80130a0:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
 80130a4:	4a56      	ldr	r2, [pc, #344]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 80130a6:	4857      	ldr	r0, [pc, #348]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 80130a8:	f001 fc4c 	bl	8014944 <iprintf>
 80130ac:	485b      	ldr	r0, [pc, #364]	; (801321c <SVCCTL_InitCustomSvc+0x2bc>)
 80130ae:	f001 fc49 	bl	8014944 <iprintf>
  }
  /**
   *  temperature
   */
  COPY_TEMPERATURE_UUID(uuid.Char_UUID_128);
 80130b2:	2319      	movs	r3, #25
 80130b4:	713b      	strb	r3, [r7, #4]
 80130b6:	23ed      	movs	r3, #237	; 0xed
 80130b8:	717b      	strb	r3, [r7, #5]
 80130ba:	2382      	movs	r3, #130	; 0x82
 80130bc:	71bb      	strb	r3, [r7, #6]
 80130be:	23ae      	movs	r3, #174	; 0xae
 80130c0:	71fb      	strb	r3, [r7, #7]
 80130c2:	23ed      	movs	r3, #237	; 0xed
 80130c4:	723b      	strb	r3, [r7, #8]
 80130c6:	2321      	movs	r3, #33	; 0x21
 80130c8:	727b      	strb	r3, [r7, #9]
 80130ca:	234c      	movs	r3, #76	; 0x4c
 80130cc:	72bb      	strb	r3, [r7, #10]
 80130ce:	239d      	movs	r3, #157	; 0x9d
 80130d0:	72fb      	strb	r3, [r7, #11]
 80130d2:	2341      	movs	r3, #65	; 0x41
 80130d4:	733b      	strb	r3, [r7, #12]
 80130d6:	2345      	movs	r3, #69	; 0x45
 80130d8:	737b      	strb	r3, [r7, #13]
 80130da:	2322      	movs	r3, #34	; 0x22
 80130dc:	73bb      	strb	r3, [r7, #14]
 80130de:	238e      	movs	r3, #142	; 0x8e
 80130e0:	73fb      	strb	r3, [r7, #15]
 80130e2:	23ee      	movs	r3, #238	; 0xee
 80130e4:	743b      	strb	r3, [r7, #16]
 80130e6:	23dd      	movs	r3, #221	; 0xdd
 80130e8:	747b      	strb	r3, [r7, #17]
 80130ea:	2300      	movs	r3, #0
 80130ec:	74bb      	strb	r3, [r7, #18]
 80130ee:	2300      	movs	r3, #0
 80130f0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 80130f2:	4b41      	ldr	r3, [pc, #260]	; (80131f8 <SVCCTL_InitCustomSvc+0x298>)
 80130f4:	8818      	ldrh	r0, [r3, #0]
 80130f6:	4b4a      	ldr	r3, [pc, #296]	; (8013220 <SVCCTL_InitCustomSvc+0x2c0>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	b29b      	uxth	r3, r3
 80130fc:	1d3a      	adds	r2, r7, #4
 80130fe:	4949      	ldr	r1, [pc, #292]	; (8013224 <SVCCTL_InitCustomSvc+0x2c4>)
 8013100:	9105      	str	r1, [sp, #20]
 8013102:	2101      	movs	r1, #1
 8013104:	9104      	str	r1, [sp, #16]
 8013106:	2110      	movs	r1, #16
 8013108:	9103      	str	r1, [sp, #12]
 801310a:	2101      	movs	r1, #1
 801310c:	9102      	str	r1, [sp, #8]
 801310e:	2100      	movs	r1, #0
 8013110:	9101      	str	r1, [sp, #4]
 8013112:	2110      	movs	r1, #16
 8013114:	9100      	str	r1, [sp, #0]
 8013116:	2102      	movs	r1, #2
 8013118:	f7fd f80e 	bl	8010138 <aci_gatt_add_char>
 801311c:	4603      	mov	r3, r0
 801311e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomTempHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013120:	7dfb      	ldrb	r3, [r7, #23]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00f      	beq.n	8013146 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : TEMP, error code: 0x%x \n\r", ret);
 8013126:	4835      	ldr	r0, [pc, #212]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 8013128:	f7fe fada 	bl	80116e0 <DbgTraceGetFileName>
 801312c:	4601      	mov	r1, r0
 801312e:	f240 13d7 	movw	r3, #471	; 0x1d7
 8013132:	4a33      	ldr	r2, [pc, #204]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 8013134:	4833      	ldr	r0, [pc, #204]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 8013136:	f001 fc05 	bl	8014944 <iprintf>
 801313a:	7dfb      	ldrb	r3, [r7, #23]
 801313c:	4619      	mov	r1, r3
 801313e:	483a      	ldr	r0, [pc, #232]	; (8013228 <SVCCTL_InitCustomSvc+0x2c8>)
 8013140:	f001 fc00 	bl	8014944 <iprintf>
 8013144:	e00c      	b.n	8013160 <SVCCTL_InitCustomSvc+0x200>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEMP \n\r");
 8013146:	482d      	ldr	r0, [pc, #180]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 8013148:	f7fe faca 	bl	80116e0 <DbgTraceGetFileName>
 801314c:	4601      	mov	r1, r0
 801314e:	f240 13db 	movw	r3, #475	; 0x1db
 8013152:	4a2b      	ldr	r2, [pc, #172]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 8013154:	482b      	ldr	r0, [pc, #172]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 8013156:	f001 fbf5 	bl	8014944 <iprintf>
 801315a:	4834      	ldr	r0, [pc, #208]	; (801322c <SVCCTL_InitCustomSvc+0x2cc>)
 801315c:	f001 fbf2 	bl	8014944 <iprintf>
  }
  /**
   *  latitude
   */
  COPY_LATITUDE_UUID(uuid.Char_UUID_128);
 8013160:	2319      	movs	r3, #25
 8013162:	713b      	strb	r3, [r7, #4]
 8013164:	23ed      	movs	r3, #237	; 0xed
 8013166:	717b      	strb	r3, [r7, #5]
 8013168:	2382      	movs	r3, #130	; 0x82
 801316a:	71bb      	strb	r3, [r7, #6]
 801316c:	23ae      	movs	r3, #174	; 0xae
 801316e:	71fb      	strb	r3, [r7, #7]
 8013170:	23ed      	movs	r3, #237	; 0xed
 8013172:	723b      	strb	r3, [r7, #8]
 8013174:	2321      	movs	r3, #33	; 0x21
 8013176:	727b      	strb	r3, [r7, #9]
 8013178:	234c      	movs	r3, #76	; 0x4c
 801317a:	72bb      	strb	r3, [r7, #10]
 801317c:	239d      	movs	r3, #157	; 0x9d
 801317e:	72fb      	strb	r3, [r7, #11]
 8013180:	2341      	movs	r3, #65	; 0x41
 8013182:	733b      	strb	r3, [r7, #12]
 8013184:	2345      	movs	r3, #69	; 0x45
 8013186:	737b      	strb	r3, [r7, #13]
 8013188:	2322      	movs	r3, #34	; 0x22
 801318a:	73bb      	strb	r3, [r7, #14]
 801318c:	238e      	movs	r3, #142	; 0x8e
 801318e:	73fb      	strb	r3, [r7, #15]
 8013190:	23da      	movs	r3, #218	; 0xda
 8013192:	743b      	strb	r3, [r7, #16]
 8013194:	23ad      	movs	r3, #173	; 0xad
 8013196:	747b      	strb	r3, [r7, #17]
 8013198:	2300      	movs	r3, #0
 801319a:	74bb      	strb	r3, [r7, #18]
 801319c:	2300      	movs	r3, #0
 801319e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 80131a0:	4b15      	ldr	r3, [pc, #84]	; (80131f8 <SVCCTL_InitCustomSvc+0x298>)
 80131a2:	8818      	ldrh	r0, [r3, #0]
 80131a4:	4b22      	ldr	r3, [pc, #136]	; (8013230 <SVCCTL_InitCustomSvc+0x2d0>)
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	1d3a      	adds	r2, r7, #4
 80131ac:	4921      	ldr	r1, [pc, #132]	; (8013234 <SVCCTL_InitCustomSvc+0x2d4>)
 80131ae:	9105      	str	r1, [sp, #20]
 80131b0:	2101      	movs	r1, #1
 80131b2:	9104      	str	r1, [sp, #16]
 80131b4:	2110      	movs	r1, #16
 80131b6:	9103      	str	r1, [sp, #12]
 80131b8:	2101      	movs	r1, #1
 80131ba:	9102      	str	r1, [sp, #8]
 80131bc:	2100      	movs	r1, #0
 80131be:	9101      	str	r1, [sp, #4]
 80131c0:	2110      	movs	r1, #16
 80131c2:	9100      	str	r1, [sp, #0]
 80131c4:	2102      	movs	r1, #2
 80131c6:	f7fc ffb7 	bl	8010138 <aci_gatt_add_char>
 80131ca:	4603      	mov	r3, r0
 80131cc:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLatHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80131ce:	7dfb      	ldrb	r3, [r7, #23]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d033      	beq.n	801323c <SVCCTL_InitCustomSvc+0x2dc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LAT, error code: 0x%x \n\r", ret);
 80131d4:	4809      	ldr	r0, [pc, #36]	; (80131fc <SVCCTL_InitCustomSvc+0x29c>)
 80131d6:	f7fe fa83 	bl	80116e0 <DbgTraceGetFileName>
 80131da:	4601      	mov	r1, r0
 80131dc:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80131e0:	4a07      	ldr	r2, [pc, #28]	; (8013200 <SVCCTL_InitCustomSvc+0x2a0>)
 80131e2:	4808      	ldr	r0, [pc, #32]	; (8013204 <SVCCTL_InitCustomSvc+0x2a4>)
 80131e4:	f001 fbae 	bl	8014944 <iprintf>
 80131e8:	7dfb      	ldrb	r3, [r7, #23]
 80131ea:	4619      	mov	r1, r3
 80131ec:	4812      	ldr	r0, [pc, #72]	; (8013238 <SVCCTL_InitCustomSvc+0x2d8>)
 80131ee:	f001 fba9 	bl	8014944 <iprintf>
 80131f2:	e030      	b.n	8013256 <SVCCTL_InitCustomSvc+0x2f6>
 80131f4:	08012dd5 	.word	0x08012dd5
 80131f8:	20001478 	.word	0x20001478
 80131fc:	080182fc 	.word	0x080182fc
 8013200:	08018b0c 	.word	0x08018b0c
 8013204:	0801831c 	.word	0x0801831c
 8013208:	08018330 	.word	0x08018330
 801320c:	08018374 	.word	0x08018374
 8013210:	20000236 	.word	0x20000236
 8013214:	2000147a 	.word	0x2000147a
 8013218:	080183a4 	.word	0x080183a4
 801321c:	080183e8 	.word	0x080183e8
 8013220:	20000237 	.word	0x20000237
 8013224:	2000147c 	.word	0x2000147c
 8013228:	08018418 	.word	0x08018418
 801322c:	0801845c 	.word	0x0801845c
 8013230:	20000238 	.word	0x20000238
 8013234:	2000147e 	.word	0x2000147e
 8013238:	08018490 	.word	0x08018490
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LAT \n\r");
 801323c:	4833      	ldr	r0, [pc, #204]	; (801330c <SVCCTL_InitCustomSvc+0x3ac>)
 801323e:	f7fe fa4f 	bl	80116e0 <DbgTraceGetFileName>
 8013242:	4601      	mov	r1, r0
 8013244:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8013248:	4a31      	ldr	r2, [pc, #196]	; (8013310 <SVCCTL_InitCustomSvc+0x3b0>)
 801324a:	4832      	ldr	r0, [pc, #200]	; (8013314 <SVCCTL_InitCustomSvc+0x3b4>)
 801324c:	f001 fb7a 	bl	8014944 <iprintf>
 8013250:	4831      	ldr	r0, [pc, #196]	; (8013318 <SVCCTL_InitCustomSvc+0x3b8>)
 8013252:	f001 fb77 	bl	8014944 <iprintf>
  }
  /**
   *  longitude
   */
  COPY_LONGITUDE_UUID(uuid.Char_UUID_128);
 8013256:	2319      	movs	r3, #25
 8013258:	713b      	strb	r3, [r7, #4]
 801325a:	23ed      	movs	r3, #237	; 0xed
 801325c:	717b      	strb	r3, [r7, #5]
 801325e:	2382      	movs	r3, #130	; 0x82
 8013260:	71bb      	strb	r3, [r7, #6]
 8013262:	23ae      	movs	r3, #174	; 0xae
 8013264:	71fb      	strb	r3, [r7, #7]
 8013266:	23ed      	movs	r3, #237	; 0xed
 8013268:	723b      	strb	r3, [r7, #8]
 801326a:	2321      	movs	r3, #33	; 0x21
 801326c:	727b      	strb	r3, [r7, #9]
 801326e:	234c      	movs	r3, #76	; 0x4c
 8013270:	72bb      	strb	r3, [r7, #10]
 8013272:	239d      	movs	r3, #157	; 0x9d
 8013274:	72fb      	strb	r3, [r7, #11]
 8013276:	2341      	movs	r3, #65	; 0x41
 8013278:	733b      	strb	r3, [r7, #12]
 801327a:	2345      	movs	r3, #69	; 0x45
 801327c:	737b      	strb	r3, [r7, #13]
 801327e:	2322      	movs	r3, #34	; 0x22
 8013280:	73bb      	strb	r3, [r7, #14]
 8013282:	238e      	movs	r3, #142	; 0x8e
 8013284:	73fb      	strb	r3, [r7, #15]
 8013286:	2378      	movs	r3, #120	; 0x78
 8013288:	743b      	strb	r3, [r7, #16]
 801328a:	2356      	movs	r3, #86	; 0x56
 801328c:	747b      	strb	r3, [r7, #17]
 801328e:	2300      	movs	r3, #0
 8013290:	74bb      	strb	r3, [r7, #18]
 8013292:	2300      	movs	r3, #0
 8013294:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8013296:	4b21      	ldr	r3, [pc, #132]	; (801331c <SVCCTL_InitCustomSvc+0x3bc>)
 8013298:	8818      	ldrh	r0, [r3, #0]
 801329a:	4b21      	ldr	r3, [pc, #132]	; (8013320 <SVCCTL_InitCustomSvc+0x3c0>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	1d3a      	adds	r2, r7, #4
 80132a2:	4920      	ldr	r1, [pc, #128]	; (8013324 <SVCCTL_InitCustomSvc+0x3c4>)
 80132a4:	9105      	str	r1, [sp, #20]
 80132a6:	2101      	movs	r1, #1
 80132a8:	9104      	str	r1, [sp, #16]
 80132aa:	2110      	movs	r1, #16
 80132ac:	9103      	str	r1, [sp, #12]
 80132ae:	2101      	movs	r1, #1
 80132b0:	9102      	str	r1, [sp, #8]
 80132b2:	2100      	movs	r1, #0
 80132b4:	9101      	str	r1, [sp, #4]
 80132b6:	2110      	movs	r1, #16
 80132b8:	9100      	str	r1, [sp, #0]
 80132ba:	2102      	movs	r1, #2
 80132bc:	f7fc ff3c 	bl	8010138 <aci_gatt_add_char>
 80132c0:	4603      	mov	r3, r0
 80132c2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLongHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80132c4:	7dfb      	ldrb	r3, [r7, #23]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00f      	beq.n	80132ea <SVCCTL_InitCustomSvc+0x38a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LONG, error code: 0x%x \n\r", ret);
 80132ca:	4810      	ldr	r0, [pc, #64]	; (801330c <SVCCTL_InitCustomSvc+0x3ac>)
 80132cc:	f7fe fa08 	bl	80116e0 <DbgTraceGetFileName>
 80132d0:	4601      	mov	r1, r0
 80132d2:	f240 2301 	movw	r3, #513	; 0x201
 80132d6:	4a0e      	ldr	r2, [pc, #56]	; (8013310 <SVCCTL_InitCustomSvc+0x3b0>)
 80132d8:	480e      	ldr	r0, [pc, #56]	; (8013314 <SVCCTL_InitCustomSvc+0x3b4>)
 80132da:	f001 fb33 	bl	8014944 <iprintf>
 80132de:	7dfb      	ldrb	r3, [r7, #23]
 80132e0:	4619      	mov	r1, r3
 80132e2:	4811      	ldr	r0, [pc, #68]	; (8013328 <SVCCTL_InitCustomSvc+0x3c8>)
 80132e4:	f001 fb2e 	bl	8014944 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80132e8:	e00d      	b.n	8013306 <SVCCTL_InitCustomSvc+0x3a6>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LONG \n\r");
 80132ea:	4808      	ldr	r0, [pc, #32]	; (801330c <SVCCTL_InitCustomSvc+0x3ac>)
 80132ec:	f7fe f9f8 	bl	80116e0 <DbgTraceGetFileName>
 80132f0:	4601      	mov	r1, r0
 80132f2:	f240 2305 	movw	r3, #517	; 0x205
 80132f6:	4a06      	ldr	r2, [pc, #24]	; (8013310 <SVCCTL_InitCustomSvc+0x3b0>)
 80132f8:	4806      	ldr	r0, [pc, #24]	; (8013314 <SVCCTL_InitCustomSvc+0x3b4>)
 80132fa:	f001 fb23 	bl	8014944 <iprintf>
 80132fe:	480b      	ldr	r0, [pc, #44]	; (801332c <SVCCTL_InitCustomSvc+0x3cc>)
 8013300:	f001 fb20 	bl	8014944 <iprintf>
  return;
 8013304:	bf00      	nop
}
 8013306:	3718      	adds	r7, #24
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	080182fc 	.word	0x080182fc
 8013310:	08018b0c 	.word	0x08018b0c
 8013314:	0801831c 	.word	0x0801831c
 8013318:	080184d4 	.word	0x080184d4
 801331c:	20001478 	.word	0x20001478
 8013320:	20000239 	.word	0x20000239
 8013324:	20001480 	.word	0x20001480
 8013328:	08018504 	.word	0x08018504
 801332c:	08018548 	.word	0x08018548

08013330 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b086      	sub	sp, #24
 8013334:	af02      	add	r7, sp, #8
 8013336:	4603      	mov	r3, r0
 8013338:	6039      	str	r1, [r7, #0]
 801333a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801333c:	2392      	movs	r3, #146	; 0x92
 801333e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8013340:	79fb      	ldrb	r3, [r7, #7]
 8013342:	2b03      	cmp	r3, #3
 8013344:	f200 8155 	bhi.w	80135f2 <Custom_STM_App_Update_Char+0x2c2>
 8013348:	a201      	add	r2, pc, #4	; (adr r2, 8013350 <Custom_STM_App_Update_Char+0x20>)
 801334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801334e:	bf00      	nop
 8013350:	08013361 	.word	0x08013361
 8013354:	080134d9 	.word	0x080134d9
 8013358:	08013537 	.word	0x08013537
 801335c:	08013595 	.word	0x08013595
  {

    case CUSTOM_STM_VIT:
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 8013360:	4ba7      	ldr	r3, [pc, #668]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 8013362:	8818      	ldrh	r0, [r3, #0]
 8013364:	4ba6      	ldr	r3, [pc, #664]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 8013366:	8859      	ldrh	r1, [r3, #2]
 8013368:	4ba6      	ldr	r3, [pc, #664]	; (8013604 <Custom_STM_App_Update_Char+0x2d4>)
 801336a:	781a      	ldrb	r2, [r3, #0]
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	4613      	mov	r3, r2
 8013372:	2200      	movs	r2, #0
 8013374:	f7fc ffe8 	bl	8010348 <aci_gatt_update_char_value>
 8013378:	4603      	mov	r3, r0
 801337a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomVitHdle,
                                       0, /* charValOffset */
                                       SizeVit, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801337c:	7bfb      	ldrb	r3, [r7, #15]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d00f      	beq.n	80133a2 <Custom_STM_App_Update_Char+0x72>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value VIT command, result : 0x%x \n\r", ret);
 8013382:	48a1      	ldr	r0, [pc, #644]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 8013384:	f7fe f9ac 	bl	80116e0 <DbgTraceGetFileName>
 8013388:	4601      	mov	r1, r0
 801338a:	f240 2327 	movw	r3, #551	; 0x227
 801338e:	4a9f      	ldr	r2, [pc, #636]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 8013390:	489f      	ldr	r0, [pc, #636]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 8013392:	f001 fad7 	bl	8014944 <iprintf>
 8013396:	7bfb      	ldrb	r3, [r7, #15]
 8013398:	4619      	mov	r1, r3
 801339a:	489e      	ldr	r0, [pc, #632]	; (8013614 <Custom_STM_App_Update_Char+0x2e4>)
 801339c:	f001 fad2 	bl	8014944 <iprintf>
 80133a0:	e00c      	b.n	80133bc <Custom_STM_App_Update_Char+0x8c>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value VIT command\n\r");
 80133a2:	4899      	ldr	r0, [pc, #612]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 80133a4:	f7fe f99c 	bl	80116e0 <DbgTraceGetFileName>
 80133a8:	4601      	mov	r1, r0
 80133aa:	f240 232b 	movw	r3, #555	; 0x22b
 80133ae:	4a97      	ldr	r2, [pc, #604]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 80133b0:	4897      	ldr	r0, [pc, #604]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 80133b2:	f001 fac7 	bl	8014944 <iprintf>
 80133b6:	4898      	ldr	r0, [pc, #608]	; (8013618 <Custom_STM_App_Update_Char+0x2e8>)
 80133b8:	f001 fac4 	bl	8014944 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/
      // +BCH
      if(pPayload[0] == 0x00) {
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d10f      	bne.n	80133e4 <Custom_STM_App_Update_Char+0xb4>
    	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80133c4:	2200      	movs	r2, #0
 80133c6:	2120      	movs	r1, #32
 80133c8:	4894      	ldr	r0, [pc, #592]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 80133ca:	f7f8 f931 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80133ce:	2200      	movs	r2, #0
 80133d0:	2101      	movs	r1, #1
 80133d2:	4892      	ldr	r0, [pc, #584]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 80133d4:	f7f8 f92c 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80133d8:	2200      	movs	r2, #0
 80133da:	2102      	movs	r1, #2
 80133dc:	488f      	ldr	r0, [pc, #572]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 80133de:	f7f8 f927 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	  }
	  else
		  APP_DBG_MSG("\r\n\r** LED VALUE INCORRECT \n");
      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 80133e2:	e107      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
      else if(pPayload[0] == 0x01) {
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d11f      	bne.n	801342c <Custom_STM_App_Update_Char+0xfc>
			  APP_DBG_MSG("\r\n\r** LED VALUE g %d \n",pPayload[0]);
 80133ec:	4886      	ldr	r0, [pc, #536]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 80133ee:	f7fe f977 	bl	80116e0 <DbgTraceGetFileName>
 80133f2:	4601      	mov	r1, r0
 80133f4:	f240 2335 	movw	r3, #565	; 0x235
 80133f8:	4a84      	ldr	r2, [pc, #528]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 80133fa:	4885      	ldr	r0, [pc, #532]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 80133fc:	f001 faa2 	bl	8014944 <iprintf>
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	4619      	mov	r1, r3
 8013406:	4886      	ldr	r0, [pc, #536]	; (8013620 <Custom_STM_App_Update_Char+0x2f0>)
 8013408:	f001 fa9c 	bl	8014944 <iprintf>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 801340c:	2201      	movs	r2, #1
 801340e:	2120      	movs	r1, #32
 8013410:	4882      	ldr	r0, [pc, #520]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 8013412:	f7f8 f90d 	bl	800b630 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8013416:	2200      	movs	r2, #0
 8013418:	2101      	movs	r1, #1
 801341a:	4880      	ldr	r0, [pc, #512]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 801341c:	f7f8 f908 	bl	800b630 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8013420:	2200      	movs	r2, #0
 8013422:	2102      	movs	r1, #2
 8013424:	487d      	ldr	r0, [pc, #500]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 8013426:	f7f8 f903 	bl	800b630 <HAL_GPIO_WritePin>
      break;
 801342a:	e0e3      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
	  else if(pPayload[0] == 0x02) {
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	2b02      	cmp	r3, #2
 8013432:	d11f      	bne.n	8013474 <Custom_STM_App_Update_Char+0x144>
		  APP_DBG_MSG("\r\n\r** LED VALUE %d r \n",pPayload[0]);
 8013434:	4874      	ldr	r0, [pc, #464]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 8013436:	f7fe f953 	bl	80116e0 <DbgTraceGetFileName>
 801343a:	4601      	mov	r1, r0
 801343c:	f240 233b 	movw	r3, #571	; 0x23b
 8013440:	4a72      	ldr	r2, [pc, #456]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 8013442:	4873      	ldr	r0, [pc, #460]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 8013444:	f001 fa7e 	bl	8014944 <iprintf>
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	4619      	mov	r1, r3
 801344e:	4875      	ldr	r0, [pc, #468]	; (8013624 <Custom_STM_App_Update_Char+0x2f4>)
 8013450:	f001 fa78 	bl	8014944 <iprintf>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8013454:	2200      	movs	r2, #0
 8013456:	2120      	movs	r1, #32
 8013458:	4870      	ldr	r0, [pc, #448]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 801345a:	f7f8 f8e9 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 801345e:	2201      	movs	r2, #1
 8013460:	2101      	movs	r1, #1
 8013462:	486e      	ldr	r0, [pc, #440]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 8013464:	f7f8 f8e4 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8013468:	2200      	movs	r2, #0
 801346a:	2102      	movs	r1, #2
 801346c:	486b      	ldr	r0, [pc, #428]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 801346e:	f7f8 f8df 	bl	800b630 <HAL_GPIO_WritePin>
      break;
 8013472:	e0bf      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
	  else if(pPayload[0] == 0x03) {
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	2b03      	cmp	r3, #3
 801347a:	d11f      	bne.n	80134bc <Custom_STM_App_Update_Char+0x18c>
		  APP_DBG_MSG("\r\n\r** LED VALUE b %d \n",pPayload[0]);
 801347c:	4862      	ldr	r0, [pc, #392]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 801347e:	f7fe f92f 	bl	80116e0 <DbgTraceGetFileName>
 8013482:	4601      	mov	r1, r0
 8013484:	f240 2341 	movw	r3, #577	; 0x241
 8013488:	4a60      	ldr	r2, [pc, #384]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 801348a:	4861      	ldr	r0, [pc, #388]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 801348c:	f001 fa5a 	bl	8014944 <iprintf>
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	4619      	mov	r1, r3
 8013496:	4864      	ldr	r0, [pc, #400]	; (8013628 <Custom_STM_App_Update_Char+0x2f8>)
 8013498:	f001 fa54 	bl	8014944 <iprintf>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 801349c:	2200      	movs	r2, #0
 801349e:	2120      	movs	r1, #32
 80134a0:	485e      	ldr	r0, [pc, #376]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 80134a2:	f7f8 f8c5 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80134a6:	2200      	movs	r2, #0
 80134a8:	2101      	movs	r1, #1
 80134aa:	485c      	ldr	r0, [pc, #368]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 80134ac:	f7f8 f8c0 	bl	800b630 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80134b0:	2201      	movs	r2, #1
 80134b2:	2102      	movs	r1, #2
 80134b4:	4859      	ldr	r0, [pc, #356]	; (801361c <Custom_STM_App_Update_Char+0x2ec>)
 80134b6:	f7f8 f8bb 	bl	800b630 <HAL_GPIO_WritePin>
      break;
 80134ba:	e09b      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
		  APP_DBG_MSG("\r\n\r** LED VALUE INCORRECT \n");
 80134bc:	4852      	ldr	r0, [pc, #328]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 80134be:	f7fe f90f 	bl	80116e0 <DbgTraceGetFileName>
 80134c2:	4601      	mov	r1, r0
 80134c4:	f240 2347 	movw	r3, #583	; 0x247
 80134c8:	4a50      	ldr	r2, [pc, #320]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 80134ca:	4851      	ldr	r0, [pc, #324]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 80134cc:	f001 fa3a 	bl	8014944 <iprintf>
 80134d0:	4856      	ldr	r0, [pc, #344]	; (801362c <Custom_STM_App_Update_Char+0x2fc>)
 80134d2:	f001 fad3 	bl	8014a7c <puts>
      break;
 80134d6:	e08d      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>

    case CUSTOM_STM_TEMP:
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 80134d8:	4b49      	ldr	r3, [pc, #292]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 80134da:	8818      	ldrh	r0, [r3, #0]
 80134dc:	4b48      	ldr	r3, [pc, #288]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 80134de:	8899      	ldrh	r1, [r3, #4]
 80134e0:	4b53      	ldr	r3, [pc, #332]	; (8013630 <Custom_STM_App_Update_Char+0x300>)
 80134e2:	781a      	ldrb	r2, [r3, #0]
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	4613      	mov	r3, r2
 80134ea:	2200      	movs	r2, #0
 80134ec:	f7fc ff2c 	bl	8010348 <aci_gatt_update_char_value>
 80134f0:	4603      	mov	r3, r0
 80134f2:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomTempHdle,
                                       0, /* charValOffset */
                                       SizeTemp, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80134f4:	7bfb      	ldrb	r3, [r7, #15]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d00f      	beq.n	801351a <Custom_STM_App_Update_Char+0x1ea>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value TEMP command, result : 0x%x \n\r", ret);
 80134fa:	4843      	ldr	r0, [pc, #268]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 80134fc:	f7fe f8f0 	bl	80116e0 <DbgTraceGetFileName>
 8013500:	4601      	mov	r1, r0
 8013502:	f240 2353 	movw	r3, #595	; 0x253
 8013506:	4a41      	ldr	r2, [pc, #260]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 8013508:	4841      	ldr	r0, [pc, #260]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 801350a:	f001 fa1b 	bl	8014944 <iprintf>
 801350e:	7bfb      	ldrb	r3, [r7, #15]
 8013510:	4619      	mov	r1, r3
 8013512:	4848      	ldr	r0, [pc, #288]	; (8013634 <Custom_STM_App_Update_Char+0x304>)
 8013514:	f001 fa16 	bl	8014944 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMP command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8013518:	e06c      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMP command\n\r");
 801351a:	483b      	ldr	r0, [pc, #236]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 801351c:	f7fe f8e0 	bl	80116e0 <DbgTraceGetFileName>
 8013520:	4601      	mov	r1, r0
 8013522:	f240 2357 	movw	r3, #599	; 0x257
 8013526:	4a39      	ldr	r2, [pc, #228]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 8013528:	4839      	ldr	r0, [pc, #228]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 801352a:	f001 fa0b 	bl	8014944 <iprintf>
 801352e:	4842      	ldr	r0, [pc, #264]	; (8013638 <Custom_STM_App_Update_Char+0x308>)
 8013530:	f001 fa08 	bl	8014944 <iprintf>
      break;
 8013534:	e05e      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>

    case CUSTOM_STM_LAT:
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 8013536:	4b32      	ldr	r3, [pc, #200]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 8013538:	8818      	ldrh	r0, [r3, #0]
 801353a:	4b31      	ldr	r3, [pc, #196]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 801353c:	88d9      	ldrh	r1, [r3, #6]
 801353e:	4b3f      	ldr	r3, [pc, #252]	; (801363c <Custom_STM_App_Update_Char+0x30c>)
 8013540:	781a      	ldrb	r2, [r3, #0]
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	9300      	str	r3, [sp, #0]
 8013546:	4613      	mov	r3, r2
 8013548:	2200      	movs	r2, #0
 801354a:	f7fc fefd 	bl	8010348 <aci_gatt_update_char_value>
 801354e:	4603      	mov	r3, r0
 8013550:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLatHdle,
                                       0, /* charValOffset */
                                       SizeLat, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8013552:	7bfb      	ldrb	r3, [r7, #15]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d00f      	beq.n	8013578 <Custom_STM_App_Update_Char+0x248>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LAT command, result : 0x%x \n\r", ret);
 8013558:	482b      	ldr	r0, [pc, #172]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 801355a:	f7fe f8c1 	bl	80116e0 <DbgTraceGetFileName>
 801355e:	4601      	mov	r1, r0
 8013560:	f240 2366 	movw	r3, #614	; 0x266
 8013564:	4a29      	ldr	r2, [pc, #164]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 8013566:	482a      	ldr	r0, [pc, #168]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 8013568:	f001 f9ec 	bl	8014944 <iprintf>
 801356c:	7bfb      	ldrb	r3, [r7, #15]
 801356e:	4619      	mov	r1, r3
 8013570:	4833      	ldr	r0, [pc, #204]	; (8013640 <Custom_STM_App_Update_Char+0x310>)
 8013572:	f001 f9e7 	bl	8014944 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LAT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8013576:	e03d      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LAT command\n\r");
 8013578:	4823      	ldr	r0, [pc, #140]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 801357a:	f7fe f8b1 	bl	80116e0 <DbgTraceGetFileName>
 801357e:	4601      	mov	r1, r0
 8013580:	f240 236a 	movw	r3, #618	; 0x26a
 8013584:	4a21      	ldr	r2, [pc, #132]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 8013586:	4822      	ldr	r0, [pc, #136]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 8013588:	f001 f9dc 	bl	8014944 <iprintf>
 801358c:	482d      	ldr	r0, [pc, #180]	; (8013644 <Custom_STM_App_Update_Char+0x314>)
 801358e:	f001 f9d9 	bl	8014944 <iprintf>
      break;
 8013592:	e02f      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>

    case CUSTOM_STM_LONG:
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 8013594:	4b1a      	ldr	r3, [pc, #104]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 8013596:	8818      	ldrh	r0, [r3, #0]
 8013598:	4b19      	ldr	r3, [pc, #100]	; (8013600 <Custom_STM_App_Update_Char+0x2d0>)
 801359a:	8919      	ldrh	r1, [r3, #8]
 801359c:	4b2a      	ldr	r3, [pc, #168]	; (8013648 <Custom_STM_App_Update_Char+0x318>)
 801359e:	781a      	ldrb	r2, [r3, #0]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	9300      	str	r3, [sp, #0]
 80135a4:	4613      	mov	r3, r2
 80135a6:	2200      	movs	r2, #0
 80135a8:	f7fc fece 	bl	8010348 <aci_gatt_update_char_value>
 80135ac:	4603      	mov	r3, r0
 80135ae:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLongHdle,
                                       0, /* charValOffset */
                                       SizeLong, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80135b0:	7bfb      	ldrb	r3, [r7, #15]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d00f      	beq.n	80135d6 <Custom_STM_App_Update_Char+0x2a6>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LONG command, result : 0x%x \n\r", ret);
 80135b6:	4814      	ldr	r0, [pc, #80]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 80135b8:	f7fe f892 	bl	80116e0 <DbgTraceGetFileName>
 80135bc:	4601      	mov	r1, r0
 80135be:	f240 2379 	movw	r3, #633	; 0x279
 80135c2:	4a12      	ldr	r2, [pc, #72]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 80135c4:	4812      	ldr	r0, [pc, #72]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 80135c6:	f001 f9bd 	bl	8014944 <iprintf>
 80135ca:	7bfb      	ldrb	r3, [r7, #15]
 80135cc:	4619      	mov	r1, r3
 80135ce:	481f      	ldr	r0, [pc, #124]	; (801364c <Custom_STM_App_Update_Char+0x31c>)
 80135d0:	f001 f9b8 	bl	8014944 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LONG command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 80135d4:	e00e      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LONG command\n\r");
 80135d6:	480c      	ldr	r0, [pc, #48]	; (8013608 <Custom_STM_App_Update_Char+0x2d8>)
 80135d8:	f7fe f882 	bl	80116e0 <DbgTraceGetFileName>
 80135dc:	4601      	mov	r1, r0
 80135de:	f240 237d 	movw	r3, #637	; 0x27d
 80135e2:	4a0a      	ldr	r2, [pc, #40]	; (801360c <Custom_STM_App_Update_Char+0x2dc>)
 80135e4:	480a      	ldr	r0, [pc, #40]	; (8013610 <Custom_STM_App_Update_Char+0x2e0>)
 80135e6:	f001 f9ad 	bl	8014944 <iprintf>
 80135ea:	4819      	ldr	r0, [pc, #100]	; (8013650 <Custom_STM_App_Update_Char+0x320>)
 80135ec:	f001 f9aa 	bl	8014944 <iprintf>
      break;
 80135f0:	e000      	b.n	80135f4 <Custom_STM_App_Update_Char+0x2c4>

    default:
      break;
 80135f2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	20001478 	.word	0x20001478
 8013604:	20000236 	.word	0x20000236
 8013608:	080182fc 	.word	0x080182fc
 801360c:	08018b24 	.word	0x08018b24
 8013610:	0801831c 	.word	0x0801831c
 8013614:	0801857c 	.word	0x0801857c
 8013618:	080185c0 	.word	0x080185c0
 801361c:	48000400 	.word	0x48000400
 8013620:	080185f4 	.word	0x080185f4
 8013624:	0801860c 	.word	0x0801860c
 8013628:	08018624 	.word	0x08018624
 801362c:	0801863c 	.word	0x0801863c
 8013630:	20000237 	.word	0x20000237
 8013634:	08018658 	.word	0x08018658
 8013638:	080186a0 	.word	0x080186a0
 801363c:	20000238 	.word	0x20000238
 8013640:	080186d8 	.word	0x080186d8
 8013644:	0801871c 	.word	0x0801871c
 8013648:	20000239 	.word	0x20000239
 801364c:	08018750 	.word	0x08018750
 8013650:	08018798 	.word	0x08018798

08013654 <LL_PWR_EnableBootC2>:
{
 8013654:	b480      	push	{r7}
 8013656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8013658:	4b05      	ldr	r3, [pc, #20]	; (8013670 <LL_PWR_EnableBootC2+0x1c>)
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	4a04      	ldr	r2, [pc, #16]	; (8013670 <LL_PWR_EnableBootC2+0x1c>)
 801365e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013662:	60d3      	str	r3, [r2, #12]
}
 8013664:	bf00      	nop
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	58000400 	.word	0x58000400

08013674 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8013674:	b480      	push	{r7}
 8013676:	b083      	sub	sp, #12
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801367c:	4b06      	ldr	r3, [pc, #24]	; (8013698 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801367e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8013682:	4905      	ldr	r1, [pc, #20]	; (8013698 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	4313      	orrs	r3, r2
 8013688:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 801368c:	bf00      	nop
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr
 8013698:	58000800 	.word	0x58000800

0801369c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 801369c:	b480      	push	{r7}
 801369e:	b083      	sub	sp, #12
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80136a4:	4b05      	ldr	r3, [pc, #20]	; (80136bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80136a6:	6a1a      	ldr	r2, [r3, #32]
 80136a8:	4904      	ldr	r1, [pc, #16]	; (80136bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	4313      	orrs	r3, r2
 80136ae:	620b      	str	r3, [r1, #32]
}
 80136b0:	bf00      	nop
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	58000800 	.word	0x58000800

080136c0 <LL_AHB3_GRP1_EnableClock>:
{
 80136c0:	b480      	push	{r7}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80136c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4313      	orrs	r3, r2
 80136d6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80136d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4013      	ands	r3, r2
 80136e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80136e4:	68fb      	ldr	r3, [r7, #12]
}
 80136e6:	bf00      	nop
 80136e8:	3714      	adds	r7, #20
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr

080136f2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80136f2:	b480      	push	{r7}
 80136f4:	b085      	sub	sp, #20
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80136fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8013702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	4313      	orrs	r3, r2
 801370a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801370e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013712:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4013      	ands	r3, r2
 801371a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801371c:	68fb      	ldr	r3, [r7, #12]
}
 801371e:	bf00      	nop
 8013720:	3714      	adds	r7, #20
 8013722:	46bd      	mov	sp, r7
 8013724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013728:	4770      	bx	lr

0801372a <LL_C1_IPCC_EnableIT_TXF>:
{
 801372a:	b480      	push	{r7}
 801372c:	b083      	sub	sp, #12
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	601a      	str	r2, [r3, #0]
}
 801373e:	bf00      	nop
 8013740:	370c      	adds	r7, #12
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr

0801374a <LL_C1_IPCC_EnableIT_RXO>:
{
 801374a:	b480      	push	{r7}
 801374c:	b083      	sub	sp, #12
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	f043 0201 	orr.w	r2, r3, #1
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	601a      	str	r2, [r3, #0]
}
 801375e:	bf00      	nop
 8013760:	370c      	adds	r7, #12
 8013762:	46bd      	mov	sp, r7
 8013764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013768:	4770      	bx	lr

0801376a <LL_C1_IPCC_EnableTransmitChannel>:
{
 801376a:	b480      	push	{r7}
 801376c:	b083      	sub	sp, #12
 801376e:	af00      	add	r7, sp, #0
 8013770:	6078      	str	r0, [r7, #4]
 8013772:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	041b      	lsls	r3, r3, #16
 801377c:	43db      	mvns	r3, r3
 801377e:	401a      	ands	r2, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	605a      	str	r2, [r3, #4]
}
 8013784:	bf00      	nop
 8013786:	370c      	adds	r7, #12
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr

08013790 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	685a      	ldr	r2, [r3, #4]
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	041b      	lsls	r3, r3, #16
 80137a2:	431a      	orrs	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	605a      	str	r2, [r3, #4]
}
 80137a8:	bf00      	nop
 80137aa:	370c      	adds	r7, #12
 80137ac:	46bd      	mov	sp, r7
 80137ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b2:	4770      	bx	lr

080137b4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80137b4:	b480      	push	{r7}
 80137b6:	b083      	sub	sp, #12
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	685a      	ldr	r2, [r3, #4]
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	43db      	mvns	r3, r3
 80137c6:	401a      	ands	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	605a      	str	r2, [r3, #4]
}
 80137cc:	bf00      	nop
 80137ce:	370c      	adds	r7, #12
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	683a      	ldr	r2, [r7, #0]
 80137e6:	609a      	str	r2, [r3, #8]
}
 80137e8:	bf00      	nop
 80137ea:	370c      	adds	r7, #12
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr

080137f4 <LL_C1_IPCC_SetFlag_CHx>:
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	041a      	lsls	r2, r3, #16
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	609a      	str	r2, [r3, #8]
}
 8013806:	bf00      	nop
 8013808:	370c      	adds	r7, #12
 801380a:	46bd      	mov	sp, r7
 801380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013810:	4770      	bx	lr

08013812 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8013812:	b480      	push	{r7}
 8013814:	b083      	sub	sp, #12
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
 801381a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	68da      	ldr	r2, [r3, #12]
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	4013      	ands	r3, r2
 8013824:	683a      	ldr	r2, [r7, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d101      	bne.n	801382e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801382a:	2301      	movs	r3, #1
 801382c:	e000      	b.n	8013830 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801382e:	2300      	movs	r3, #0
}
 8013830:	4618      	mov	r0, r3
 8013832:	370c      	adds	r7, #12
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	69da      	ldr	r2, [r3, #28]
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	4013      	ands	r3, r2
 801384e:	683a      	ldr	r2, [r7, #0]
 8013850:	429a      	cmp	r2, r3
 8013852:	d101      	bne.n	8013858 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8013854:	2301      	movs	r3, #1
 8013856:	e000      	b.n	801385a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8013858:	2300      	movs	r3, #0
}
 801385a:	4618      	mov	r0, r3
 801385c:	370c      	adds	r7, #12
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr
	...

08013868 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801386c:	2102      	movs	r1, #2
 801386e:	4819      	ldr	r0, [pc, #100]	; (80138d4 <HW_IPCC_Rx_Handler+0x6c>)
 8013870:	f7ff ffe4 	bl	801383c <LL_C2_IPCC_IsActiveFlag_CHx>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	d009      	beq.n	801388e <HW_IPCC_Rx_Handler+0x26>
 801387a:	4b16      	ldr	r3, [pc, #88]	; (80138d4 <HW_IPCC_Rx_Handler+0x6c>)
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	43db      	mvns	r3, r3
 8013880:	f003 0302 	and.w	r3, r3, #2
 8013884:	2b00      	cmp	r3, #0
 8013886:	d002      	beq.n	801388e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8013888:	f000 f8da 	bl	8013a40 <HW_IPCC_SYS_EvtHandler>
 801388c:	e01f      	b.n	80138ce <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801388e:	2101      	movs	r1, #1
 8013890:	4810      	ldr	r0, [pc, #64]	; (80138d4 <HW_IPCC_Rx_Handler+0x6c>)
 8013892:	f7ff ffd3 	bl	801383c <LL_C2_IPCC_IsActiveFlag_CHx>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d008      	beq.n	80138ae <HW_IPCC_Rx_Handler+0x46>
 801389c:	4b0d      	ldr	r3, [pc, #52]	; (80138d4 <HW_IPCC_Rx_Handler+0x6c>)
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80138a8:	f000 f88e 	bl	80139c8 <HW_IPCC_BLE_EvtHandler>
 80138ac:	e00f      	b.n	80138ce <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80138ae:	2108      	movs	r1, #8
 80138b0:	4808      	ldr	r0, [pc, #32]	; (80138d4 <HW_IPCC_Rx_Handler+0x6c>)
 80138b2:	f7ff ffc3 	bl	801383c <LL_C2_IPCC_IsActiveFlag_CHx>
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d009      	beq.n	80138d0 <HW_IPCC_Rx_Handler+0x68>
 80138bc:	4b05      	ldr	r3, [pc, #20]	; (80138d4 <HW_IPCC_Rx_Handler+0x6c>)
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	43db      	mvns	r3, r3
 80138c2:	f003 0308 	and.w	r3, r3, #8
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d002      	beq.n	80138d0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80138ca:	f000 f905 	bl	8013ad8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80138ce:	bf00      	nop
 80138d0:	bf00      	nop
}
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	58000c00 	.word	0x58000c00

080138d8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80138dc:	2102      	movs	r1, #2
 80138de:	481a      	ldr	r0, [pc, #104]	; (8013948 <HW_IPCC_Tx_Handler+0x70>)
 80138e0:	f7ff ff97 	bl	8013812 <LL_C1_IPCC_IsActiveFlag_CHx>
 80138e4:	4603      	mov	r3, r0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d109      	bne.n	80138fe <HW_IPCC_Tx_Handler+0x26>
 80138ea:	4b17      	ldr	r3, [pc, #92]	; (8013948 <HW_IPCC_Tx_Handler+0x70>)
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	43db      	mvns	r3, r3
 80138f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d002      	beq.n	80138fe <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80138f8:	f000 f896 	bl	8013a28 <HW_IPCC_SYS_CmdEvtHandler>
 80138fc:	e020      	b.n	8013940 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80138fe:	2108      	movs	r1, #8
 8013900:	4811      	ldr	r0, [pc, #68]	; (8013948 <HW_IPCC_Tx_Handler+0x70>)
 8013902:	f7ff ff86 	bl	8013812 <LL_C1_IPCC_IsActiveFlag_CHx>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d109      	bne.n	8013920 <HW_IPCC_Tx_Handler+0x48>
 801390c:	4b0e      	ldr	r3, [pc, #56]	; (8013948 <HW_IPCC_Tx_Handler+0x70>)
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	43db      	mvns	r3, r3
 8013912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013916:	2b00      	cmp	r3, #0
 8013918:	d002      	beq.n	8013920 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 801391a:	f000 f8bf 	bl	8013a9c <HW_IPCC_MM_FreeBufHandler>
 801391e:	e00f      	b.n	8013940 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8013920:	2120      	movs	r1, #32
 8013922:	4809      	ldr	r0, [pc, #36]	; (8013948 <HW_IPCC_Tx_Handler+0x70>)
 8013924:	f7ff ff75 	bl	8013812 <LL_C1_IPCC_IsActiveFlag_CHx>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d109      	bne.n	8013942 <HW_IPCC_Tx_Handler+0x6a>
 801392e:	4b06      	ldr	r3, [pc, #24]	; (8013948 <HW_IPCC_Tx_Handler+0x70>)
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	43db      	mvns	r3, r3
 8013934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013938:	2b00      	cmp	r3, #0
 801393a:	d002      	beq.n	8013942 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801393c:	f000 f850 	bl	80139e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8013940:	bf00      	nop
 8013942:	bf00      	nop
}
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	58000c00 	.word	0x58000c00

0801394c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8013950:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8013954:	f7ff fecd 	bl	80136f2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8013958:	f44f 7000 	mov.w	r0, #512	; 0x200
 801395c:	f7ff fe9e 	bl	801369c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8013960:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013964:	f7ff fe86 	bl	8013674 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8013968:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801396a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801396c:	f7ff fe72 	bl	8013654 <LL_PWR_EnableBootC2>

  return;
 8013970:	bf00      	nop
}
 8013972:	bd80      	pop	{r7, pc}

08013974 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8013978:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801397c:	f7ff fea0 	bl	80136c0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8013980:	4806      	ldr	r0, [pc, #24]	; (801399c <HW_IPCC_Init+0x28>)
 8013982:	f7ff fee2 	bl	801374a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8013986:	4805      	ldr	r0, [pc, #20]	; (801399c <HW_IPCC_Init+0x28>)
 8013988:	f7ff fecf 	bl	801372a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801398c:	202c      	movs	r0, #44	; 0x2c
 801398e:	f7f7 fa00 	bl	800ad92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8013992:	202d      	movs	r0, #45	; 0x2d
 8013994:	f7f7 f9fd 	bl	800ad92 <HAL_NVIC_EnableIRQ>

  return;
 8013998:	bf00      	nop
}
 801399a:	bd80      	pop	{r7, pc}
 801399c:	58000c00 	.word	0x58000c00

080139a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80139a4:	2101      	movs	r1, #1
 80139a6:	4802      	ldr	r0, [pc, #8]	; (80139b0 <HW_IPCC_BLE_Init+0x10>)
 80139a8:	f7ff ff04 	bl	80137b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80139ac:	bf00      	nop
}
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	58000c00 	.word	0x58000c00

080139b4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80139b8:	2101      	movs	r1, #1
 80139ba:	4802      	ldr	r0, [pc, #8]	; (80139c4 <HW_IPCC_BLE_SendCmd+0x10>)
 80139bc:	f7ff ff1a 	bl	80137f4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80139c0:	bf00      	nop
}
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	58000c00 	.word	0x58000c00

080139c8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80139cc:	f7fd fcd0 	bl	8011370 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80139d0:	2101      	movs	r1, #1
 80139d2:	4802      	ldr	r0, [pc, #8]	; (80139dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80139d4:	f7ff ff00 	bl	80137d8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80139d8:	bf00      	nop
}
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	58000c00 	.word	0x58000c00

080139e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80139e4:	2120      	movs	r1, #32
 80139e6:	4803      	ldr	r0, [pc, #12]	; (80139f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80139e8:	f7ff fed2 	bl	8013790 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80139ec:	f7fd fcf0 	bl	80113d0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80139f0:	bf00      	nop
}
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	58000c00 	.word	0x58000c00

080139f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80139fc:	2102      	movs	r1, #2
 80139fe:	4802      	ldr	r0, [pc, #8]	; (8013a08 <HW_IPCC_SYS_Init+0x10>)
 8013a00:	f7ff fed8 	bl	80137b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8013a04:	bf00      	nop
}
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	58000c00 	.word	0x58000c00

08013a0c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8013a10:	2102      	movs	r1, #2
 8013a12:	4804      	ldr	r0, [pc, #16]	; (8013a24 <HW_IPCC_SYS_SendCmd+0x18>)
 8013a14:	f7ff feee 	bl	80137f4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8013a18:	2102      	movs	r1, #2
 8013a1a:	4802      	ldr	r0, [pc, #8]	; (8013a24 <HW_IPCC_SYS_SendCmd+0x18>)
 8013a1c:	f7ff fea5 	bl	801376a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8013a20:	bf00      	nop
}
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	58000c00 	.word	0x58000c00

08013a28 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8013a2c:	2102      	movs	r1, #2
 8013a2e:	4803      	ldr	r0, [pc, #12]	; (8013a3c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8013a30:	f7ff feae 	bl	8013790 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8013a34:	f7fd fd1c 	bl	8011470 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8013a38:	bf00      	nop
}
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	58000c00 	.word	0x58000c00

08013a40 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8013a44:	f7fd fd2a 	bl	801149c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8013a48:	2102      	movs	r1, #2
 8013a4a:	4802      	ldr	r0, [pc, #8]	; (8013a54 <HW_IPCC_SYS_EvtHandler+0x14>)
 8013a4c:	f7ff fec4 	bl	80137d8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8013a50:	bf00      	nop
}
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	58000c00 	.word	0x58000c00

08013a58 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8013a60:	2108      	movs	r1, #8
 8013a62:	480c      	ldr	r0, [pc, #48]	; (8013a94 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013a64:	f7ff fed5 	bl	8013812 <LL_C1_IPCC_IsActiveFlag_CHx>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d007      	beq.n	8013a7e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8013a6e:	4a0a      	ldr	r2, [pc, #40]	; (8013a98 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013a74:	2108      	movs	r1, #8
 8013a76:	4807      	ldr	r0, [pc, #28]	; (8013a94 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013a78:	f7ff fe77 	bl	801376a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8013a7c:	e006      	b.n	8013a8c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013a82:	2108      	movs	r1, #8
 8013a84:	4803      	ldr	r0, [pc, #12]	; (8013a94 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013a86:	f7ff feb5 	bl	80137f4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8013a8a:	bf00      	nop
}
 8013a8c:	3708      	adds	r7, #8
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	58000c00 	.word	0x58000c00
 8013a98:	20001484 	.word	0x20001484

08013a9c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013aa0:	2108      	movs	r1, #8
 8013aa2:	4806      	ldr	r0, [pc, #24]	; (8013abc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8013aa4:	f7ff fe74 	bl	8013790 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8013aa8:	4b05      	ldr	r3, [pc, #20]	; (8013ac0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013aae:	2108      	movs	r1, #8
 8013ab0:	4802      	ldr	r0, [pc, #8]	; (8013abc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8013ab2:	f7ff fe9f 	bl	80137f4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8013ab6:	bf00      	nop
}
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	58000c00 	.word	0x58000c00
 8013ac0:	20001484 	.word	0x20001484

08013ac4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8013ac8:	2108      	movs	r1, #8
 8013aca:	4802      	ldr	r0, [pc, #8]	; (8013ad4 <HW_IPCC_TRACES_Init+0x10>)
 8013acc:	f7ff fe72 	bl	80137b4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8013ad0:	bf00      	nop
}
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	58000c00 	.word	0x58000c00

08013ad8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8013adc:	f7fd fd86 	bl	80115ec <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8013ae0:	2108      	movs	r1, #8
 8013ae2:	4802      	ldr	r0, [pc, #8]	; (8013aec <HW_IPCC_TRACES_EvtHandler+0x14>)
 8013ae4:	f7ff fe78 	bl	80137d8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8013ae8:	bf00      	nop
}
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	58000c00 	.word	0x58000c00

08013af0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013af0:	b480      	push	{r7}
 8013af2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013af4:	4b05      	ldr	r3, [pc, #20]	; (8013b0c <UTIL_LPM_Init+0x1c>)
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013afa:	4b05      	ldr	r3, [pc, #20]	; (8013b10 <UTIL_LPM_Init+0x20>)
 8013afc:	2200      	movs	r2, #0
 8013afe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013b00:	bf00      	nop
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop
 8013b0c:	20001488 	.word	0x20001488
 8013b10:	2000148c 	.word	0x2000148c

08013b14 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013b14:	b480      	push	{r7}
 8013b16:	b087      	sub	sp, #28
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b20:	f3ef 8310 	mrs	r3, PRIMASK
 8013b24:	613b      	str	r3, [r7, #16]
  return(result);
 8013b26:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013b2a:	b672      	cpsid	i
}
 8013b2c:	bf00      	nop
  
  switch(state)
 8013b2e:	78fb      	ldrb	r3, [r7, #3]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d008      	beq.n	8013b46 <UTIL_LPM_SetOffMode+0x32>
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d10e      	bne.n	8013b56 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013b38:	4b0d      	ldr	r3, [pc, #52]	; (8013b70 <UTIL_LPM_SetOffMode+0x5c>)
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	4313      	orrs	r3, r2
 8013b40:	4a0b      	ldr	r2, [pc, #44]	; (8013b70 <UTIL_LPM_SetOffMode+0x5c>)
 8013b42:	6013      	str	r3, [r2, #0]
      break;
 8013b44:	e008      	b.n	8013b58 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	43da      	mvns	r2, r3
 8013b4a:	4b09      	ldr	r3, [pc, #36]	; (8013b70 <UTIL_LPM_SetOffMode+0x5c>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	4013      	ands	r3, r2
 8013b50:	4a07      	ldr	r2, [pc, #28]	; (8013b70 <UTIL_LPM_SetOffMode+0x5c>)
 8013b52:	6013      	str	r3, [r2, #0]
      break;
 8013b54:	e000      	b.n	8013b58 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013b56:	bf00      	nop
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f383 8810 	msr	PRIMASK, r3
}
 8013b62:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013b64:	bf00      	nop
 8013b66:	371c      	adds	r7, #28
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr
 8013b70:	2000148c 	.word	0x2000148c

08013b74 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b090      	sub	sp, #64	; 0x40
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8013b7c:	4b73      	ldr	r3, [pc, #460]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8013b82:	4b72      	ldr	r3, [pc, #456]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4013      	ands	r3, r2
 8013b8a:	4a70      	ldr	r2, [pc, #448]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013b8c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8013b8e:	4b70      	ldr	r3, [pc, #448]	; (8013d50 <UTIL_SEQ_Run+0x1dc>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013b94:	4b6f      	ldr	r3, [pc, #444]	; (8013d54 <UTIL_SEQ_Run+0x1e0>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013b9a:	4b6f      	ldr	r3, [pc, #444]	; (8013d58 <UTIL_SEQ_Run+0x1e4>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8013ba0:	4b6e      	ldr	r3, [pc, #440]	; (8013d5c <UTIL_SEQ_Run+0x1e8>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013ba6:	e08d      	b.n	8013cc4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013bac:	e002      	b.n	8013bb4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8013bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013bb4:	4a6a      	ldr	r2, [pc, #424]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bb8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbe:	401a      	ands	r2, r3
 8013bc0:	4b62      	ldr	r3, [pc, #392]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	4013      	ands	r3, r2
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d0f1      	beq.n	8013bae <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013bca:	4a65      	ldr	r2, [pc, #404]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	401a      	ands	r2, r3
 8013bd6:	4b5d      	ldr	r3, [pc, #372]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4013      	ands	r3, r2
 8013bdc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013bde:	4a60      	ldr	r2, [pc, #384]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	4413      	add	r3, r2
 8013be6:	685a      	ldr	r2, [r3, #4]
 8013be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bea:	4013      	ands	r3, r2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d106      	bne.n	8013bfe <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013bf0:	4a5b      	ldr	r2, [pc, #364]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bf4:	00db      	lsls	r3, r3, #3
 8013bf6:	4413      	add	r3, r2
 8013bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8013bfc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013bfe:	4a58      	ldr	r2, [pc, #352]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c02:	00db      	lsls	r3, r3, #3
 8013c04:	4413      	add	r3, r2
 8013c06:	685a      	ldr	r2, [r3, #4]
 8013c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0a:	4013      	ands	r3, r2
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 f9b3 	bl	8013f78 <SEQ_BitPosition>
 8013c12:	4603      	mov	r3, r0
 8013c14:	461a      	mov	r2, r3
 8013c16:	4b53      	ldr	r3, [pc, #332]	; (8013d64 <UTIL_SEQ_Run+0x1f0>)
 8013c18:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013c1a:	4a51      	ldr	r2, [pc, #324]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c1e:	00db      	lsls	r3, r3, #3
 8013c20:	4413      	add	r3, r2
 8013c22:	685a      	ldr	r2, [r3, #4]
 8013c24:	4b4f      	ldr	r3, [pc, #316]	; (8013d64 <UTIL_SEQ_Run+0x1f0>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2101      	movs	r1, #1
 8013c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8013c2e:	43db      	mvns	r3, r3
 8013c30:	401a      	ands	r2, r3
 8013c32:	494b      	ldr	r1, [pc, #300]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c36:	00db      	lsls	r3, r3, #3
 8013c38:	440b      	add	r3, r1
 8013c3a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8013c40:	61bb      	str	r3, [r7, #24]
  return(result);
 8013c42:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013c44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c46:	b672      	cpsid	i
}
 8013c48:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013c4a:	4b46      	ldr	r3, [pc, #280]	; (8013d64 <UTIL_SEQ_Run+0x1f0>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2201      	movs	r2, #1
 8013c50:	fa02 f303 	lsl.w	r3, r2, r3
 8013c54:	43da      	mvns	r2, r3
 8013c56:	4b3e      	ldr	r3, [pc, #248]	; (8013d50 <UTIL_SEQ_Run+0x1dc>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4013      	ands	r3, r2
 8013c5c:	4a3c      	ldr	r2, [pc, #240]	; (8013d50 <UTIL_SEQ_Run+0x1dc>)
 8013c5e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013c60:	2302      	movs	r3, #2
 8013c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c64:	e013      	b.n	8013c8e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	4a3d      	ldr	r2, [pc, #244]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013c6c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013c70:	4b3c      	ldr	r3, [pc, #240]	; (8013d64 <UTIL_SEQ_Run+0x1f0>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2201      	movs	r2, #1
 8013c76:	fa02 f303 	lsl.w	r3, r2, r3
 8013c7a:	43da      	mvns	r2, r3
 8013c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c7e:	3b01      	subs	r3, #1
 8013c80:	400a      	ands	r2, r1
 8013c82:	4937      	ldr	r1, [pc, #220]	; (8013d60 <UTIL_SEQ_Run+0x1ec>)
 8013c84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c8a:	3b01      	subs	r3, #1
 8013c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d1e8      	bne.n	8013c66 <UTIL_SEQ_Run+0xf2>
 8013c94:	6a3b      	ldr	r3, [r7, #32]
 8013c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	f383 8810 	msr	PRIMASK, r3
}
 8013c9e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013ca0:	4b30      	ldr	r3, [pc, #192]	; (8013d64 <UTIL_SEQ_Run+0x1f0>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4a30      	ldr	r2, [pc, #192]	; (8013d68 <UTIL_SEQ_Run+0x1f4>)
 8013ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013caa:	4798      	blx	r3

    local_taskset = TaskSet;
 8013cac:	4b28      	ldr	r3, [pc, #160]	; (8013d50 <UTIL_SEQ_Run+0x1dc>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8013cb2:	4b28      	ldr	r3, [pc, #160]	; (8013d54 <UTIL_SEQ_Run+0x1e0>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013cb8:	4b27      	ldr	r3, [pc, #156]	; (8013d58 <UTIL_SEQ_Run+0x1e4>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8013cbe:	4b27      	ldr	r3, [pc, #156]	; (8013d5c <UTIL_SEQ_Run+0x1e8>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc8:	401a      	ands	r2, r3
 8013cca:	4b20      	ldr	r3, [pc, #128]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4013      	ands	r3, r2
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d005      	beq.n	8013ce0 <UTIL_SEQ_Run+0x16c>
 8013cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd8:	4013      	ands	r3, r2
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f43f af64 	beq.w	8013ba8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013ce0:	4b20      	ldr	r3, [pc, #128]	; (8013d64 <UTIL_SEQ_Run+0x1f0>)
 8013ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013ce8:	f000 f938 	bl	8013f5c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cec:	f3ef 8310 	mrs	r3, PRIMASK
 8013cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8013cf2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cf6:	b672      	cpsid	i
}
 8013cf8:	bf00      	nop
  local_taskset = TaskSet;
 8013cfa:	4b15      	ldr	r3, [pc, #84]	; (8013d50 <UTIL_SEQ_Run+0x1dc>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013d00:	4b14      	ldr	r3, [pc, #80]	; (8013d54 <UTIL_SEQ_Run+0x1e0>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013d06:	4b14      	ldr	r3, [pc, #80]	; (8013d58 <UTIL_SEQ_Run+0x1e4>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d10:	401a      	ands	r2, r3
 8013d12:	4b0e      	ldr	r3, [pc, #56]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4013      	ands	r3, r2
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d107      	bne.n	8013d2c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013d1c:	4b0f      	ldr	r3, [pc, #60]	; (8013d5c <UTIL_SEQ_Run+0x1e8>)
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d22:	4013      	ands	r3, r2
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013d28:	f7ed fd7d 	bl	8001826 <UTIL_SEQ_Idle>
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f383 8810 	msr	PRIMASK, r3
}
 8013d36:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013d38:	f000 f917 	bl	8013f6a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013d3c:	4a03      	ldr	r2, [pc, #12]	; (8013d4c <UTIL_SEQ_Run+0x1d8>)
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	6013      	str	r3, [r2, #0]

  return;
 8013d42:	bf00      	nop
}
 8013d44:	3740      	adds	r7, #64	; 0x40
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	20000240 	.word	0x20000240
 8013d50:	20001490 	.word	0x20001490
 8013d54:	20001494 	.word	0x20001494
 8013d58:	2000023c 	.word	0x2000023c
 8013d5c:	20001498 	.word	0x20001498
 8013d60:	20001520 	.word	0x20001520
 8013d64:	2000149c 	.word	0x2000149c
 8013d68:	200014a0 	.word	0x200014a0

08013d6c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b088      	sub	sp, #32
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d78:	f3ef 8310 	mrs	r3, PRIMASK
 8013d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8013d7e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013d80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013d82:	b672      	cpsid	i
}
 8013d84:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013d86:	68f8      	ldr	r0, [r7, #12]
 8013d88:	f000 f8f6 	bl	8013f78 <SEQ_BitPosition>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	4619      	mov	r1, r3
 8013d90:	4a06      	ldr	r2, [pc, #24]	; (8013dac <UTIL_SEQ_RegTask+0x40>)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	f383 8810 	msr	PRIMASK, r3
}
 8013da2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013da4:	bf00      	nop
}
 8013da6:	3720      	adds	r7, #32
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	200014a0 	.word	0x200014a0

08013db0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013db0:	b480      	push	{r7}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dba:	f3ef 8310 	mrs	r3, PRIMASK
 8013dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013dc4:	b672      	cpsid	i
}
 8013dc6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013dc8:	4b0d      	ldr	r3, [pc, #52]	; (8013e00 <UTIL_SEQ_SetTask+0x50>)
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	4313      	orrs	r3, r2
 8013dd0:	4a0b      	ldr	r2, [pc, #44]	; (8013e00 <UTIL_SEQ_SetTask+0x50>)
 8013dd2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013dd4:	4a0b      	ldr	r2, [pc, #44]	; (8013e04 <UTIL_SEQ_SetTask+0x54>)
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	431a      	orrs	r2, r3
 8013de0:	4908      	ldr	r1, [pc, #32]	; (8013e04 <UTIL_SEQ_SetTask+0x54>)
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	f383 8810 	msr	PRIMASK, r3
}
 8013df2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013df4:	bf00      	nop
}
 8013df6:	371c      	adds	r7, #28
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfe:	4770      	bx	lr
 8013e00:	20001490 	.word	0x20001490
 8013e04:	20001520 	.word	0x20001520

08013e08 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b087      	sub	sp, #28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e10:	f3ef 8310 	mrs	r3, PRIMASK
 8013e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e1a:	b672      	cpsid	i
}
 8013e1c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	43da      	mvns	r2, r3
 8013e22:	4b08      	ldr	r3, [pc, #32]	; (8013e44 <UTIL_SEQ_PauseTask+0x3c>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4013      	ands	r3, r2
 8013e28:	4a06      	ldr	r2, [pc, #24]	; (8013e44 <UTIL_SEQ_PauseTask+0x3c>)
 8013e2a:	6013      	str	r3, [r2, #0]
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	f383 8810 	msr	PRIMASK, r3
}
 8013e36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013e38:	bf00      	nop
}
 8013e3a:	371c      	adds	r7, #28
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr
 8013e44:	2000023c 	.word	0x2000023c

08013e48 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b087      	sub	sp, #28
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e50:	f3ef 8310 	mrs	r3, PRIMASK
 8013e54:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e56:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e5a:	b672      	cpsid	i
}
 8013e5c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8013e5e:	4b09      	ldr	r3, [pc, #36]	; (8013e84 <UTIL_SEQ_ResumeTask+0x3c>)
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	4a07      	ldr	r2, [pc, #28]	; (8013e84 <UTIL_SEQ_ResumeTask+0x3c>)
 8013e68:	6013      	str	r3, [r2, #0]
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	f383 8810 	msr	PRIMASK, r3
}
 8013e74:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013e76:	bf00      	nop
}
 8013e78:	371c      	adds	r7, #28
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop
 8013e84:	2000023c 	.word	0x2000023c

08013e88 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b087      	sub	sp, #28
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e90:	f3ef 8310 	mrs	r3, PRIMASK
 8013e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e96:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e9a:	b672      	cpsid	i
}
 8013e9c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8013e9e:	4b09      	ldr	r3, [pc, #36]	; (8013ec4 <UTIL_SEQ_SetEvt+0x3c>)
 8013ea0:	681a      	ldr	r2, [r3, #0]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	4a07      	ldr	r2, [pc, #28]	; (8013ec4 <UTIL_SEQ_SetEvt+0x3c>)
 8013ea8:	6013      	str	r3, [r2, #0]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	f383 8810 	msr	PRIMASK, r3
}
 8013eb4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013eb6:	bf00      	nop
}
 8013eb8:	371c      	adds	r7, #28
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr
 8013ec2:	bf00      	nop
 8013ec4:	20001494 	.word	0x20001494

08013ec8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b088      	sub	sp, #32
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8013ed0:	4b1f      	ldr	r3, [pc, #124]	; (8013f50 <UTIL_SEQ_WaitEvt+0x88>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8013ed6:	4b1e      	ldr	r3, [pc, #120]	; (8013f50 <UTIL_SEQ_WaitEvt+0x88>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ede:	d102      	bne.n	8013ee6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	61fb      	str	r3, [r7, #28]
 8013ee4:	e005      	b.n	8013ef2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8013ee6:	4b1a      	ldr	r3, [pc, #104]	; (8013f50 <UTIL_SEQ_WaitEvt+0x88>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2201      	movs	r2, #1
 8013eec:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8013ef2:	4b18      	ldr	r3, [pc, #96]	; (8013f54 <UTIL_SEQ_WaitEvt+0x8c>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8013ef8:	4a16      	ldr	r2, [pc, #88]	; (8013f54 <UTIL_SEQ_WaitEvt+0x8c>)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8013efe:	e003      	b.n	8013f08 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8013f00:	6879      	ldr	r1, [r7, #4]
 8013f02:	69f8      	ldr	r0, [r7, #28]
 8013f04:	f7ed fc96 	bl	8001834 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8013f08:	4b13      	ldr	r3, [pc, #76]	; (8013f58 <UTIL_SEQ_WaitEvt+0x90>)
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4013      	ands	r3, r2
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d0f5      	beq.n	8013f00 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8013f14:	4a0e      	ldr	r2, [pc, #56]	; (8013f50 <UTIL_SEQ_WaitEvt+0x88>)
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013f20:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f24:	b672      	cpsid	i
}
 8013f26:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	43da      	mvns	r2, r3
 8013f2c:	4b0a      	ldr	r3, [pc, #40]	; (8013f58 <UTIL_SEQ_WaitEvt+0x90>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	4013      	ands	r3, r2
 8013f32:	4a09      	ldr	r2, [pc, #36]	; (8013f58 <UTIL_SEQ_WaitEvt+0x90>)
 8013f34:	6013      	str	r3, [r2, #0]
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f383 8810 	msr	PRIMASK, r3
}
 8013f40:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013f42:	4a04      	ldr	r2, [pc, #16]	; (8013f54 <UTIL_SEQ_WaitEvt+0x8c>)
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	6013      	str	r3, [r2, #0]
  return;
 8013f48:	bf00      	nop
}
 8013f4a:	3720      	adds	r7, #32
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	2000149c 	.word	0x2000149c
 8013f54:	20001498 	.word	0x20001498
 8013f58:	20001494 	.word	0x20001494

08013f5c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013f60:	bf00      	nop
}
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr

08013f6a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8013f6a:	b480      	push	{r7}
 8013f6c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013f6e:	bf00      	nop
}
 8013f70:	46bd      	mov	sp, r7
 8013f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f76:	4770      	bx	lr

08013f78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013f78:	b480      	push	{r7}
 8013f7a:	b085      	sub	sp, #20
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8013f80:	2300      	movs	r3, #0
 8013f82:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	0c1b      	lsrs	r3, r3, #16
 8013f8c:	041b      	lsls	r3, r3, #16
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d104      	bne.n	8013f9c <SEQ_BitPosition+0x24>
 8013f92:	2310      	movs	r3, #16
 8013f94:	73fb      	strb	r3, [r7, #15]
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	041b      	lsls	r3, r3, #16
 8013f9a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d105      	bne.n	8013fb2 <SEQ_BitPosition+0x3a>
 8013fa6:	7bfb      	ldrb	r3, [r7, #15]
 8013fa8:	3308      	adds	r3, #8
 8013faa:	73fb      	strb	r3, [r7, #15]
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	021b      	lsls	r3, r3, #8
 8013fb0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d105      	bne.n	8013fc8 <SEQ_BitPosition+0x50>
 8013fbc:	7bfb      	ldrb	r3, [r7, #15]
 8013fbe:	3304      	adds	r3, #4
 8013fc0:	73fb      	strb	r3, [r7, #15]
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	011b      	lsls	r3, r3, #4
 8013fc6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	0f1b      	lsrs	r3, r3, #28
 8013fcc:	4a07      	ldr	r2, [pc, #28]	; (8013fec <SEQ_BitPosition+0x74>)
 8013fce:	5cd2      	ldrb	r2, [r2, r3]
 8013fd0:	7bfb      	ldrb	r3, [r7, #15]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8013fd6:	7bfb      	ldrb	r3, [r7, #15]
 8013fd8:	f1c3 031f 	rsb	r3, r3, #31
 8013fdc:	b2db      	uxtb	r3, r3
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3714      	adds	r7, #20
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe8:	4770      	bx	lr
 8013fea:	bf00      	nop
 8013fec:	08018b40 	.word	0x08018b40

08013ff0 <__errno>:
 8013ff0:	4b01      	ldr	r3, [pc, #4]	; (8013ff8 <__errno+0x8>)
 8013ff2:	6818      	ldr	r0, [r3, #0]
 8013ff4:	4770      	bx	lr
 8013ff6:	bf00      	nop
 8013ff8:	20000244 	.word	0x20000244

08013ffc <__libc_init_array>:
 8013ffc:	b570      	push	{r4, r5, r6, lr}
 8013ffe:	4d0d      	ldr	r5, [pc, #52]	; (8014034 <__libc_init_array+0x38>)
 8014000:	4c0d      	ldr	r4, [pc, #52]	; (8014038 <__libc_init_array+0x3c>)
 8014002:	1b64      	subs	r4, r4, r5
 8014004:	10a4      	asrs	r4, r4, #2
 8014006:	2600      	movs	r6, #0
 8014008:	42a6      	cmp	r6, r4
 801400a:	d109      	bne.n	8014020 <__libc_init_array+0x24>
 801400c:	4d0b      	ldr	r5, [pc, #44]	; (801403c <__libc_init_array+0x40>)
 801400e:	4c0c      	ldr	r4, [pc, #48]	; (8014040 <__libc_init_array+0x44>)
 8014010:	f003 f8ee 	bl	80171f0 <_init>
 8014014:	1b64      	subs	r4, r4, r5
 8014016:	10a4      	asrs	r4, r4, #2
 8014018:	2600      	movs	r6, #0
 801401a:	42a6      	cmp	r6, r4
 801401c:	d105      	bne.n	801402a <__libc_init_array+0x2e>
 801401e:	bd70      	pop	{r4, r5, r6, pc}
 8014020:	f855 3b04 	ldr.w	r3, [r5], #4
 8014024:	4798      	blx	r3
 8014026:	3601      	adds	r6, #1
 8014028:	e7ee      	b.n	8014008 <__libc_init_array+0xc>
 801402a:	f855 3b04 	ldr.w	r3, [r5], #4
 801402e:	4798      	blx	r3
 8014030:	3601      	adds	r6, #1
 8014032:	e7f2      	b.n	801401a <__libc_init_array+0x1e>
 8014034:	08018f34 	.word	0x08018f34
 8014038:	08018f34 	.word	0x08018f34
 801403c:	08018f34 	.word	0x08018f34
 8014040:	08018f38 	.word	0x08018f38

08014044 <memcpy>:
 8014044:	440a      	add	r2, r1
 8014046:	4291      	cmp	r1, r2
 8014048:	f100 33ff 	add.w	r3, r0, #4294967295
 801404c:	d100      	bne.n	8014050 <memcpy+0xc>
 801404e:	4770      	bx	lr
 8014050:	b510      	push	{r4, lr}
 8014052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014056:	f803 4f01 	strb.w	r4, [r3, #1]!
 801405a:	4291      	cmp	r1, r2
 801405c:	d1f9      	bne.n	8014052 <memcpy+0xe>
 801405e:	bd10      	pop	{r4, pc}

08014060 <memset>:
 8014060:	4402      	add	r2, r0
 8014062:	4603      	mov	r3, r0
 8014064:	4293      	cmp	r3, r2
 8014066:	d100      	bne.n	801406a <memset+0xa>
 8014068:	4770      	bx	lr
 801406a:	f803 1b01 	strb.w	r1, [r3], #1
 801406e:	e7f9      	b.n	8014064 <memset+0x4>

08014070 <__cvt>:
 8014070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014074:	ec55 4b10 	vmov	r4, r5, d0
 8014078:	2d00      	cmp	r5, #0
 801407a:	460e      	mov	r6, r1
 801407c:	4619      	mov	r1, r3
 801407e:	462b      	mov	r3, r5
 8014080:	bfbb      	ittet	lt
 8014082:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014086:	461d      	movlt	r5, r3
 8014088:	2300      	movge	r3, #0
 801408a:	232d      	movlt	r3, #45	; 0x2d
 801408c:	700b      	strb	r3, [r1, #0]
 801408e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014090:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014094:	4691      	mov	r9, r2
 8014096:	f023 0820 	bic.w	r8, r3, #32
 801409a:	bfbc      	itt	lt
 801409c:	4622      	movlt	r2, r4
 801409e:	4614      	movlt	r4, r2
 80140a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80140a4:	d005      	beq.n	80140b2 <__cvt+0x42>
 80140a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80140aa:	d100      	bne.n	80140ae <__cvt+0x3e>
 80140ac:	3601      	adds	r6, #1
 80140ae:	2102      	movs	r1, #2
 80140b0:	e000      	b.n	80140b4 <__cvt+0x44>
 80140b2:	2103      	movs	r1, #3
 80140b4:	ab03      	add	r3, sp, #12
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	ab02      	add	r3, sp, #8
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	ec45 4b10 	vmov	d0, r4, r5
 80140c0:	4653      	mov	r3, sl
 80140c2:	4632      	mov	r2, r6
 80140c4:	f000 fe64 	bl	8014d90 <_dtoa_r>
 80140c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80140cc:	4607      	mov	r7, r0
 80140ce:	d102      	bne.n	80140d6 <__cvt+0x66>
 80140d0:	f019 0f01 	tst.w	r9, #1
 80140d4:	d022      	beq.n	801411c <__cvt+0xac>
 80140d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80140da:	eb07 0906 	add.w	r9, r7, r6
 80140de:	d110      	bne.n	8014102 <__cvt+0x92>
 80140e0:	783b      	ldrb	r3, [r7, #0]
 80140e2:	2b30      	cmp	r3, #48	; 0x30
 80140e4:	d10a      	bne.n	80140fc <__cvt+0x8c>
 80140e6:	2200      	movs	r2, #0
 80140e8:	2300      	movs	r3, #0
 80140ea:	4620      	mov	r0, r4
 80140ec:	4629      	mov	r1, r5
 80140ee:	f7ec fcc3 	bl	8000a78 <__aeabi_dcmpeq>
 80140f2:	b918      	cbnz	r0, 80140fc <__cvt+0x8c>
 80140f4:	f1c6 0601 	rsb	r6, r6, #1
 80140f8:	f8ca 6000 	str.w	r6, [sl]
 80140fc:	f8da 3000 	ldr.w	r3, [sl]
 8014100:	4499      	add	r9, r3
 8014102:	2200      	movs	r2, #0
 8014104:	2300      	movs	r3, #0
 8014106:	4620      	mov	r0, r4
 8014108:	4629      	mov	r1, r5
 801410a:	f7ec fcb5 	bl	8000a78 <__aeabi_dcmpeq>
 801410e:	b108      	cbz	r0, 8014114 <__cvt+0xa4>
 8014110:	f8cd 900c 	str.w	r9, [sp, #12]
 8014114:	2230      	movs	r2, #48	; 0x30
 8014116:	9b03      	ldr	r3, [sp, #12]
 8014118:	454b      	cmp	r3, r9
 801411a:	d307      	bcc.n	801412c <__cvt+0xbc>
 801411c:	9b03      	ldr	r3, [sp, #12]
 801411e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014120:	1bdb      	subs	r3, r3, r7
 8014122:	4638      	mov	r0, r7
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	b004      	add	sp, #16
 8014128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801412c:	1c59      	adds	r1, r3, #1
 801412e:	9103      	str	r1, [sp, #12]
 8014130:	701a      	strb	r2, [r3, #0]
 8014132:	e7f0      	b.n	8014116 <__cvt+0xa6>

08014134 <__exponent>:
 8014134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014136:	4603      	mov	r3, r0
 8014138:	2900      	cmp	r1, #0
 801413a:	bfb8      	it	lt
 801413c:	4249      	neglt	r1, r1
 801413e:	f803 2b02 	strb.w	r2, [r3], #2
 8014142:	bfb4      	ite	lt
 8014144:	222d      	movlt	r2, #45	; 0x2d
 8014146:	222b      	movge	r2, #43	; 0x2b
 8014148:	2909      	cmp	r1, #9
 801414a:	7042      	strb	r2, [r0, #1]
 801414c:	dd2a      	ble.n	80141a4 <__exponent+0x70>
 801414e:	f10d 0407 	add.w	r4, sp, #7
 8014152:	46a4      	mov	ip, r4
 8014154:	270a      	movs	r7, #10
 8014156:	46a6      	mov	lr, r4
 8014158:	460a      	mov	r2, r1
 801415a:	fb91 f6f7 	sdiv	r6, r1, r7
 801415e:	fb07 1516 	mls	r5, r7, r6, r1
 8014162:	3530      	adds	r5, #48	; 0x30
 8014164:	2a63      	cmp	r2, #99	; 0x63
 8014166:	f104 34ff 	add.w	r4, r4, #4294967295
 801416a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801416e:	4631      	mov	r1, r6
 8014170:	dcf1      	bgt.n	8014156 <__exponent+0x22>
 8014172:	3130      	adds	r1, #48	; 0x30
 8014174:	f1ae 0502 	sub.w	r5, lr, #2
 8014178:	f804 1c01 	strb.w	r1, [r4, #-1]
 801417c:	1c44      	adds	r4, r0, #1
 801417e:	4629      	mov	r1, r5
 8014180:	4561      	cmp	r1, ip
 8014182:	d30a      	bcc.n	801419a <__exponent+0x66>
 8014184:	f10d 0209 	add.w	r2, sp, #9
 8014188:	eba2 020e 	sub.w	r2, r2, lr
 801418c:	4565      	cmp	r5, ip
 801418e:	bf88      	it	hi
 8014190:	2200      	movhi	r2, #0
 8014192:	4413      	add	r3, r2
 8014194:	1a18      	subs	r0, r3, r0
 8014196:	b003      	add	sp, #12
 8014198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801419a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801419e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80141a2:	e7ed      	b.n	8014180 <__exponent+0x4c>
 80141a4:	2330      	movs	r3, #48	; 0x30
 80141a6:	3130      	adds	r1, #48	; 0x30
 80141a8:	7083      	strb	r3, [r0, #2]
 80141aa:	70c1      	strb	r1, [r0, #3]
 80141ac:	1d03      	adds	r3, r0, #4
 80141ae:	e7f1      	b.n	8014194 <__exponent+0x60>

080141b0 <_printf_float>:
 80141b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b4:	ed2d 8b02 	vpush	{d8}
 80141b8:	b08d      	sub	sp, #52	; 0x34
 80141ba:	460c      	mov	r4, r1
 80141bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80141c0:	4616      	mov	r6, r2
 80141c2:	461f      	mov	r7, r3
 80141c4:	4605      	mov	r5, r0
 80141c6:	f001 fd89 	bl	8015cdc <_localeconv_r>
 80141ca:	f8d0 a000 	ldr.w	sl, [r0]
 80141ce:	4650      	mov	r0, sl
 80141d0:	f7eb ffd6 	bl	8000180 <strlen>
 80141d4:	2300      	movs	r3, #0
 80141d6:	930a      	str	r3, [sp, #40]	; 0x28
 80141d8:	6823      	ldr	r3, [r4, #0]
 80141da:	9305      	str	r3, [sp, #20]
 80141dc:	f8d8 3000 	ldr.w	r3, [r8]
 80141e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80141e4:	3307      	adds	r3, #7
 80141e6:	f023 0307 	bic.w	r3, r3, #7
 80141ea:	f103 0208 	add.w	r2, r3, #8
 80141ee:	f8c8 2000 	str.w	r2, [r8]
 80141f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80141fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80141fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014202:	9307      	str	r3, [sp, #28]
 8014204:	f8cd 8018 	str.w	r8, [sp, #24]
 8014208:	ee08 0a10 	vmov	s16, r0
 801420c:	4b9f      	ldr	r3, [pc, #636]	; (801448c <_printf_float+0x2dc>)
 801420e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014212:	f04f 32ff 	mov.w	r2, #4294967295
 8014216:	f7ec fc61 	bl	8000adc <__aeabi_dcmpun>
 801421a:	bb88      	cbnz	r0, 8014280 <_printf_float+0xd0>
 801421c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014220:	4b9a      	ldr	r3, [pc, #616]	; (801448c <_printf_float+0x2dc>)
 8014222:	f04f 32ff 	mov.w	r2, #4294967295
 8014226:	f7ec fc3b 	bl	8000aa0 <__aeabi_dcmple>
 801422a:	bb48      	cbnz	r0, 8014280 <_printf_float+0xd0>
 801422c:	2200      	movs	r2, #0
 801422e:	2300      	movs	r3, #0
 8014230:	4640      	mov	r0, r8
 8014232:	4649      	mov	r1, r9
 8014234:	f7ec fc2a 	bl	8000a8c <__aeabi_dcmplt>
 8014238:	b110      	cbz	r0, 8014240 <_printf_float+0x90>
 801423a:	232d      	movs	r3, #45	; 0x2d
 801423c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014240:	4b93      	ldr	r3, [pc, #588]	; (8014490 <_printf_float+0x2e0>)
 8014242:	4894      	ldr	r0, [pc, #592]	; (8014494 <_printf_float+0x2e4>)
 8014244:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014248:	bf94      	ite	ls
 801424a:	4698      	movls	r8, r3
 801424c:	4680      	movhi	r8, r0
 801424e:	2303      	movs	r3, #3
 8014250:	6123      	str	r3, [r4, #16]
 8014252:	9b05      	ldr	r3, [sp, #20]
 8014254:	f023 0204 	bic.w	r2, r3, #4
 8014258:	6022      	str	r2, [r4, #0]
 801425a:	f04f 0900 	mov.w	r9, #0
 801425e:	9700      	str	r7, [sp, #0]
 8014260:	4633      	mov	r3, r6
 8014262:	aa0b      	add	r2, sp, #44	; 0x2c
 8014264:	4621      	mov	r1, r4
 8014266:	4628      	mov	r0, r5
 8014268:	f000 f9d8 	bl	801461c <_printf_common>
 801426c:	3001      	adds	r0, #1
 801426e:	f040 8090 	bne.w	8014392 <_printf_float+0x1e2>
 8014272:	f04f 30ff 	mov.w	r0, #4294967295
 8014276:	b00d      	add	sp, #52	; 0x34
 8014278:	ecbd 8b02 	vpop	{d8}
 801427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014280:	4642      	mov	r2, r8
 8014282:	464b      	mov	r3, r9
 8014284:	4640      	mov	r0, r8
 8014286:	4649      	mov	r1, r9
 8014288:	f7ec fc28 	bl	8000adc <__aeabi_dcmpun>
 801428c:	b140      	cbz	r0, 80142a0 <_printf_float+0xf0>
 801428e:	464b      	mov	r3, r9
 8014290:	2b00      	cmp	r3, #0
 8014292:	bfbc      	itt	lt
 8014294:	232d      	movlt	r3, #45	; 0x2d
 8014296:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801429a:	487f      	ldr	r0, [pc, #508]	; (8014498 <_printf_float+0x2e8>)
 801429c:	4b7f      	ldr	r3, [pc, #508]	; (801449c <_printf_float+0x2ec>)
 801429e:	e7d1      	b.n	8014244 <_printf_float+0x94>
 80142a0:	6863      	ldr	r3, [r4, #4]
 80142a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80142a6:	9206      	str	r2, [sp, #24]
 80142a8:	1c5a      	adds	r2, r3, #1
 80142aa:	d13f      	bne.n	801432c <_printf_float+0x17c>
 80142ac:	2306      	movs	r3, #6
 80142ae:	6063      	str	r3, [r4, #4]
 80142b0:	9b05      	ldr	r3, [sp, #20]
 80142b2:	6861      	ldr	r1, [r4, #4]
 80142b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80142b8:	2300      	movs	r3, #0
 80142ba:	9303      	str	r3, [sp, #12]
 80142bc:	ab0a      	add	r3, sp, #40	; 0x28
 80142be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80142c2:	ab09      	add	r3, sp, #36	; 0x24
 80142c4:	ec49 8b10 	vmov	d0, r8, r9
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	6022      	str	r2, [r4, #0]
 80142cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80142d0:	4628      	mov	r0, r5
 80142d2:	f7ff fecd 	bl	8014070 <__cvt>
 80142d6:	9b06      	ldr	r3, [sp, #24]
 80142d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142da:	2b47      	cmp	r3, #71	; 0x47
 80142dc:	4680      	mov	r8, r0
 80142de:	d108      	bne.n	80142f2 <_printf_float+0x142>
 80142e0:	1cc8      	adds	r0, r1, #3
 80142e2:	db02      	blt.n	80142ea <_printf_float+0x13a>
 80142e4:	6863      	ldr	r3, [r4, #4]
 80142e6:	4299      	cmp	r1, r3
 80142e8:	dd41      	ble.n	801436e <_printf_float+0x1be>
 80142ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80142ee:	fa5f fb8b 	uxtb.w	fp, fp
 80142f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80142f6:	d820      	bhi.n	801433a <_printf_float+0x18a>
 80142f8:	3901      	subs	r1, #1
 80142fa:	465a      	mov	r2, fp
 80142fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014300:	9109      	str	r1, [sp, #36]	; 0x24
 8014302:	f7ff ff17 	bl	8014134 <__exponent>
 8014306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014308:	1813      	adds	r3, r2, r0
 801430a:	2a01      	cmp	r2, #1
 801430c:	4681      	mov	r9, r0
 801430e:	6123      	str	r3, [r4, #16]
 8014310:	dc02      	bgt.n	8014318 <_printf_float+0x168>
 8014312:	6822      	ldr	r2, [r4, #0]
 8014314:	07d2      	lsls	r2, r2, #31
 8014316:	d501      	bpl.n	801431c <_printf_float+0x16c>
 8014318:	3301      	adds	r3, #1
 801431a:	6123      	str	r3, [r4, #16]
 801431c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014320:	2b00      	cmp	r3, #0
 8014322:	d09c      	beq.n	801425e <_printf_float+0xae>
 8014324:	232d      	movs	r3, #45	; 0x2d
 8014326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801432a:	e798      	b.n	801425e <_printf_float+0xae>
 801432c:	9a06      	ldr	r2, [sp, #24]
 801432e:	2a47      	cmp	r2, #71	; 0x47
 8014330:	d1be      	bne.n	80142b0 <_printf_float+0x100>
 8014332:	2b00      	cmp	r3, #0
 8014334:	d1bc      	bne.n	80142b0 <_printf_float+0x100>
 8014336:	2301      	movs	r3, #1
 8014338:	e7b9      	b.n	80142ae <_printf_float+0xfe>
 801433a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801433e:	d118      	bne.n	8014372 <_printf_float+0x1c2>
 8014340:	2900      	cmp	r1, #0
 8014342:	6863      	ldr	r3, [r4, #4]
 8014344:	dd0b      	ble.n	801435e <_printf_float+0x1ae>
 8014346:	6121      	str	r1, [r4, #16]
 8014348:	b913      	cbnz	r3, 8014350 <_printf_float+0x1a0>
 801434a:	6822      	ldr	r2, [r4, #0]
 801434c:	07d0      	lsls	r0, r2, #31
 801434e:	d502      	bpl.n	8014356 <_printf_float+0x1a6>
 8014350:	3301      	adds	r3, #1
 8014352:	440b      	add	r3, r1
 8014354:	6123      	str	r3, [r4, #16]
 8014356:	65a1      	str	r1, [r4, #88]	; 0x58
 8014358:	f04f 0900 	mov.w	r9, #0
 801435c:	e7de      	b.n	801431c <_printf_float+0x16c>
 801435e:	b913      	cbnz	r3, 8014366 <_printf_float+0x1b6>
 8014360:	6822      	ldr	r2, [r4, #0]
 8014362:	07d2      	lsls	r2, r2, #31
 8014364:	d501      	bpl.n	801436a <_printf_float+0x1ba>
 8014366:	3302      	adds	r3, #2
 8014368:	e7f4      	b.n	8014354 <_printf_float+0x1a4>
 801436a:	2301      	movs	r3, #1
 801436c:	e7f2      	b.n	8014354 <_printf_float+0x1a4>
 801436e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014374:	4299      	cmp	r1, r3
 8014376:	db05      	blt.n	8014384 <_printf_float+0x1d4>
 8014378:	6823      	ldr	r3, [r4, #0]
 801437a:	6121      	str	r1, [r4, #16]
 801437c:	07d8      	lsls	r0, r3, #31
 801437e:	d5ea      	bpl.n	8014356 <_printf_float+0x1a6>
 8014380:	1c4b      	adds	r3, r1, #1
 8014382:	e7e7      	b.n	8014354 <_printf_float+0x1a4>
 8014384:	2900      	cmp	r1, #0
 8014386:	bfd4      	ite	le
 8014388:	f1c1 0202 	rsble	r2, r1, #2
 801438c:	2201      	movgt	r2, #1
 801438e:	4413      	add	r3, r2
 8014390:	e7e0      	b.n	8014354 <_printf_float+0x1a4>
 8014392:	6823      	ldr	r3, [r4, #0]
 8014394:	055a      	lsls	r2, r3, #21
 8014396:	d407      	bmi.n	80143a8 <_printf_float+0x1f8>
 8014398:	6923      	ldr	r3, [r4, #16]
 801439a:	4642      	mov	r2, r8
 801439c:	4631      	mov	r1, r6
 801439e:	4628      	mov	r0, r5
 80143a0:	47b8      	blx	r7
 80143a2:	3001      	adds	r0, #1
 80143a4:	d12c      	bne.n	8014400 <_printf_float+0x250>
 80143a6:	e764      	b.n	8014272 <_printf_float+0xc2>
 80143a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80143ac:	f240 80e0 	bls.w	8014570 <_printf_float+0x3c0>
 80143b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143b4:	2200      	movs	r2, #0
 80143b6:	2300      	movs	r3, #0
 80143b8:	f7ec fb5e 	bl	8000a78 <__aeabi_dcmpeq>
 80143bc:	2800      	cmp	r0, #0
 80143be:	d034      	beq.n	801442a <_printf_float+0x27a>
 80143c0:	4a37      	ldr	r2, [pc, #220]	; (80144a0 <_printf_float+0x2f0>)
 80143c2:	2301      	movs	r3, #1
 80143c4:	4631      	mov	r1, r6
 80143c6:	4628      	mov	r0, r5
 80143c8:	47b8      	blx	r7
 80143ca:	3001      	adds	r0, #1
 80143cc:	f43f af51 	beq.w	8014272 <_printf_float+0xc2>
 80143d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80143d4:	429a      	cmp	r2, r3
 80143d6:	db02      	blt.n	80143de <_printf_float+0x22e>
 80143d8:	6823      	ldr	r3, [r4, #0]
 80143da:	07d8      	lsls	r0, r3, #31
 80143dc:	d510      	bpl.n	8014400 <_printf_float+0x250>
 80143de:	ee18 3a10 	vmov	r3, s16
 80143e2:	4652      	mov	r2, sl
 80143e4:	4631      	mov	r1, r6
 80143e6:	4628      	mov	r0, r5
 80143e8:	47b8      	blx	r7
 80143ea:	3001      	adds	r0, #1
 80143ec:	f43f af41 	beq.w	8014272 <_printf_float+0xc2>
 80143f0:	f04f 0800 	mov.w	r8, #0
 80143f4:	f104 091a 	add.w	r9, r4, #26
 80143f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143fa:	3b01      	subs	r3, #1
 80143fc:	4543      	cmp	r3, r8
 80143fe:	dc09      	bgt.n	8014414 <_printf_float+0x264>
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	079b      	lsls	r3, r3, #30
 8014404:	f100 8105 	bmi.w	8014612 <_printf_float+0x462>
 8014408:	68e0      	ldr	r0, [r4, #12]
 801440a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801440c:	4298      	cmp	r0, r3
 801440e:	bfb8      	it	lt
 8014410:	4618      	movlt	r0, r3
 8014412:	e730      	b.n	8014276 <_printf_float+0xc6>
 8014414:	2301      	movs	r3, #1
 8014416:	464a      	mov	r2, r9
 8014418:	4631      	mov	r1, r6
 801441a:	4628      	mov	r0, r5
 801441c:	47b8      	blx	r7
 801441e:	3001      	adds	r0, #1
 8014420:	f43f af27 	beq.w	8014272 <_printf_float+0xc2>
 8014424:	f108 0801 	add.w	r8, r8, #1
 8014428:	e7e6      	b.n	80143f8 <_printf_float+0x248>
 801442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801442c:	2b00      	cmp	r3, #0
 801442e:	dc39      	bgt.n	80144a4 <_printf_float+0x2f4>
 8014430:	4a1b      	ldr	r2, [pc, #108]	; (80144a0 <_printf_float+0x2f0>)
 8014432:	2301      	movs	r3, #1
 8014434:	4631      	mov	r1, r6
 8014436:	4628      	mov	r0, r5
 8014438:	47b8      	blx	r7
 801443a:	3001      	adds	r0, #1
 801443c:	f43f af19 	beq.w	8014272 <_printf_float+0xc2>
 8014440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014444:	4313      	orrs	r3, r2
 8014446:	d102      	bne.n	801444e <_printf_float+0x29e>
 8014448:	6823      	ldr	r3, [r4, #0]
 801444a:	07d9      	lsls	r1, r3, #31
 801444c:	d5d8      	bpl.n	8014400 <_printf_float+0x250>
 801444e:	ee18 3a10 	vmov	r3, s16
 8014452:	4652      	mov	r2, sl
 8014454:	4631      	mov	r1, r6
 8014456:	4628      	mov	r0, r5
 8014458:	47b8      	blx	r7
 801445a:	3001      	adds	r0, #1
 801445c:	f43f af09 	beq.w	8014272 <_printf_float+0xc2>
 8014460:	f04f 0900 	mov.w	r9, #0
 8014464:	f104 0a1a 	add.w	sl, r4, #26
 8014468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801446a:	425b      	negs	r3, r3
 801446c:	454b      	cmp	r3, r9
 801446e:	dc01      	bgt.n	8014474 <_printf_float+0x2c4>
 8014470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014472:	e792      	b.n	801439a <_printf_float+0x1ea>
 8014474:	2301      	movs	r3, #1
 8014476:	4652      	mov	r2, sl
 8014478:	4631      	mov	r1, r6
 801447a:	4628      	mov	r0, r5
 801447c:	47b8      	blx	r7
 801447e:	3001      	adds	r0, #1
 8014480:	f43f aef7 	beq.w	8014272 <_printf_float+0xc2>
 8014484:	f109 0901 	add.w	r9, r9, #1
 8014488:	e7ee      	b.n	8014468 <_printf_float+0x2b8>
 801448a:	bf00      	nop
 801448c:	7fefffff 	.word	0x7fefffff
 8014490:	08018b54 	.word	0x08018b54
 8014494:	08018b58 	.word	0x08018b58
 8014498:	08018b60 	.word	0x08018b60
 801449c:	08018b5c 	.word	0x08018b5c
 80144a0:	08018b64 	.word	0x08018b64
 80144a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80144a8:	429a      	cmp	r2, r3
 80144aa:	bfa8      	it	ge
 80144ac:	461a      	movge	r2, r3
 80144ae:	2a00      	cmp	r2, #0
 80144b0:	4691      	mov	r9, r2
 80144b2:	dc37      	bgt.n	8014524 <_printf_float+0x374>
 80144b4:	f04f 0b00 	mov.w	fp, #0
 80144b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144bc:	f104 021a 	add.w	r2, r4, #26
 80144c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80144c2:	9305      	str	r3, [sp, #20]
 80144c4:	eba3 0309 	sub.w	r3, r3, r9
 80144c8:	455b      	cmp	r3, fp
 80144ca:	dc33      	bgt.n	8014534 <_printf_float+0x384>
 80144cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80144d0:	429a      	cmp	r2, r3
 80144d2:	db3b      	blt.n	801454c <_printf_float+0x39c>
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	07da      	lsls	r2, r3, #31
 80144d8:	d438      	bmi.n	801454c <_printf_float+0x39c>
 80144da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144dc:	9a05      	ldr	r2, [sp, #20]
 80144de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144e0:	1a9a      	subs	r2, r3, r2
 80144e2:	eba3 0901 	sub.w	r9, r3, r1
 80144e6:	4591      	cmp	r9, r2
 80144e8:	bfa8      	it	ge
 80144ea:	4691      	movge	r9, r2
 80144ec:	f1b9 0f00 	cmp.w	r9, #0
 80144f0:	dc35      	bgt.n	801455e <_printf_float+0x3ae>
 80144f2:	f04f 0800 	mov.w	r8, #0
 80144f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144fa:	f104 0a1a 	add.w	sl, r4, #26
 80144fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014502:	1a9b      	subs	r3, r3, r2
 8014504:	eba3 0309 	sub.w	r3, r3, r9
 8014508:	4543      	cmp	r3, r8
 801450a:	f77f af79 	ble.w	8014400 <_printf_float+0x250>
 801450e:	2301      	movs	r3, #1
 8014510:	4652      	mov	r2, sl
 8014512:	4631      	mov	r1, r6
 8014514:	4628      	mov	r0, r5
 8014516:	47b8      	blx	r7
 8014518:	3001      	adds	r0, #1
 801451a:	f43f aeaa 	beq.w	8014272 <_printf_float+0xc2>
 801451e:	f108 0801 	add.w	r8, r8, #1
 8014522:	e7ec      	b.n	80144fe <_printf_float+0x34e>
 8014524:	4613      	mov	r3, r2
 8014526:	4631      	mov	r1, r6
 8014528:	4642      	mov	r2, r8
 801452a:	4628      	mov	r0, r5
 801452c:	47b8      	blx	r7
 801452e:	3001      	adds	r0, #1
 8014530:	d1c0      	bne.n	80144b4 <_printf_float+0x304>
 8014532:	e69e      	b.n	8014272 <_printf_float+0xc2>
 8014534:	2301      	movs	r3, #1
 8014536:	4631      	mov	r1, r6
 8014538:	4628      	mov	r0, r5
 801453a:	9205      	str	r2, [sp, #20]
 801453c:	47b8      	blx	r7
 801453e:	3001      	adds	r0, #1
 8014540:	f43f ae97 	beq.w	8014272 <_printf_float+0xc2>
 8014544:	9a05      	ldr	r2, [sp, #20]
 8014546:	f10b 0b01 	add.w	fp, fp, #1
 801454a:	e7b9      	b.n	80144c0 <_printf_float+0x310>
 801454c:	ee18 3a10 	vmov	r3, s16
 8014550:	4652      	mov	r2, sl
 8014552:	4631      	mov	r1, r6
 8014554:	4628      	mov	r0, r5
 8014556:	47b8      	blx	r7
 8014558:	3001      	adds	r0, #1
 801455a:	d1be      	bne.n	80144da <_printf_float+0x32a>
 801455c:	e689      	b.n	8014272 <_printf_float+0xc2>
 801455e:	9a05      	ldr	r2, [sp, #20]
 8014560:	464b      	mov	r3, r9
 8014562:	4442      	add	r2, r8
 8014564:	4631      	mov	r1, r6
 8014566:	4628      	mov	r0, r5
 8014568:	47b8      	blx	r7
 801456a:	3001      	adds	r0, #1
 801456c:	d1c1      	bne.n	80144f2 <_printf_float+0x342>
 801456e:	e680      	b.n	8014272 <_printf_float+0xc2>
 8014570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014572:	2a01      	cmp	r2, #1
 8014574:	dc01      	bgt.n	801457a <_printf_float+0x3ca>
 8014576:	07db      	lsls	r3, r3, #31
 8014578:	d538      	bpl.n	80145ec <_printf_float+0x43c>
 801457a:	2301      	movs	r3, #1
 801457c:	4642      	mov	r2, r8
 801457e:	4631      	mov	r1, r6
 8014580:	4628      	mov	r0, r5
 8014582:	47b8      	blx	r7
 8014584:	3001      	adds	r0, #1
 8014586:	f43f ae74 	beq.w	8014272 <_printf_float+0xc2>
 801458a:	ee18 3a10 	vmov	r3, s16
 801458e:	4652      	mov	r2, sl
 8014590:	4631      	mov	r1, r6
 8014592:	4628      	mov	r0, r5
 8014594:	47b8      	blx	r7
 8014596:	3001      	adds	r0, #1
 8014598:	f43f ae6b 	beq.w	8014272 <_printf_float+0xc2>
 801459c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80145a0:	2200      	movs	r2, #0
 80145a2:	2300      	movs	r3, #0
 80145a4:	f7ec fa68 	bl	8000a78 <__aeabi_dcmpeq>
 80145a8:	b9d8      	cbnz	r0, 80145e2 <_printf_float+0x432>
 80145aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145ac:	f108 0201 	add.w	r2, r8, #1
 80145b0:	3b01      	subs	r3, #1
 80145b2:	4631      	mov	r1, r6
 80145b4:	4628      	mov	r0, r5
 80145b6:	47b8      	blx	r7
 80145b8:	3001      	adds	r0, #1
 80145ba:	d10e      	bne.n	80145da <_printf_float+0x42a>
 80145bc:	e659      	b.n	8014272 <_printf_float+0xc2>
 80145be:	2301      	movs	r3, #1
 80145c0:	4652      	mov	r2, sl
 80145c2:	4631      	mov	r1, r6
 80145c4:	4628      	mov	r0, r5
 80145c6:	47b8      	blx	r7
 80145c8:	3001      	adds	r0, #1
 80145ca:	f43f ae52 	beq.w	8014272 <_printf_float+0xc2>
 80145ce:	f108 0801 	add.w	r8, r8, #1
 80145d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145d4:	3b01      	subs	r3, #1
 80145d6:	4543      	cmp	r3, r8
 80145d8:	dcf1      	bgt.n	80145be <_printf_float+0x40e>
 80145da:	464b      	mov	r3, r9
 80145dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80145e0:	e6dc      	b.n	801439c <_printf_float+0x1ec>
 80145e2:	f04f 0800 	mov.w	r8, #0
 80145e6:	f104 0a1a 	add.w	sl, r4, #26
 80145ea:	e7f2      	b.n	80145d2 <_printf_float+0x422>
 80145ec:	2301      	movs	r3, #1
 80145ee:	4642      	mov	r2, r8
 80145f0:	e7df      	b.n	80145b2 <_printf_float+0x402>
 80145f2:	2301      	movs	r3, #1
 80145f4:	464a      	mov	r2, r9
 80145f6:	4631      	mov	r1, r6
 80145f8:	4628      	mov	r0, r5
 80145fa:	47b8      	blx	r7
 80145fc:	3001      	adds	r0, #1
 80145fe:	f43f ae38 	beq.w	8014272 <_printf_float+0xc2>
 8014602:	f108 0801 	add.w	r8, r8, #1
 8014606:	68e3      	ldr	r3, [r4, #12]
 8014608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801460a:	1a5b      	subs	r3, r3, r1
 801460c:	4543      	cmp	r3, r8
 801460e:	dcf0      	bgt.n	80145f2 <_printf_float+0x442>
 8014610:	e6fa      	b.n	8014408 <_printf_float+0x258>
 8014612:	f04f 0800 	mov.w	r8, #0
 8014616:	f104 0919 	add.w	r9, r4, #25
 801461a:	e7f4      	b.n	8014606 <_printf_float+0x456>

0801461c <_printf_common>:
 801461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014620:	4616      	mov	r6, r2
 8014622:	4699      	mov	r9, r3
 8014624:	688a      	ldr	r2, [r1, #8]
 8014626:	690b      	ldr	r3, [r1, #16]
 8014628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801462c:	4293      	cmp	r3, r2
 801462e:	bfb8      	it	lt
 8014630:	4613      	movlt	r3, r2
 8014632:	6033      	str	r3, [r6, #0]
 8014634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014638:	4607      	mov	r7, r0
 801463a:	460c      	mov	r4, r1
 801463c:	b10a      	cbz	r2, 8014642 <_printf_common+0x26>
 801463e:	3301      	adds	r3, #1
 8014640:	6033      	str	r3, [r6, #0]
 8014642:	6823      	ldr	r3, [r4, #0]
 8014644:	0699      	lsls	r1, r3, #26
 8014646:	bf42      	ittt	mi
 8014648:	6833      	ldrmi	r3, [r6, #0]
 801464a:	3302      	addmi	r3, #2
 801464c:	6033      	strmi	r3, [r6, #0]
 801464e:	6825      	ldr	r5, [r4, #0]
 8014650:	f015 0506 	ands.w	r5, r5, #6
 8014654:	d106      	bne.n	8014664 <_printf_common+0x48>
 8014656:	f104 0a19 	add.w	sl, r4, #25
 801465a:	68e3      	ldr	r3, [r4, #12]
 801465c:	6832      	ldr	r2, [r6, #0]
 801465e:	1a9b      	subs	r3, r3, r2
 8014660:	42ab      	cmp	r3, r5
 8014662:	dc26      	bgt.n	80146b2 <_printf_common+0x96>
 8014664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014668:	1e13      	subs	r3, r2, #0
 801466a:	6822      	ldr	r2, [r4, #0]
 801466c:	bf18      	it	ne
 801466e:	2301      	movne	r3, #1
 8014670:	0692      	lsls	r2, r2, #26
 8014672:	d42b      	bmi.n	80146cc <_printf_common+0xb0>
 8014674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014678:	4649      	mov	r1, r9
 801467a:	4638      	mov	r0, r7
 801467c:	47c0      	blx	r8
 801467e:	3001      	adds	r0, #1
 8014680:	d01e      	beq.n	80146c0 <_printf_common+0xa4>
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	68e5      	ldr	r5, [r4, #12]
 8014686:	6832      	ldr	r2, [r6, #0]
 8014688:	f003 0306 	and.w	r3, r3, #6
 801468c:	2b04      	cmp	r3, #4
 801468e:	bf08      	it	eq
 8014690:	1aad      	subeq	r5, r5, r2
 8014692:	68a3      	ldr	r3, [r4, #8]
 8014694:	6922      	ldr	r2, [r4, #16]
 8014696:	bf0c      	ite	eq
 8014698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801469c:	2500      	movne	r5, #0
 801469e:	4293      	cmp	r3, r2
 80146a0:	bfc4      	itt	gt
 80146a2:	1a9b      	subgt	r3, r3, r2
 80146a4:	18ed      	addgt	r5, r5, r3
 80146a6:	2600      	movs	r6, #0
 80146a8:	341a      	adds	r4, #26
 80146aa:	42b5      	cmp	r5, r6
 80146ac:	d11a      	bne.n	80146e4 <_printf_common+0xc8>
 80146ae:	2000      	movs	r0, #0
 80146b0:	e008      	b.n	80146c4 <_printf_common+0xa8>
 80146b2:	2301      	movs	r3, #1
 80146b4:	4652      	mov	r2, sl
 80146b6:	4649      	mov	r1, r9
 80146b8:	4638      	mov	r0, r7
 80146ba:	47c0      	blx	r8
 80146bc:	3001      	adds	r0, #1
 80146be:	d103      	bne.n	80146c8 <_printf_common+0xac>
 80146c0:	f04f 30ff 	mov.w	r0, #4294967295
 80146c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c8:	3501      	adds	r5, #1
 80146ca:	e7c6      	b.n	801465a <_printf_common+0x3e>
 80146cc:	18e1      	adds	r1, r4, r3
 80146ce:	1c5a      	adds	r2, r3, #1
 80146d0:	2030      	movs	r0, #48	; 0x30
 80146d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80146d6:	4422      	add	r2, r4
 80146d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80146dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146e0:	3302      	adds	r3, #2
 80146e2:	e7c7      	b.n	8014674 <_printf_common+0x58>
 80146e4:	2301      	movs	r3, #1
 80146e6:	4622      	mov	r2, r4
 80146e8:	4649      	mov	r1, r9
 80146ea:	4638      	mov	r0, r7
 80146ec:	47c0      	blx	r8
 80146ee:	3001      	adds	r0, #1
 80146f0:	d0e6      	beq.n	80146c0 <_printf_common+0xa4>
 80146f2:	3601      	adds	r6, #1
 80146f4:	e7d9      	b.n	80146aa <_printf_common+0x8e>
	...

080146f8 <_printf_i>:
 80146f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146fc:	7e0f      	ldrb	r7, [r1, #24]
 80146fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014700:	2f78      	cmp	r7, #120	; 0x78
 8014702:	4691      	mov	r9, r2
 8014704:	4680      	mov	r8, r0
 8014706:	460c      	mov	r4, r1
 8014708:	469a      	mov	sl, r3
 801470a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801470e:	d807      	bhi.n	8014720 <_printf_i+0x28>
 8014710:	2f62      	cmp	r7, #98	; 0x62
 8014712:	d80a      	bhi.n	801472a <_printf_i+0x32>
 8014714:	2f00      	cmp	r7, #0
 8014716:	f000 80d8 	beq.w	80148ca <_printf_i+0x1d2>
 801471a:	2f58      	cmp	r7, #88	; 0x58
 801471c:	f000 80a3 	beq.w	8014866 <_printf_i+0x16e>
 8014720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014728:	e03a      	b.n	80147a0 <_printf_i+0xa8>
 801472a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801472e:	2b15      	cmp	r3, #21
 8014730:	d8f6      	bhi.n	8014720 <_printf_i+0x28>
 8014732:	a101      	add	r1, pc, #4	; (adr r1, 8014738 <_printf_i+0x40>)
 8014734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014738:	08014791 	.word	0x08014791
 801473c:	080147a5 	.word	0x080147a5
 8014740:	08014721 	.word	0x08014721
 8014744:	08014721 	.word	0x08014721
 8014748:	08014721 	.word	0x08014721
 801474c:	08014721 	.word	0x08014721
 8014750:	080147a5 	.word	0x080147a5
 8014754:	08014721 	.word	0x08014721
 8014758:	08014721 	.word	0x08014721
 801475c:	08014721 	.word	0x08014721
 8014760:	08014721 	.word	0x08014721
 8014764:	080148b1 	.word	0x080148b1
 8014768:	080147d5 	.word	0x080147d5
 801476c:	08014893 	.word	0x08014893
 8014770:	08014721 	.word	0x08014721
 8014774:	08014721 	.word	0x08014721
 8014778:	080148d3 	.word	0x080148d3
 801477c:	08014721 	.word	0x08014721
 8014780:	080147d5 	.word	0x080147d5
 8014784:	08014721 	.word	0x08014721
 8014788:	08014721 	.word	0x08014721
 801478c:	0801489b 	.word	0x0801489b
 8014790:	682b      	ldr	r3, [r5, #0]
 8014792:	1d1a      	adds	r2, r3, #4
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	602a      	str	r2, [r5, #0]
 8014798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801479c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80147a0:	2301      	movs	r3, #1
 80147a2:	e0a3      	b.n	80148ec <_printf_i+0x1f4>
 80147a4:	6820      	ldr	r0, [r4, #0]
 80147a6:	6829      	ldr	r1, [r5, #0]
 80147a8:	0606      	lsls	r6, r0, #24
 80147aa:	f101 0304 	add.w	r3, r1, #4
 80147ae:	d50a      	bpl.n	80147c6 <_printf_i+0xce>
 80147b0:	680e      	ldr	r6, [r1, #0]
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	2e00      	cmp	r6, #0
 80147b6:	da03      	bge.n	80147c0 <_printf_i+0xc8>
 80147b8:	232d      	movs	r3, #45	; 0x2d
 80147ba:	4276      	negs	r6, r6
 80147bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147c0:	485e      	ldr	r0, [pc, #376]	; (801493c <_printf_i+0x244>)
 80147c2:	230a      	movs	r3, #10
 80147c4:	e019      	b.n	80147fa <_printf_i+0x102>
 80147c6:	680e      	ldr	r6, [r1, #0]
 80147c8:	602b      	str	r3, [r5, #0]
 80147ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80147ce:	bf18      	it	ne
 80147d0:	b236      	sxthne	r6, r6
 80147d2:	e7ef      	b.n	80147b4 <_printf_i+0xbc>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	6820      	ldr	r0, [r4, #0]
 80147d8:	1d19      	adds	r1, r3, #4
 80147da:	6029      	str	r1, [r5, #0]
 80147dc:	0601      	lsls	r1, r0, #24
 80147de:	d501      	bpl.n	80147e4 <_printf_i+0xec>
 80147e0:	681e      	ldr	r6, [r3, #0]
 80147e2:	e002      	b.n	80147ea <_printf_i+0xf2>
 80147e4:	0646      	lsls	r6, r0, #25
 80147e6:	d5fb      	bpl.n	80147e0 <_printf_i+0xe8>
 80147e8:	881e      	ldrh	r6, [r3, #0]
 80147ea:	4854      	ldr	r0, [pc, #336]	; (801493c <_printf_i+0x244>)
 80147ec:	2f6f      	cmp	r7, #111	; 0x6f
 80147ee:	bf0c      	ite	eq
 80147f0:	2308      	moveq	r3, #8
 80147f2:	230a      	movne	r3, #10
 80147f4:	2100      	movs	r1, #0
 80147f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80147fa:	6865      	ldr	r5, [r4, #4]
 80147fc:	60a5      	str	r5, [r4, #8]
 80147fe:	2d00      	cmp	r5, #0
 8014800:	bfa2      	ittt	ge
 8014802:	6821      	ldrge	r1, [r4, #0]
 8014804:	f021 0104 	bicge.w	r1, r1, #4
 8014808:	6021      	strge	r1, [r4, #0]
 801480a:	b90e      	cbnz	r6, 8014810 <_printf_i+0x118>
 801480c:	2d00      	cmp	r5, #0
 801480e:	d04d      	beq.n	80148ac <_printf_i+0x1b4>
 8014810:	4615      	mov	r5, r2
 8014812:	fbb6 f1f3 	udiv	r1, r6, r3
 8014816:	fb03 6711 	mls	r7, r3, r1, r6
 801481a:	5dc7      	ldrb	r7, [r0, r7]
 801481c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014820:	4637      	mov	r7, r6
 8014822:	42bb      	cmp	r3, r7
 8014824:	460e      	mov	r6, r1
 8014826:	d9f4      	bls.n	8014812 <_printf_i+0x11a>
 8014828:	2b08      	cmp	r3, #8
 801482a:	d10b      	bne.n	8014844 <_printf_i+0x14c>
 801482c:	6823      	ldr	r3, [r4, #0]
 801482e:	07de      	lsls	r6, r3, #31
 8014830:	d508      	bpl.n	8014844 <_printf_i+0x14c>
 8014832:	6923      	ldr	r3, [r4, #16]
 8014834:	6861      	ldr	r1, [r4, #4]
 8014836:	4299      	cmp	r1, r3
 8014838:	bfde      	ittt	le
 801483a:	2330      	movle	r3, #48	; 0x30
 801483c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014844:	1b52      	subs	r2, r2, r5
 8014846:	6122      	str	r2, [r4, #16]
 8014848:	f8cd a000 	str.w	sl, [sp]
 801484c:	464b      	mov	r3, r9
 801484e:	aa03      	add	r2, sp, #12
 8014850:	4621      	mov	r1, r4
 8014852:	4640      	mov	r0, r8
 8014854:	f7ff fee2 	bl	801461c <_printf_common>
 8014858:	3001      	adds	r0, #1
 801485a:	d14c      	bne.n	80148f6 <_printf_i+0x1fe>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	b004      	add	sp, #16
 8014862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014866:	4835      	ldr	r0, [pc, #212]	; (801493c <_printf_i+0x244>)
 8014868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801486c:	6829      	ldr	r1, [r5, #0]
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	f851 6b04 	ldr.w	r6, [r1], #4
 8014874:	6029      	str	r1, [r5, #0]
 8014876:	061d      	lsls	r5, r3, #24
 8014878:	d514      	bpl.n	80148a4 <_printf_i+0x1ac>
 801487a:	07df      	lsls	r7, r3, #31
 801487c:	bf44      	itt	mi
 801487e:	f043 0320 	orrmi.w	r3, r3, #32
 8014882:	6023      	strmi	r3, [r4, #0]
 8014884:	b91e      	cbnz	r6, 801488e <_printf_i+0x196>
 8014886:	6823      	ldr	r3, [r4, #0]
 8014888:	f023 0320 	bic.w	r3, r3, #32
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	2310      	movs	r3, #16
 8014890:	e7b0      	b.n	80147f4 <_printf_i+0xfc>
 8014892:	6823      	ldr	r3, [r4, #0]
 8014894:	f043 0320 	orr.w	r3, r3, #32
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	2378      	movs	r3, #120	; 0x78
 801489c:	4828      	ldr	r0, [pc, #160]	; (8014940 <_printf_i+0x248>)
 801489e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80148a2:	e7e3      	b.n	801486c <_printf_i+0x174>
 80148a4:	0659      	lsls	r1, r3, #25
 80148a6:	bf48      	it	mi
 80148a8:	b2b6      	uxthmi	r6, r6
 80148aa:	e7e6      	b.n	801487a <_printf_i+0x182>
 80148ac:	4615      	mov	r5, r2
 80148ae:	e7bb      	b.n	8014828 <_printf_i+0x130>
 80148b0:	682b      	ldr	r3, [r5, #0]
 80148b2:	6826      	ldr	r6, [r4, #0]
 80148b4:	6961      	ldr	r1, [r4, #20]
 80148b6:	1d18      	adds	r0, r3, #4
 80148b8:	6028      	str	r0, [r5, #0]
 80148ba:	0635      	lsls	r5, r6, #24
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	d501      	bpl.n	80148c4 <_printf_i+0x1cc>
 80148c0:	6019      	str	r1, [r3, #0]
 80148c2:	e002      	b.n	80148ca <_printf_i+0x1d2>
 80148c4:	0670      	lsls	r0, r6, #25
 80148c6:	d5fb      	bpl.n	80148c0 <_printf_i+0x1c8>
 80148c8:	8019      	strh	r1, [r3, #0]
 80148ca:	2300      	movs	r3, #0
 80148cc:	6123      	str	r3, [r4, #16]
 80148ce:	4615      	mov	r5, r2
 80148d0:	e7ba      	b.n	8014848 <_printf_i+0x150>
 80148d2:	682b      	ldr	r3, [r5, #0]
 80148d4:	1d1a      	adds	r2, r3, #4
 80148d6:	602a      	str	r2, [r5, #0]
 80148d8:	681d      	ldr	r5, [r3, #0]
 80148da:	6862      	ldr	r2, [r4, #4]
 80148dc:	2100      	movs	r1, #0
 80148de:	4628      	mov	r0, r5
 80148e0:	f7eb fc56 	bl	8000190 <memchr>
 80148e4:	b108      	cbz	r0, 80148ea <_printf_i+0x1f2>
 80148e6:	1b40      	subs	r0, r0, r5
 80148e8:	6060      	str	r0, [r4, #4]
 80148ea:	6863      	ldr	r3, [r4, #4]
 80148ec:	6123      	str	r3, [r4, #16]
 80148ee:	2300      	movs	r3, #0
 80148f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148f4:	e7a8      	b.n	8014848 <_printf_i+0x150>
 80148f6:	6923      	ldr	r3, [r4, #16]
 80148f8:	462a      	mov	r2, r5
 80148fa:	4649      	mov	r1, r9
 80148fc:	4640      	mov	r0, r8
 80148fe:	47d0      	blx	sl
 8014900:	3001      	adds	r0, #1
 8014902:	d0ab      	beq.n	801485c <_printf_i+0x164>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	079b      	lsls	r3, r3, #30
 8014908:	d413      	bmi.n	8014932 <_printf_i+0x23a>
 801490a:	68e0      	ldr	r0, [r4, #12]
 801490c:	9b03      	ldr	r3, [sp, #12]
 801490e:	4298      	cmp	r0, r3
 8014910:	bfb8      	it	lt
 8014912:	4618      	movlt	r0, r3
 8014914:	e7a4      	b.n	8014860 <_printf_i+0x168>
 8014916:	2301      	movs	r3, #1
 8014918:	4632      	mov	r2, r6
 801491a:	4649      	mov	r1, r9
 801491c:	4640      	mov	r0, r8
 801491e:	47d0      	blx	sl
 8014920:	3001      	adds	r0, #1
 8014922:	d09b      	beq.n	801485c <_printf_i+0x164>
 8014924:	3501      	adds	r5, #1
 8014926:	68e3      	ldr	r3, [r4, #12]
 8014928:	9903      	ldr	r1, [sp, #12]
 801492a:	1a5b      	subs	r3, r3, r1
 801492c:	42ab      	cmp	r3, r5
 801492e:	dcf2      	bgt.n	8014916 <_printf_i+0x21e>
 8014930:	e7eb      	b.n	801490a <_printf_i+0x212>
 8014932:	2500      	movs	r5, #0
 8014934:	f104 0619 	add.w	r6, r4, #25
 8014938:	e7f5      	b.n	8014926 <_printf_i+0x22e>
 801493a:	bf00      	nop
 801493c:	08018b66 	.word	0x08018b66
 8014940:	08018b77 	.word	0x08018b77

08014944 <iprintf>:
 8014944:	b40f      	push	{r0, r1, r2, r3}
 8014946:	4b0a      	ldr	r3, [pc, #40]	; (8014970 <iprintf+0x2c>)
 8014948:	b513      	push	{r0, r1, r4, lr}
 801494a:	681c      	ldr	r4, [r3, #0]
 801494c:	b124      	cbz	r4, 8014958 <iprintf+0x14>
 801494e:	69a3      	ldr	r3, [r4, #24]
 8014950:	b913      	cbnz	r3, 8014958 <iprintf+0x14>
 8014952:	4620      	mov	r0, r4
 8014954:	f001 f924 	bl	8015ba0 <__sinit>
 8014958:	ab05      	add	r3, sp, #20
 801495a:	9a04      	ldr	r2, [sp, #16]
 801495c:	68a1      	ldr	r1, [r4, #8]
 801495e:	9301      	str	r3, [sp, #4]
 8014960:	4620      	mov	r0, r4
 8014962:	f002 f82f 	bl	80169c4 <_vfiprintf_r>
 8014966:	b002      	add	sp, #8
 8014968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801496c:	b004      	add	sp, #16
 801496e:	4770      	bx	lr
 8014970:	20000244 	.word	0x20000244

08014974 <putchar>:
 8014974:	4b09      	ldr	r3, [pc, #36]	; (801499c <putchar+0x28>)
 8014976:	b513      	push	{r0, r1, r4, lr}
 8014978:	681c      	ldr	r4, [r3, #0]
 801497a:	4601      	mov	r1, r0
 801497c:	b134      	cbz	r4, 801498c <putchar+0x18>
 801497e:	69a3      	ldr	r3, [r4, #24]
 8014980:	b923      	cbnz	r3, 801498c <putchar+0x18>
 8014982:	9001      	str	r0, [sp, #4]
 8014984:	4620      	mov	r0, r4
 8014986:	f001 f90b 	bl	8015ba0 <__sinit>
 801498a:	9901      	ldr	r1, [sp, #4]
 801498c:	68a2      	ldr	r2, [r4, #8]
 801498e:	4620      	mov	r0, r4
 8014990:	b002      	add	sp, #8
 8014992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014996:	f002 b945 	b.w	8016c24 <_putc_r>
 801499a:	bf00      	nop
 801499c:	20000244 	.word	0x20000244

080149a0 <_puts_r>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	460e      	mov	r6, r1
 80149a4:	4605      	mov	r5, r0
 80149a6:	b118      	cbz	r0, 80149b0 <_puts_r+0x10>
 80149a8:	6983      	ldr	r3, [r0, #24]
 80149aa:	b90b      	cbnz	r3, 80149b0 <_puts_r+0x10>
 80149ac:	f001 f8f8 	bl	8015ba0 <__sinit>
 80149b0:	69ab      	ldr	r3, [r5, #24]
 80149b2:	68ac      	ldr	r4, [r5, #8]
 80149b4:	b913      	cbnz	r3, 80149bc <_puts_r+0x1c>
 80149b6:	4628      	mov	r0, r5
 80149b8:	f001 f8f2 	bl	8015ba0 <__sinit>
 80149bc:	4b2c      	ldr	r3, [pc, #176]	; (8014a70 <_puts_r+0xd0>)
 80149be:	429c      	cmp	r4, r3
 80149c0:	d120      	bne.n	8014a04 <_puts_r+0x64>
 80149c2:	686c      	ldr	r4, [r5, #4]
 80149c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149c6:	07db      	lsls	r3, r3, #31
 80149c8:	d405      	bmi.n	80149d6 <_puts_r+0x36>
 80149ca:	89a3      	ldrh	r3, [r4, #12]
 80149cc:	0598      	lsls	r0, r3, #22
 80149ce:	d402      	bmi.n	80149d6 <_puts_r+0x36>
 80149d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149d2:	f001 f988 	bl	8015ce6 <__retarget_lock_acquire_recursive>
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	0719      	lsls	r1, r3, #28
 80149da:	d51d      	bpl.n	8014a18 <_puts_r+0x78>
 80149dc:	6923      	ldr	r3, [r4, #16]
 80149de:	b1db      	cbz	r3, 8014a18 <_puts_r+0x78>
 80149e0:	3e01      	subs	r6, #1
 80149e2:	68a3      	ldr	r3, [r4, #8]
 80149e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80149e8:	3b01      	subs	r3, #1
 80149ea:	60a3      	str	r3, [r4, #8]
 80149ec:	bb39      	cbnz	r1, 8014a3e <_puts_r+0x9e>
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	da38      	bge.n	8014a64 <_puts_r+0xc4>
 80149f2:	4622      	mov	r2, r4
 80149f4:	210a      	movs	r1, #10
 80149f6:	4628      	mov	r0, r5
 80149f8:	f000 f87c 	bl	8014af4 <__swbuf_r>
 80149fc:	3001      	adds	r0, #1
 80149fe:	d011      	beq.n	8014a24 <_puts_r+0x84>
 8014a00:	250a      	movs	r5, #10
 8014a02:	e011      	b.n	8014a28 <_puts_r+0x88>
 8014a04:	4b1b      	ldr	r3, [pc, #108]	; (8014a74 <_puts_r+0xd4>)
 8014a06:	429c      	cmp	r4, r3
 8014a08:	d101      	bne.n	8014a0e <_puts_r+0x6e>
 8014a0a:	68ac      	ldr	r4, [r5, #8]
 8014a0c:	e7da      	b.n	80149c4 <_puts_r+0x24>
 8014a0e:	4b1a      	ldr	r3, [pc, #104]	; (8014a78 <_puts_r+0xd8>)
 8014a10:	429c      	cmp	r4, r3
 8014a12:	bf08      	it	eq
 8014a14:	68ec      	ldreq	r4, [r5, #12]
 8014a16:	e7d5      	b.n	80149c4 <_puts_r+0x24>
 8014a18:	4621      	mov	r1, r4
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	f000 f8bc 	bl	8014b98 <__swsetup_r>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d0dd      	beq.n	80149e0 <_puts_r+0x40>
 8014a24:	f04f 35ff 	mov.w	r5, #4294967295
 8014a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a2a:	07da      	lsls	r2, r3, #31
 8014a2c:	d405      	bmi.n	8014a3a <_puts_r+0x9a>
 8014a2e:	89a3      	ldrh	r3, [r4, #12]
 8014a30:	059b      	lsls	r3, r3, #22
 8014a32:	d402      	bmi.n	8014a3a <_puts_r+0x9a>
 8014a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a36:	f001 f957 	bl	8015ce8 <__retarget_lock_release_recursive>
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	bd70      	pop	{r4, r5, r6, pc}
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	da04      	bge.n	8014a4c <_puts_r+0xac>
 8014a42:	69a2      	ldr	r2, [r4, #24]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	dc06      	bgt.n	8014a56 <_puts_r+0xb6>
 8014a48:	290a      	cmp	r1, #10
 8014a4a:	d004      	beq.n	8014a56 <_puts_r+0xb6>
 8014a4c:	6823      	ldr	r3, [r4, #0]
 8014a4e:	1c5a      	adds	r2, r3, #1
 8014a50:	6022      	str	r2, [r4, #0]
 8014a52:	7019      	strb	r1, [r3, #0]
 8014a54:	e7c5      	b.n	80149e2 <_puts_r+0x42>
 8014a56:	4622      	mov	r2, r4
 8014a58:	4628      	mov	r0, r5
 8014a5a:	f000 f84b 	bl	8014af4 <__swbuf_r>
 8014a5e:	3001      	adds	r0, #1
 8014a60:	d1bf      	bne.n	80149e2 <_puts_r+0x42>
 8014a62:	e7df      	b.n	8014a24 <_puts_r+0x84>
 8014a64:	6823      	ldr	r3, [r4, #0]
 8014a66:	250a      	movs	r5, #10
 8014a68:	1c5a      	adds	r2, r3, #1
 8014a6a:	6022      	str	r2, [r4, #0]
 8014a6c:	701d      	strb	r5, [r3, #0]
 8014a6e:	e7db      	b.n	8014a28 <_puts_r+0x88>
 8014a70:	08018c38 	.word	0x08018c38
 8014a74:	08018c58 	.word	0x08018c58
 8014a78:	08018c18 	.word	0x08018c18

08014a7c <puts>:
 8014a7c:	4b02      	ldr	r3, [pc, #8]	; (8014a88 <puts+0xc>)
 8014a7e:	4601      	mov	r1, r0
 8014a80:	6818      	ldr	r0, [r3, #0]
 8014a82:	f7ff bf8d 	b.w	80149a0 <_puts_r>
 8014a86:	bf00      	nop
 8014a88:	20000244 	.word	0x20000244

08014a8c <siprintf>:
 8014a8c:	b40e      	push	{r1, r2, r3}
 8014a8e:	b500      	push	{lr}
 8014a90:	b09c      	sub	sp, #112	; 0x70
 8014a92:	ab1d      	add	r3, sp, #116	; 0x74
 8014a94:	9002      	str	r0, [sp, #8]
 8014a96:	9006      	str	r0, [sp, #24]
 8014a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a9c:	4809      	ldr	r0, [pc, #36]	; (8014ac4 <siprintf+0x38>)
 8014a9e:	9107      	str	r1, [sp, #28]
 8014aa0:	9104      	str	r1, [sp, #16]
 8014aa2:	4909      	ldr	r1, [pc, #36]	; (8014ac8 <siprintf+0x3c>)
 8014aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aa8:	9105      	str	r1, [sp, #20]
 8014aaa:	6800      	ldr	r0, [r0, #0]
 8014aac:	9301      	str	r3, [sp, #4]
 8014aae:	a902      	add	r1, sp, #8
 8014ab0:	f001 fe5e 	bl	8016770 <_svfiprintf_r>
 8014ab4:	9b02      	ldr	r3, [sp, #8]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	701a      	strb	r2, [r3, #0]
 8014aba:	b01c      	add	sp, #112	; 0x70
 8014abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ac0:	b003      	add	sp, #12
 8014ac2:	4770      	bx	lr
 8014ac4:	20000244 	.word	0x20000244
 8014ac8:	ffff0208 	.word	0xffff0208

08014acc <strrchr>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	4603      	mov	r3, r0
 8014ad0:	460c      	mov	r4, r1
 8014ad2:	b969      	cbnz	r1, 8014af0 <strrchr+0x24>
 8014ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ad8:	f002 b93f 	b.w	8016d5a <strchr>
 8014adc:	1c43      	adds	r3, r0, #1
 8014ade:	4605      	mov	r5, r0
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f002 f939 	bl	8016d5a <strchr>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d1f7      	bne.n	8014adc <strrchr+0x10>
 8014aec:	4628      	mov	r0, r5
 8014aee:	bd38      	pop	{r3, r4, r5, pc}
 8014af0:	2500      	movs	r5, #0
 8014af2:	e7f5      	b.n	8014ae0 <strrchr+0x14>

08014af4 <__swbuf_r>:
 8014af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af6:	460e      	mov	r6, r1
 8014af8:	4614      	mov	r4, r2
 8014afa:	4605      	mov	r5, r0
 8014afc:	b118      	cbz	r0, 8014b06 <__swbuf_r+0x12>
 8014afe:	6983      	ldr	r3, [r0, #24]
 8014b00:	b90b      	cbnz	r3, 8014b06 <__swbuf_r+0x12>
 8014b02:	f001 f84d 	bl	8015ba0 <__sinit>
 8014b06:	4b21      	ldr	r3, [pc, #132]	; (8014b8c <__swbuf_r+0x98>)
 8014b08:	429c      	cmp	r4, r3
 8014b0a:	d12b      	bne.n	8014b64 <__swbuf_r+0x70>
 8014b0c:	686c      	ldr	r4, [r5, #4]
 8014b0e:	69a3      	ldr	r3, [r4, #24]
 8014b10:	60a3      	str	r3, [r4, #8]
 8014b12:	89a3      	ldrh	r3, [r4, #12]
 8014b14:	071a      	lsls	r2, r3, #28
 8014b16:	d52f      	bpl.n	8014b78 <__swbuf_r+0x84>
 8014b18:	6923      	ldr	r3, [r4, #16]
 8014b1a:	b36b      	cbz	r3, 8014b78 <__swbuf_r+0x84>
 8014b1c:	6923      	ldr	r3, [r4, #16]
 8014b1e:	6820      	ldr	r0, [r4, #0]
 8014b20:	1ac0      	subs	r0, r0, r3
 8014b22:	6963      	ldr	r3, [r4, #20]
 8014b24:	b2f6      	uxtb	r6, r6
 8014b26:	4283      	cmp	r3, r0
 8014b28:	4637      	mov	r7, r6
 8014b2a:	dc04      	bgt.n	8014b36 <__swbuf_r+0x42>
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4628      	mov	r0, r5
 8014b30:	f000 ffa2 	bl	8015a78 <_fflush_r>
 8014b34:	bb30      	cbnz	r0, 8014b84 <__swbuf_r+0x90>
 8014b36:	68a3      	ldr	r3, [r4, #8]
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	60a3      	str	r3, [r4, #8]
 8014b3c:	6823      	ldr	r3, [r4, #0]
 8014b3e:	1c5a      	adds	r2, r3, #1
 8014b40:	6022      	str	r2, [r4, #0]
 8014b42:	701e      	strb	r6, [r3, #0]
 8014b44:	6963      	ldr	r3, [r4, #20]
 8014b46:	3001      	adds	r0, #1
 8014b48:	4283      	cmp	r3, r0
 8014b4a:	d004      	beq.n	8014b56 <__swbuf_r+0x62>
 8014b4c:	89a3      	ldrh	r3, [r4, #12]
 8014b4e:	07db      	lsls	r3, r3, #31
 8014b50:	d506      	bpl.n	8014b60 <__swbuf_r+0x6c>
 8014b52:	2e0a      	cmp	r6, #10
 8014b54:	d104      	bne.n	8014b60 <__swbuf_r+0x6c>
 8014b56:	4621      	mov	r1, r4
 8014b58:	4628      	mov	r0, r5
 8014b5a:	f000 ff8d 	bl	8015a78 <_fflush_r>
 8014b5e:	b988      	cbnz	r0, 8014b84 <__swbuf_r+0x90>
 8014b60:	4638      	mov	r0, r7
 8014b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b64:	4b0a      	ldr	r3, [pc, #40]	; (8014b90 <__swbuf_r+0x9c>)
 8014b66:	429c      	cmp	r4, r3
 8014b68:	d101      	bne.n	8014b6e <__swbuf_r+0x7a>
 8014b6a:	68ac      	ldr	r4, [r5, #8]
 8014b6c:	e7cf      	b.n	8014b0e <__swbuf_r+0x1a>
 8014b6e:	4b09      	ldr	r3, [pc, #36]	; (8014b94 <__swbuf_r+0xa0>)
 8014b70:	429c      	cmp	r4, r3
 8014b72:	bf08      	it	eq
 8014b74:	68ec      	ldreq	r4, [r5, #12]
 8014b76:	e7ca      	b.n	8014b0e <__swbuf_r+0x1a>
 8014b78:	4621      	mov	r1, r4
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f000 f80c 	bl	8014b98 <__swsetup_r>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d0cb      	beq.n	8014b1c <__swbuf_r+0x28>
 8014b84:	f04f 37ff 	mov.w	r7, #4294967295
 8014b88:	e7ea      	b.n	8014b60 <__swbuf_r+0x6c>
 8014b8a:	bf00      	nop
 8014b8c:	08018c38 	.word	0x08018c38
 8014b90:	08018c58 	.word	0x08018c58
 8014b94:	08018c18 	.word	0x08018c18

08014b98 <__swsetup_r>:
 8014b98:	4b32      	ldr	r3, [pc, #200]	; (8014c64 <__swsetup_r+0xcc>)
 8014b9a:	b570      	push	{r4, r5, r6, lr}
 8014b9c:	681d      	ldr	r5, [r3, #0]
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	460c      	mov	r4, r1
 8014ba2:	b125      	cbz	r5, 8014bae <__swsetup_r+0x16>
 8014ba4:	69ab      	ldr	r3, [r5, #24]
 8014ba6:	b913      	cbnz	r3, 8014bae <__swsetup_r+0x16>
 8014ba8:	4628      	mov	r0, r5
 8014baa:	f000 fff9 	bl	8015ba0 <__sinit>
 8014bae:	4b2e      	ldr	r3, [pc, #184]	; (8014c68 <__swsetup_r+0xd0>)
 8014bb0:	429c      	cmp	r4, r3
 8014bb2:	d10f      	bne.n	8014bd4 <__swsetup_r+0x3c>
 8014bb4:	686c      	ldr	r4, [r5, #4]
 8014bb6:	89a3      	ldrh	r3, [r4, #12]
 8014bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bbc:	0719      	lsls	r1, r3, #28
 8014bbe:	d42c      	bmi.n	8014c1a <__swsetup_r+0x82>
 8014bc0:	06dd      	lsls	r5, r3, #27
 8014bc2:	d411      	bmi.n	8014be8 <__swsetup_r+0x50>
 8014bc4:	2309      	movs	r3, #9
 8014bc6:	6033      	str	r3, [r6, #0]
 8014bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014bcc:	81a3      	strh	r3, [r4, #12]
 8014bce:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd2:	e03e      	b.n	8014c52 <__swsetup_r+0xba>
 8014bd4:	4b25      	ldr	r3, [pc, #148]	; (8014c6c <__swsetup_r+0xd4>)
 8014bd6:	429c      	cmp	r4, r3
 8014bd8:	d101      	bne.n	8014bde <__swsetup_r+0x46>
 8014bda:	68ac      	ldr	r4, [r5, #8]
 8014bdc:	e7eb      	b.n	8014bb6 <__swsetup_r+0x1e>
 8014bde:	4b24      	ldr	r3, [pc, #144]	; (8014c70 <__swsetup_r+0xd8>)
 8014be0:	429c      	cmp	r4, r3
 8014be2:	bf08      	it	eq
 8014be4:	68ec      	ldreq	r4, [r5, #12]
 8014be6:	e7e6      	b.n	8014bb6 <__swsetup_r+0x1e>
 8014be8:	0758      	lsls	r0, r3, #29
 8014bea:	d512      	bpl.n	8014c12 <__swsetup_r+0x7a>
 8014bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bee:	b141      	cbz	r1, 8014c02 <__swsetup_r+0x6a>
 8014bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bf4:	4299      	cmp	r1, r3
 8014bf6:	d002      	beq.n	8014bfe <__swsetup_r+0x66>
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f001 fc7d 	bl	80164f8 <_free_r>
 8014bfe:	2300      	movs	r3, #0
 8014c00:	6363      	str	r3, [r4, #52]	; 0x34
 8014c02:	89a3      	ldrh	r3, [r4, #12]
 8014c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c08:	81a3      	strh	r3, [r4, #12]
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	6063      	str	r3, [r4, #4]
 8014c0e:	6923      	ldr	r3, [r4, #16]
 8014c10:	6023      	str	r3, [r4, #0]
 8014c12:	89a3      	ldrh	r3, [r4, #12]
 8014c14:	f043 0308 	orr.w	r3, r3, #8
 8014c18:	81a3      	strh	r3, [r4, #12]
 8014c1a:	6923      	ldr	r3, [r4, #16]
 8014c1c:	b94b      	cbnz	r3, 8014c32 <__swsetup_r+0x9a>
 8014c1e:	89a3      	ldrh	r3, [r4, #12]
 8014c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c28:	d003      	beq.n	8014c32 <__swsetup_r+0x9a>
 8014c2a:	4621      	mov	r1, r4
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	f001 f881 	bl	8015d34 <__smakebuf_r>
 8014c32:	89a0      	ldrh	r0, [r4, #12]
 8014c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c38:	f010 0301 	ands.w	r3, r0, #1
 8014c3c:	d00a      	beq.n	8014c54 <__swsetup_r+0xbc>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	60a3      	str	r3, [r4, #8]
 8014c42:	6963      	ldr	r3, [r4, #20]
 8014c44:	425b      	negs	r3, r3
 8014c46:	61a3      	str	r3, [r4, #24]
 8014c48:	6923      	ldr	r3, [r4, #16]
 8014c4a:	b943      	cbnz	r3, 8014c5e <__swsetup_r+0xc6>
 8014c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c50:	d1ba      	bne.n	8014bc8 <__swsetup_r+0x30>
 8014c52:	bd70      	pop	{r4, r5, r6, pc}
 8014c54:	0781      	lsls	r1, r0, #30
 8014c56:	bf58      	it	pl
 8014c58:	6963      	ldrpl	r3, [r4, #20]
 8014c5a:	60a3      	str	r3, [r4, #8]
 8014c5c:	e7f4      	b.n	8014c48 <__swsetup_r+0xb0>
 8014c5e:	2000      	movs	r0, #0
 8014c60:	e7f7      	b.n	8014c52 <__swsetup_r+0xba>
 8014c62:	bf00      	nop
 8014c64:	20000244 	.word	0x20000244
 8014c68:	08018c38 	.word	0x08018c38
 8014c6c:	08018c58 	.word	0x08018c58
 8014c70:	08018c18 	.word	0x08018c18

08014c74 <quorem>:
 8014c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c78:	6903      	ldr	r3, [r0, #16]
 8014c7a:	690c      	ldr	r4, [r1, #16]
 8014c7c:	42a3      	cmp	r3, r4
 8014c7e:	4607      	mov	r7, r0
 8014c80:	f2c0 8081 	blt.w	8014d86 <quorem+0x112>
 8014c84:	3c01      	subs	r4, #1
 8014c86:	f101 0814 	add.w	r8, r1, #20
 8014c8a:	f100 0514 	add.w	r5, r0, #20
 8014c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c92:	9301      	str	r3, [sp, #4]
 8014c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8014cac:	d331      	bcc.n	8014d12 <quorem+0x9e>
 8014cae:	f04f 0e00 	mov.w	lr, #0
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	46ac      	mov	ip, r5
 8014cb6:	46f2      	mov	sl, lr
 8014cb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8014cbc:	b293      	uxth	r3, r2
 8014cbe:	fb06 e303 	mla	r3, r6, r3, lr
 8014cc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8014ccc:	f8dc a000 	ldr.w	sl, [ip]
 8014cd0:	0c12      	lsrs	r2, r2, #16
 8014cd2:	fa13 f38a 	uxtah	r3, r3, sl
 8014cd6:	fb06 e202 	mla	r2, r6, r2, lr
 8014cda:	9300      	str	r3, [sp, #0]
 8014cdc:	9b00      	ldr	r3, [sp, #0]
 8014cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014ce2:	b292      	uxth	r2, r2
 8014ce4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8014cf0:	4581      	cmp	r9, r0
 8014cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cf6:	f84c 3b04 	str.w	r3, [ip], #4
 8014cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014cfe:	d2db      	bcs.n	8014cb8 <quorem+0x44>
 8014d00:	f855 300b 	ldr.w	r3, [r5, fp]
 8014d04:	b92b      	cbnz	r3, 8014d12 <quorem+0x9e>
 8014d06:	9b01      	ldr	r3, [sp, #4]
 8014d08:	3b04      	subs	r3, #4
 8014d0a:	429d      	cmp	r5, r3
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	d32e      	bcc.n	8014d6e <quorem+0xfa>
 8014d10:	613c      	str	r4, [r7, #16]
 8014d12:	4638      	mov	r0, r7
 8014d14:	f001 fad8 	bl	80162c8 <__mcmp>
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	db24      	blt.n	8014d66 <quorem+0xf2>
 8014d1c:	3601      	adds	r6, #1
 8014d1e:	4628      	mov	r0, r5
 8014d20:	f04f 0c00 	mov.w	ip, #0
 8014d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8014d28:	f8d0 e000 	ldr.w	lr, [r0]
 8014d2c:	b293      	uxth	r3, r2
 8014d2e:	ebac 0303 	sub.w	r3, ip, r3
 8014d32:	0c12      	lsrs	r2, r2, #16
 8014d34:	fa13 f38e 	uxtah	r3, r3, lr
 8014d38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d40:	b29b      	uxth	r3, r3
 8014d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d46:	45c1      	cmp	r9, r8
 8014d48:	f840 3b04 	str.w	r3, [r0], #4
 8014d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014d50:	d2e8      	bcs.n	8014d24 <quorem+0xb0>
 8014d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d5a:	b922      	cbnz	r2, 8014d66 <quorem+0xf2>
 8014d5c:	3b04      	subs	r3, #4
 8014d5e:	429d      	cmp	r5, r3
 8014d60:	461a      	mov	r2, r3
 8014d62:	d30a      	bcc.n	8014d7a <quorem+0x106>
 8014d64:	613c      	str	r4, [r7, #16]
 8014d66:	4630      	mov	r0, r6
 8014d68:	b003      	add	sp, #12
 8014d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6e:	6812      	ldr	r2, [r2, #0]
 8014d70:	3b04      	subs	r3, #4
 8014d72:	2a00      	cmp	r2, #0
 8014d74:	d1cc      	bne.n	8014d10 <quorem+0x9c>
 8014d76:	3c01      	subs	r4, #1
 8014d78:	e7c7      	b.n	8014d0a <quorem+0x96>
 8014d7a:	6812      	ldr	r2, [r2, #0]
 8014d7c:	3b04      	subs	r3, #4
 8014d7e:	2a00      	cmp	r2, #0
 8014d80:	d1f0      	bne.n	8014d64 <quorem+0xf0>
 8014d82:	3c01      	subs	r4, #1
 8014d84:	e7eb      	b.n	8014d5e <quorem+0xea>
 8014d86:	2000      	movs	r0, #0
 8014d88:	e7ee      	b.n	8014d68 <quorem+0xf4>
 8014d8a:	0000      	movs	r0, r0
 8014d8c:	0000      	movs	r0, r0
	...

08014d90 <_dtoa_r>:
 8014d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d94:	ed2d 8b04 	vpush	{d8-d9}
 8014d98:	ec57 6b10 	vmov	r6, r7, d0
 8014d9c:	b093      	sub	sp, #76	; 0x4c
 8014d9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014da0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014da4:	9106      	str	r1, [sp, #24]
 8014da6:	ee10 aa10 	vmov	sl, s0
 8014daa:	4604      	mov	r4, r0
 8014dac:	9209      	str	r2, [sp, #36]	; 0x24
 8014dae:	930c      	str	r3, [sp, #48]	; 0x30
 8014db0:	46bb      	mov	fp, r7
 8014db2:	b975      	cbnz	r5, 8014dd2 <_dtoa_r+0x42>
 8014db4:	2010      	movs	r0, #16
 8014db6:	f000 fffd 	bl	8015db4 <malloc>
 8014dba:	4602      	mov	r2, r0
 8014dbc:	6260      	str	r0, [r4, #36]	; 0x24
 8014dbe:	b920      	cbnz	r0, 8014dca <_dtoa_r+0x3a>
 8014dc0:	4ba7      	ldr	r3, [pc, #668]	; (8015060 <_dtoa_r+0x2d0>)
 8014dc2:	21ea      	movs	r1, #234	; 0xea
 8014dc4:	48a7      	ldr	r0, [pc, #668]	; (8015064 <_dtoa_r+0x2d4>)
 8014dc6:	f001 ffe7 	bl	8016d98 <__assert_func>
 8014dca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014dce:	6005      	str	r5, [r0, #0]
 8014dd0:	60c5      	str	r5, [r0, #12]
 8014dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dd4:	6819      	ldr	r1, [r3, #0]
 8014dd6:	b151      	cbz	r1, 8014dee <_dtoa_r+0x5e>
 8014dd8:	685a      	ldr	r2, [r3, #4]
 8014dda:	604a      	str	r2, [r1, #4]
 8014ddc:	2301      	movs	r3, #1
 8014dde:	4093      	lsls	r3, r2
 8014de0:	608b      	str	r3, [r1, #8]
 8014de2:	4620      	mov	r0, r4
 8014de4:	f001 f82e 	bl	8015e44 <_Bfree>
 8014de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dea:	2200      	movs	r2, #0
 8014dec:	601a      	str	r2, [r3, #0]
 8014dee:	1e3b      	subs	r3, r7, #0
 8014df0:	bfaa      	itet	ge
 8014df2:	2300      	movge	r3, #0
 8014df4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014df8:	f8c8 3000 	strge.w	r3, [r8]
 8014dfc:	4b9a      	ldr	r3, [pc, #616]	; (8015068 <_dtoa_r+0x2d8>)
 8014dfe:	bfbc      	itt	lt
 8014e00:	2201      	movlt	r2, #1
 8014e02:	f8c8 2000 	strlt.w	r2, [r8]
 8014e06:	ea33 030b 	bics.w	r3, r3, fp
 8014e0a:	d11b      	bne.n	8014e44 <_dtoa_r+0xb4>
 8014e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e18:	4333      	orrs	r3, r6
 8014e1a:	f000 8592 	beq.w	8015942 <_dtoa_r+0xbb2>
 8014e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e20:	b963      	cbnz	r3, 8014e3c <_dtoa_r+0xac>
 8014e22:	4b92      	ldr	r3, [pc, #584]	; (801506c <_dtoa_r+0x2dc>)
 8014e24:	e022      	b.n	8014e6c <_dtoa_r+0xdc>
 8014e26:	4b92      	ldr	r3, [pc, #584]	; (8015070 <_dtoa_r+0x2e0>)
 8014e28:	9301      	str	r3, [sp, #4]
 8014e2a:	3308      	adds	r3, #8
 8014e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e2e:	6013      	str	r3, [r2, #0]
 8014e30:	9801      	ldr	r0, [sp, #4]
 8014e32:	b013      	add	sp, #76	; 0x4c
 8014e34:	ecbd 8b04 	vpop	{d8-d9}
 8014e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e3c:	4b8b      	ldr	r3, [pc, #556]	; (801506c <_dtoa_r+0x2dc>)
 8014e3e:	9301      	str	r3, [sp, #4]
 8014e40:	3303      	adds	r3, #3
 8014e42:	e7f3      	b.n	8014e2c <_dtoa_r+0x9c>
 8014e44:	2200      	movs	r2, #0
 8014e46:	2300      	movs	r3, #0
 8014e48:	4650      	mov	r0, sl
 8014e4a:	4659      	mov	r1, fp
 8014e4c:	f7eb fe14 	bl	8000a78 <__aeabi_dcmpeq>
 8014e50:	ec4b ab19 	vmov	d9, sl, fp
 8014e54:	4680      	mov	r8, r0
 8014e56:	b158      	cbz	r0, 8014e70 <_dtoa_r+0xe0>
 8014e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	6013      	str	r3, [r2, #0]
 8014e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f000 856b 	beq.w	801593c <_dtoa_r+0xbac>
 8014e66:	4883      	ldr	r0, [pc, #524]	; (8015074 <_dtoa_r+0x2e4>)
 8014e68:	6018      	str	r0, [r3, #0]
 8014e6a:	1e43      	subs	r3, r0, #1
 8014e6c:	9301      	str	r3, [sp, #4]
 8014e6e:	e7df      	b.n	8014e30 <_dtoa_r+0xa0>
 8014e70:	ec4b ab10 	vmov	d0, sl, fp
 8014e74:	aa10      	add	r2, sp, #64	; 0x40
 8014e76:	a911      	add	r1, sp, #68	; 0x44
 8014e78:	4620      	mov	r0, r4
 8014e7a:	f001 facb 	bl	8016414 <__d2b>
 8014e7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014e82:	ee08 0a10 	vmov	s16, r0
 8014e86:	2d00      	cmp	r5, #0
 8014e88:	f000 8084 	beq.w	8014f94 <_dtoa_r+0x204>
 8014e8c:	ee19 3a90 	vmov	r3, s19
 8014e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014e98:	4656      	mov	r6, sl
 8014e9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014ea2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014ea6:	4b74      	ldr	r3, [pc, #464]	; (8015078 <_dtoa_r+0x2e8>)
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	4630      	mov	r0, r6
 8014eac:	4639      	mov	r1, r7
 8014eae:	f7eb f9c3 	bl	8000238 <__aeabi_dsub>
 8014eb2:	a365      	add	r3, pc, #404	; (adr r3, 8015048 <_dtoa_r+0x2b8>)
 8014eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb8:	f7eb fb76 	bl	80005a8 <__aeabi_dmul>
 8014ebc:	a364      	add	r3, pc, #400	; (adr r3, 8015050 <_dtoa_r+0x2c0>)
 8014ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec2:	f7eb f9bb 	bl	800023c <__adddf3>
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	4628      	mov	r0, r5
 8014eca:	460f      	mov	r7, r1
 8014ecc:	f7eb fb02 	bl	80004d4 <__aeabi_i2d>
 8014ed0:	a361      	add	r3, pc, #388	; (adr r3, 8015058 <_dtoa_r+0x2c8>)
 8014ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed6:	f7eb fb67 	bl	80005a8 <__aeabi_dmul>
 8014eda:	4602      	mov	r2, r0
 8014edc:	460b      	mov	r3, r1
 8014ede:	4630      	mov	r0, r6
 8014ee0:	4639      	mov	r1, r7
 8014ee2:	f7eb f9ab 	bl	800023c <__adddf3>
 8014ee6:	4606      	mov	r6, r0
 8014ee8:	460f      	mov	r7, r1
 8014eea:	f7eb fe0d 	bl	8000b08 <__aeabi_d2iz>
 8014eee:	2200      	movs	r2, #0
 8014ef0:	9000      	str	r0, [sp, #0]
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	f7eb fdc8 	bl	8000a8c <__aeabi_dcmplt>
 8014efc:	b150      	cbz	r0, 8014f14 <_dtoa_r+0x184>
 8014efe:	9800      	ldr	r0, [sp, #0]
 8014f00:	f7eb fae8 	bl	80004d4 <__aeabi_i2d>
 8014f04:	4632      	mov	r2, r6
 8014f06:	463b      	mov	r3, r7
 8014f08:	f7eb fdb6 	bl	8000a78 <__aeabi_dcmpeq>
 8014f0c:	b910      	cbnz	r0, 8014f14 <_dtoa_r+0x184>
 8014f0e:	9b00      	ldr	r3, [sp, #0]
 8014f10:	3b01      	subs	r3, #1
 8014f12:	9300      	str	r3, [sp, #0]
 8014f14:	9b00      	ldr	r3, [sp, #0]
 8014f16:	2b16      	cmp	r3, #22
 8014f18:	d85a      	bhi.n	8014fd0 <_dtoa_r+0x240>
 8014f1a:	9a00      	ldr	r2, [sp, #0]
 8014f1c:	4b57      	ldr	r3, [pc, #348]	; (801507c <_dtoa_r+0x2ec>)
 8014f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f26:	ec51 0b19 	vmov	r0, r1, d9
 8014f2a:	f7eb fdaf 	bl	8000a8c <__aeabi_dcmplt>
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	d050      	beq.n	8014fd4 <_dtoa_r+0x244>
 8014f32:	9b00      	ldr	r3, [sp, #0]
 8014f34:	3b01      	subs	r3, #1
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	2300      	movs	r3, #0
 8014f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f3e:	1b5d      	subs	r5, r3, r5
 8014f40:	1e6b      	subs	r3, r5, #1
 8014f42:	9305      	str	r3, [sp, #20]
 8014f44:	bf45      	ittet	mi
 8014f46:	f1c5 0301 	rsbmi	r3, r5, #1
 8014f4a:	9304      	strmi	r3, [sp, #16]
 8014f4c:	2300      	movpl	r3, #0
 8014f4e:	2300      	movmi	r3, #0
 8014f50:	bf4c      	ite	mi
 8014f52:	9305      	strmi	r3, [sp, #20]
 8014f54:	9304      	strpl	r3, [sp, #16]
 8014f56:	9b00      	ldr	r3, [sp, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	db3d      	blt.n	8014fd8 <_dtoa_r+0x248>
 8014f5c:	9b05      	ldr	r3, [sp, #20]
 8014f5e:	9a00      	ldr	r2, [sp, #0]
 8014f60:	920a      	str	r2, [sp, #40]	; 0x28
 8014f62:	4413      	add	r3, r2
 8014f64:	9305      	str	r3, [sp, #20]
 8014f66:	2300      	movs	r3, #0
 8014f68:	9307      	str	r3, [sp, #28]
 8014f6a:	9b06      	ldr	r3, [sp, #24]
 8014f6c:	2b09      	cmp	r3, #9
 8014f6e:	f200 8089 	bhi.w	8015084 <_dtoa_r+0x2f4>
 8014f72:	2b05      	cmp	r3, #5
 8014f74:	bfc4      	itt	gt
 8014f76:	3b04      	subgt	r3, #4
 8014f78:	9306      	strgt	r3, [sp, #24]
 8014f7a:	9b06      	ldr	r3, [sp, #24]
 8014f7c:	f1a3 0302 	sub.w	r3, r3, #2
 8014f80:	bfcc      	ite	gt
 8014f82:	2500      	movgt	r5, #0
 8014f84:	2501      	movle	r5, #1
 8014f86:	2b03      	cmp	r3, #3
 8014f88:	f200 8087 	bhi.w	801509a <_dtoa_r+0x30a>
 8014f8c:	e8df f003 	tbb	[pc, r3]
 8014f90:	59383a2d 	.word	0x59383a2d
 8014f94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014f98:	441d      	add	r5, r3
 8014f9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014f9e:	2b20      	cmp	r3, #32
 8014fa0:	bfc1      	itttt	gt
 8014fa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014fa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014faa:	fa0b f303 	lslgt.w	r3, fp, r3
 8014fae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014fb2:	bfda      	itte	le
 8014fb4:	f1c3 0320 	rsble	r3, r3, #32
 8014fb8:	fa06 f003 	lslle.w	r0, r6, r3
 8014fbc:	4318      	orrgt	r0, r3
 8014fbe:	f7eb fa79 	bl	80004b4 <__aeabi_ui2d>
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014fca:	3d01      	subs	r5, #1
 8014fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8014fce:	e76a      	b.n	8014ea6 <_dtoa_r+0x116>
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	e7b2      	b.n	8014f3a <_dtoa_r+0x1aa>
 8014fd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8014fd6:	e7b1      	b.n	8014f3c <_dtoa_r+0x1ac>
 8014fd8:	9b04      	ldr	r3, [sp, #16]
 8014fda:	9a00      	ldr	r2, [sp, #0]
 8014fdc:	1a9b      	subs	r3, r3, r2
 8014fde:	9304      	str	r3, [sp, #16]
 8014fe0:	4253      	negs	r3, r2
 8014fe2:	9307      	str	r3, [sp, #28]
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8014fe8:	e7bf      	b.n	8014f6a <_dtoa_r+0x1da>
 8014fea:	2300      	movs	r3, #0
 8014fec:	9308      	str	r3, [sp, #32]
 8014fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	dc55      	bgt.n	80150a0 <_dtoa_r+0x310>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8014ffe:	e00c      	b.n	801501a <_dtoa_r+0x28a>
 8015000:	2301      	movs	r3, #1
 8015002:	e7f3      	b.n	8014fec <_dtoa_r+0x25c>
 8015004:	2300      	movs	r3, #0
 8015006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015008:	9308      	str	r3, [sp, #32]
 801500a:	9b00      	ldr	r3, [sp, #0]
 801500c:	4413      	add	r3, r2
 801500e:	9302      	str	r3, [sp, #8]
 8015010:	3301      	adds	r3, #1
 8015012:	2b01      	cmp	r3, #1
 8015014:	9303      	str	r3, [sp, #12]
 8015016:	bfb8      	it	lt
 8015018:	2301      	movlt	r3, #1
 801501a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801501c:	2200      	movs	r2, #0
 801501e:	6042      	str	r2, [r0, #4]
 8015020:	2204      	movs	r2, #4
 8015022:	f102 0614 	add.w	r6, r2, #20
 8015026:	429e      	cmp	r6, r3
 8015028:	6841      	ldr	r1, [r0, #4]
 801502a:	d93d      	bls.n	80150a8 <_dtoa_r+0x318>
 801502c:	4620      	mov	r0, r4
 801502e:	f000 fec9 	bl	8015dc4 <_Balloc>
 8015032:	9001      	str	r0, [sp, #4]
 8015034:	2800      	cmp	r0, #0
 8015036:	d13b      	bne.n	80150b0 <_dtoa_r+0x320>
 8015038:	4b11      	ldr	r3, [pc, #68]	; (8015080 <_dtoa_r+0x2f0>)
 801503a:	4602      	mov	r2, r0
 801503c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015040:	e6c0      	b.n	8014dc4 <_dtoa_r+0x34>
 8015042:	2301      	movs	r3, #1
 8015044:	e7df      	b.n	8015006 <_dtoa_r+0x276>
 8015046:	bf00      	nop
 8015048:	636f4361 	.word	0x636f4361
 801504c:	3fd287a7 	.word	0x3fd287a7
 8015050:	8b60c8b3 	.word	0x8b60c8b3
 8015054:	3fc68a28 	.word	0x3fc68a28
 8015058:	509f79fb 	.word	0x509f79fb
 801505c:	3fd34413 	.word	0x3fd34413
 8015060:	08018b95 	.word	0x08018b95
 8015064:	08018bac 	.word	0x08018bac
 8015068:	7ff00000 	.word	0x7ff00000
 801506c:	08018b91 	.word	0x08018b91
 8015070:	08018b88 	.word	0x08018b88
 8015074:	08018b65 	.word	0x08018b65
 8015078:	3ff80000 	.word	0x3ff80000
 801507c:	08018d00 	.word	0x08018d00
 8015080:	08018c07 	.word	0x08018c07
 8015084:	2501      	movs	r5, #1
 8015086:	2300      	movs	r3, #0
 8015088:	9306      	str	r3, [sp, #24]
 801508a:	9508      	str	r5, [sp, #32]
 801508c:	f04f 33ff 	mov.w	r3, #4294967295
 8015090:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015094:	2200      	movs	r2, #0
 8015096:	2312      	movs	r3, #18
 8015098:	e7b0      	b.n	8014ffc <_dtoa_r+0x26c>
 801509a:	2301      	movs	r3, #1
 801509c:	9308      	str	r3, [sp, #32]
 801509e:	e7f5      	b.n	801508c <_dtoa_r+0x2fc>
 80150a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80150a6:	e7b8      	b.n	801501a <_dtoa_r+0x28a>
 80150a8:	3101      	adds	r1, #1
 80150aa:	6041      	str	r1, [r0, #4]
 80150ac:	0052      	lsls	r2, r2, #1
 80150ae:	e7b8      	b.n	8015022 <_dtoa_r+0x292>
 80150b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150b2:	9a01      	ldr	r2, [sp, #4]
 80150b4:	601a      	str	r2, [r3, #0]
 80150b6:	9b03      	ldr	r3, [sp, #12]
 80150b8:	2b0e      	cmp	r3, #14
 80150ba:	f200 809d 	bhi.w	80151f8 <_dtoa_r+0x468>
 80150be:	2d00      	cmp	r5, #0
 80150c0:	f000 809a 	beq.w	80151f8 <_dtoa_r+0x468>
 80150c4:	9b00      	ldr	r3, [sp, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	dd32      	ble.n	8015130 <_dtoa_r+0x3a0>
 80150ca:	4ab7      	ldr	r2, [pc, #732]	; (80153a8 <_dtoa_r+0x618>)
 80150cc:	f003 030f 	and.w	r3, r3, #15
 80150d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80150d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80150d8:	9b00      	ldr	r3, [sp, #0]
 80150da:	05d8      	lsls	r0, r3, #23
 80150dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80150e0:	d516      	bpl.n	8015110 <_dtoa_r+0x380>
 80150e2:	4bb2      	ldr	r3, [pc, #712]	; (80153ac <_dtoa_r+0x61c>)
 80150e4:	ec51 0b19 	vmov	r0, r1, d9
 80150e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80150ec:	f7eb fb86 	bl	80007fc <__aeabi_ddiv>
 80150f0:	f007 070f 	and.w	r7, r7, #15
 80150f4:	4682      	mov	sl, r0
 80150f6:	468b      	mov	fp, r1
 80150f8:	2503      	movs	r5, #3
 80150fa:	4eac      	ldr	r6, [pc, #688]	; (80153ac <_dtoa_r+0x61c>)
 80150fc:	b957      	cbnz	r7, 8015114 <_dtoa_r+0x384>
 80150fe:	4642      	mov	r2, r8
 8015100:	464b      	mov	r3, r9
 8015102:	4650      	mov	r0, sl
 8015104:	4659      	mov	r1, fp
 8015106:	f7eb fb79 	bl	80007fc <__aeabi_ddiv>
 801510a:	4682      	mov	sl, r0
 801510c:	468b      	mov	fp, r1
 801510e:	e028      	b.n	8015162 <_dtoa_r+0x3d2>
 8015110:	2502      	movs	r5, #2
 8015112:	e7f2      	b.n	80150fa <_dtoa_r+0x36a>
 8015114:	07f9      	lsls	r1, r7, #31
 8015116:	d508      	bpl.n	801512a <_dtoa_r+0x39a>
 8015118:	4640      	mov	r0, r8
 801511a:	4649      	mov	r1, r9
 801511c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015120:	f7eb fa42 	bl	80005a8 <__aeabi_dmul>
 8015124:	3501      	adds	r5, #1
 8015126:	4680      	mov	r8, r0
 8015128:	4689      	mov	r9, r1
 801512a:	107f      	asrs	r7, r7, #1
 801512c:	3608      	adds	r6, #8
 801512e:	e7e5      	b.n	80150fc <_dtoa_r+0x36c>
 8015130:	f000 809b 	beq.w	801526a <_dtoa_r+0x4da>
 8015134:	9b00      	ldr	r3, [sp, #0]
 8015136:	4f9d      	ldr	r7, [pc, #628]	; (80153ac <_dtoa_r+0x61c>)
 8015138:	425e      	negs	r6, r3
 801513a:	4b9b      	ldr	r3, [pc, #620]	; (80153a8 <_dtoa_r+0x618>)
 801513c:	f006 020f 	and.w	r2, r6, #15
 8015140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015148:	ec51 0b19 	vmov	r0, r1, d9
 801514c:	f7eb fa2c 	bl	80005a8 <__aeabi_dmul>
 8015150:	1136      	asrs	r6, r6, #4
 8015152:	4682      	mov	sl, r0
 8015154:	468b      	mov	fp, r1
 8015156:	2300      	movs	r3, #0
 8015158:	2502      	movs	r5, #2
 801515a:	2e00      	cmp	r6, #0
 801515c:	d17a      	bne.n	8015254 <_dtoa_r+0x4c4>
 801515e:	2b00      	cmp	r3, #0
 8015160:	d1d3      	bne.n	801510a <_dtoa_r+0x37a>
 8015162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015164:	2b00      	cmp	r3, #0
 8015166:	f000 8082 	beq.w	801526e <_dtoa_r+0x4de>
 801516a:	4b91      	ldr	r3, [pc, #580]	; (80153b0 <_dtoa_r+0x620>)
 801516c:	2200      	movs	r2, #0
 801516e:	4650      	mov	r0, sl
 8015170:	4659      	mov	r1, fp
 8015172:	f7eb fc8b 	bl	8000a8c <__aeabi_dcmplt>
 8015176:	2800      	cmp	r0, #0
 8015178:	d079      	beq.n	801526e <_dtoa_r+0x4de>
 801517a:	9b03      	ldr	r3, [sp, #12]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d076      	beq.n	801526e <_dtoa_r+0x4de>
 8015180:	9b02      	ldr	r3, [sp, #8]
 8015182:	2b00      	cmp	r3, #0
 8015184:	dd36      	ble.n	80151f4 <_dtoa_r+0x464>
 8015186:	9b00      	ldr	r3, [sp, #0]
 8015188:	4650      	mov	r0, sl
 801518a:	4659      	mov	r1, fp
 801518c:	1e5f      	subs	r7, r3, #1
 801518e:	2200      	movs	r2, #0
 8015190:	4b88      	ldr	r3, [pc, #544]	; (80153b4 <_dtoa_r+0x624>)
 8015192:	f7eb fa09 	bl	80005a8 <__aeabi_dmul>
 8015196:	9e02      	ldr	r6, [sp, #8]
 8015198:	4682      	mov	sl, r0
 801519a:	468b      	mov	fp, r1
 801519c:	3501      	adds	r5, #1
 801519e:	4628      	mov	r0, r5
 80151a0:	f7eb f998 	bl	80004d4 <__aeabi_i2d>
 80151a4:	4652      	mov	r2, sl
 80151a6:	465b      	mov	r3, fp
 80151a8:	f7eb f9fe 	bl	80005a8 <__aeabi_dmul>
 80151ac:	4b82      	ldr	r3, [pc, #520]	; (80153b8 <_dtoa_r+0x628>)
 80151ae:	2200      	movs	r2, #0
 80151b0:	f7eb f844 	bl	800023c <__adddf3>
 80151b4:	46d0      	mov	r8, sl
 80151b6:	46d9      	mov	r9, fp
 80151b8:	4682      	mov	sl, r0
 80151ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80151be:	2e00      	cmp	r6, #0
 80151c0:	d158      	bne.n	8015274 <_dtoa_r+0x4e4>
 80151c2:	4b7e      	ldr	r3, [pc, #504]	; (80153bc <_dtoa_r+0x62c>)
 80151c4:	2200      	movs	r2, #0
 80151c6:	4640      	mov	r0, r8
 80151c8:	4649      	mov	r1, r9
 80151ca:	f7eb f835 	bl	8000238 <__aeabi_dsub>
 80151ce:	4652      	mov	r2, sl
 80151d0:	465b      	mov	r3, fp
 80151d2:	4680      	mov	r8, r0
 80151d4:	4689      	mov	r9, r1
 80151d6:	f7eb fc77 	bl	8000ac8 <__aeabi_dcmpgt>
 80151da:	2800      	cmp	r0, #0
 80151dc:	f040 8295 	bne.w	801570a <_dtoa_r+0x97a>
 80151e0:	4652      	mov	r2, sl
 80151e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80151e6:	4640      	mov	r0, r8
 80151e8:	4649      	mov	r1, r9
 80151ea:	f7eb fc4f 	bl	8000a8c <__aeabi_dcmplt>
 80151ee:	2800      	cmp	r0, #0
 80151f0:	f040 8289 	bne.w	8015706 <_dtoa_r+0x976>
 80151f4:	ec5b ab19 	vmov	sl, fp, d9
 80151f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	f2c0 8148 	blt.w	8015490 <_dtoa_r+0x700>
 8015200:	9a00      	ldr	r2, [sp, #0]
 8015202:	2a0e      	cmp	r2, #14
 8015204:	f300 8144 	bgt.w	8015490 <_dtoa_r+0x700>
 8015208:	4b67      	ldr	r3, [pc, #412]	; (80153a8 <_dtoa_r+0x618>)
 801520a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801520e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015214:	2b00      	cmp	r3, #0
 8015216:	f280 80d5 	bge.w	80153c4 <_dtoa_r+0x634>
 801521a:	9b03      	ldr	r3, [sp, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	f300 80d1 	bgt.w	80153c4 <_dtoa_r+0x634>
 8015222:	f040 826f 	bne.w	8015704 <_dtoa_r+0x974>
 8015226:	4b65      	ldr	r3, [pc, #404]	; (80153bc <_dtoa_r+0x62c>)
 8015228:	2200      	movs	r2, #0
 801522a:	4640      	mov	r0, r8
 801522c:	4649      	mov	r1, r9
 801522e:	f7eb f9bb 	bl	80005a8 <__aeabi_dmul>
 8015232:	4652      	mov	r2, sl
 8015234:	465b      	mov	r3, fp
 8015236:	f7eb fc3d 	bl	8000ab4 <__aeabi_dcmpge>
 801523a:	9e03      	ldr	r6, [sp, #12]
 801523c:	4637      	mov	r7, r6
 801523e:	2800      	cmp	r0, #0
 8015240:	f040 8245 	bne.w	80156ce <_dtoa_r+0x93e>
 8015244:	9d01      	ldr	r5, [sp, #4]
 8015246:	2331      	movs	r3, #49	; 0x31
 8015248:	f805 3b01 	strb.w	r3, [r5], #1
 801524c:	9b00      	ldr	r3, [sp, #0]
 801524e:	3301      	adds	r3, #1
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	e240      	b.n	80156d6 <_dtoa_r+0x946>
 8015254:	07f2      	lsls	r2, r6, #31
 8015256:	d505      	bpl.n	8015264 <_dtoa_r+0x4d4>
 8015258:	e9d7 2300 	ldrd	r2, r3, [r7]
 801525c:	f7eb f9a4 	bl	80005a8 <__aeabi_dmul>
 8015260:	3501      	adds	r5, #1
 8015262:	2301      	movs	r3, #1
 8015264:	1076      	asrs	r6, r6, #1
 8015266:	3708      	adds	r7, #8
 8015268:	e777      	b.n	801515a <_dtoa_r+0x3ca>
 801526a:	2502      	movs	r5, #2
 801526c:	e779      	b.n	8015162 <_dtoa_r+0x3d2>
 801526e:	9f00      	ldr	r7, [sp, #0]
 8015270:	9e03      	ldr	r6, [sp, #12]
 8015272:	e794      	b.n	801519e <_dtoa_r+0x40e>
 8015274:	9901      	ldr	r1, [sp, #4]
 8015276:	4b4c      	ldr	r3, [pc, #304]	; (80153a8 <_dtoa_r+0x618>)
 8015278:	4431      	add	r1, r6
 801527a:	910d      	str	r1, [sp, #52]	; 0x34
 801527c:	9908      	ldr	r1, [sp, #32]
 801527e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015286:	2900      	cmp	r1, #0
 8015288:	d043      	beq.n	8015312 <_dtoa_r+0x582>
 801528a:	494d      	ldr	r1, [pc, #308]	; (80153c0 <_dtoa_r+0x630>)
 801528c:	2000      	movs	r0, #0
 801528e:	f7eb fab5 	bl	80007fc <__aeabi_ddiv>
 8015292:	4652      	mov	r2, sl
 8015294:	465b      	mov	r3, fp
 8015296:	f7ea ffcf 	bl	8000238 <__aeabi_dsub>
 801529a:	9d01      	ldr	r5, [sp, #4]
 801529c:	4682      	mov	sl, r0
 801529e:	468b      	mov	fp, r1
 80152a0:	4649      	mov	r1, r9
 80152a2:	4640      	mov	r0, r8
 80152a4:	f7eb fc30 	bl	8000b08 <__aeabi_d2iz>
 80152a8:	4606      	mov	r6, r0
 80152aa:	f7eb f913 	bl	80004d4 <__aeabi_i2d>
 80152ae:	4602      	mov	r2, r0
 80152b0:	460b      	mov	r3, r1
 80152b2:	4640      	mov	r0, r8
 80152b4:	4649      	mov	r1, r9
 80152b6:	f7ea ffbf 	bl	8000238 <__aeabi_dsub>
 80152ba:	3630      	adds	r6, #48	; 0x30
 80152bc:	f805 6b01 	strb.w	r6, [r5], #1
 80152c0:	4652      	mov	r2, sl
 80152c2:	465b      	mov	r3, fp
 80152c4:	4680      	mov	r8, r0
 80152c6:	4689      	mov	r9, r1
 80152c8:	f7eb fbe0 	bl	8000a8c <__aeabi_dcmplt>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d163      	bne.n	8015398 <_dtoa_r+0x608>
 80152d0:	4642      	mov	r2, r8
 80152d2:	464b      	mov	r3, r9
 80152d4:	4936      	ldr	r1, [pc, #216]	; (80153b0 <_dtoa_r+0x620>)
 80152d6:	2000      	movs	r0, #0
 80152d8:	f7ea ffae 	bl	8000238 <__aeabi_dsub>
 80152dc:	4652      	mov	r2, sl
 80152de:	465b      	mov	r3, fp
 80152e0:	f7eb fbd4 	bl	8000a8c <__aeabi_dcmplt>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	f040 80b5 	bne.w	8015454 <_dtoa_r+0x6c4>
 80152ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152ec:	429d      	cmp	r5, r3
 80152ee:	d081      	beq.n	80151f4 <_dtoa_r+0x464>
 80152f0:	4b30      	ldr	r3, [pc, #192]	; (80153b4 <_dtoa_r+0x624>)
 80152f2:	2200      	movs	r2, #0
 80152f4:	4650      	mov	r0, sl
 80152f6:	4659      	mov	r1, fp
 80152f8:	f7eb f956 	bl	80005a8 <__aeabi_dmul>
 80152fc:	4b2d      	ldr	r3, [pc, #180]	; (80153b4 <_dtoa_r+0x624>)
 80152fe:	4682      	mov	sl, r0
 8015300:	468b      	mov	fp, r1
 8015302:	4640      	mov	r0, r8
 8015304:	4649      	mov	r1, r9
 8015306:	2200      	movs	r2, #0
 8015308:	f7eb f94e 	bl	80005a8 <__aeabi_dmul>
 801530c:	4680      	mov	r8, r0
 801530e:	4689      	mov	r9, r1
 8015310:	e7c6      	b.n	80152a0 <_dtoa_r+0x510>
 8015312:	4650      	mov	r0, sl
 8015314:	4659      	mov	r1, fp
 8015316:	f7eb f947 	bl	80005a8 <__aeabi_dmul>
 801531a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801531c:	9d01      	ldr	r5, [sp, #4]
 801531e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015320:	4682      	mov	sl, r0
 8015322:	468b      	mov	fp, r1
 8015324:	4649      	mov	r1, r9
 8015326:	4640      	mov	r0, r8
 8015328:	f7eb fbee 	bl	8000b08 <__aeabi_d2iz>
 801532c:	4606      	mov	r6, r0
 801532e:	f7eb f8d1 	bl	80004d4 <__aeabi_i2d>
 8015332:	3630      	adds	r6, #48	; 0x30
 8015334:	4602      	mov	r2, r0
 8015336:	460b      	mov	r3, r1
 8015338:	4640      	mov	r0, r8
 801533a:	4649      	mov	r1, r9
 801533c:	f7ea ff7c 	bl	8000238 <__aeabi_dsub>
 8015340:	f805 6b01 	strb.w	r6, [r5], #1
 8015344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015346:	429d      	cmp	r5, r3
 8015348:	4680      	mov	r8, r0
 801534a:	4689      	mov	r9, r1
 801534c:	f04f 0200 	mov.w	r2, #0
 8015350:	d124      	bne.n	801539c <_dtoa_r+0x60c>
 8015352:	4b1b      	ldr	r3, [pc, #108]	; (80153c0 <_dtoa_r+0x630>)
 8015354:	4650      	mov	r0, sl
 8015356:	4659      	mov	r1, fp
 8015358:	f7ea ff70 	bl	800023c <__adddf3>
 801535c:	4602      	mov	r2, r0
 801535e:	460b      	mov	r3, r1
 8015360:	4640      	mov	r0, r8
 8015362:	4649      	mov	r1, r9
 8015364:	f7eb fbb0 	bl	8000ac8 <__aeabi_dcmpgt>
 8015368:	2800      	cmp	r0, #0
 801536a:	d173      	bne.n	8015454 <_dtoa_r+0x6c4>
 801536c:	4652      	mov	r2, sl
 801536e:	465b      	mov	r3, fp
 8015370:	4913      	ldr	r1, [pc, #76]	; (80153c0 <_dtoa_r+0x630>)
 8015372:	2000      	movs	r0, #0
 8015374:	f7ea ff60 	bl	8000238 <__aeabi_dsub>
 8015378:	4602      	mov	r2, r0
 801537a:	460b      	mov	r3, r1
 801537c:	4640      	mov	r0, r8
 801537e:	4649      	mov	r1, r9
 8015380:	f7eb fb84 	bl	8000a8c <__aeabi_dcmplt>
 8015384:	2800      	cmp	r0, #0
 8015386:	f43f af35 	beq.w	80151f4 <_dtoa_r+0x464>
 801538a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801538c:	1e6b      	subs	r3, r5, #1
 801538e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015390:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015394:	2b30      	cmp	r3, #48	; 0x30
 8015396:	d0f8      	beq.n	801538a <_dtoa_r+0x5fa>
 8015398:	9700      	str	r7, [sp, #0]
 801539a:	e049      	b.n	8015430 <_dtoa_r+0x6a0>
 801539c:	4b05      	ldr	r3, [pc, #20]	; (80153b4 <_dtoa_r+0x624>)
 801539e:	f7eb f903 	bl	80005a8 <__aeabi_dmul>
 80153a2:	4680      	mov	r8, r0
 80153a4:	4689      	mov	r9, r1
 80153a6:	e7bd      	b.n	8015324 <_dtoa_r+0x594>
 80153a8:	08018d00 	.word	0x08018d00
 80153ac:	08018cd8 	.word	0x08018cd8
 80153b0:	3ff00000 	.word	0x3ff00000
 80153b4:	40240000 	.word	0x40240000
 80153b8:	401c0000 	.word	0x401c0000
 80153bc:	40140000 	.word	0x40140000
 80153c0:	3fe00000 	.word	0x3fe00000
 80153c4:	9d01      	ldr	r5, [sp, #4]
 80153c6:	4656      	mov	r6, sl
 80153c8:	465f      	mov	r7, fp
 80153ca:	4642      	mov	r2, r8
 80153cc:	464b      	mov	r3, r9
 80153ce:	4630      	mov	r0, r6
 80153d0:	4639      	mov	r1, r7
 80153d2:	f7eb fa13 	bl	80007fc <__aeabi_ddiv>
 80153d6:	f7eb fb97 	bl	8000b08 <__aeabi_d2iz>
 80153da:	4682      	mov	sl, r0
 80153dc:	f7eb f87a 	bl	80004d4 <__aeabi_i2d>
 80153e0:	4642      	mov	r2, r8
 80153e2:	464b      	mov	r3, r9
 80153e4:	f7eb f8e0 	bl	80005a8 <__aeabi_dmul>
 80153e8:	4602      	mov	r2, r0
 80153ea:	460b      	mov	r3, r1
 80153ec:	4630      	mov	r0, r6
 80153ee:	4639      	mov	r1, r7
 80153f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80153f4:	f7ea ff20 	bl	8000238 <__aeabi_dsub>
 80153f8:	f805 6b01 	strb.w	r6, [r5], #1
 80153fc:	9e01      	ldr	r6, [sp, #4]
 80153fe:	9f03      	ldr	r7, [sp, #12]
 8015400:	1bae      	subs	r6, r5, r6
 8015402:	42b7      	cmp	r7, r6
 8015404:	4602      	mov	r2, r0
 8015406:	460b      	mov	r3, r1
 8015408:	d135      	bne.n	8015476 <_dtoa_r+0x6e6>
 801540a:	f7ea ff17 	bl	800023c <__adddf3>
 801540e:	4642      	mov	r2, r8
 8015410:	464b      	mov	r3, r9
 8015412:	4606      	mov	r6, r0
 8015414:	460f      	mov	r7, r1
 8015416:	f7eb fb57 	bl	8000ac8 <__aeabi_dcmpgt>
 801541a:	b9d0      	cbnz	r0, 8015452 <_dtoa_r+0x6c2>
 801541c:	4642      	mov	r2, r8
 801541e:	464b      	mov	r3, r9
 8015420:	4630      	mov	r0, r6
 8015422:	4639      	mov	r1, r7
 8015424:	f7eb fb28 	bl	8000a78 <__aeabi_dcmpeq>
 8015428:	b110      	cbz	r0, 8015430 <_dtoa_r+0x6a0>
 801542a:	f01a 0f01 	tst.w	sl, #1
 801542e:	d110      	bne.n	8015452 <_dtoa_r+0x6c2>
 8015430:	4620      	mov	r0, r4
 8015432:	ee18 1a10 	vmov	r1, s16
 8015436:	f000 fd05 	bl	8015e44 <_Bfree>
 801543a:	2300      	movs	r3, #0
 801543c:	9800      	ldr	r0, [sp, #0]
 801543e:	702b      	strb	r3, [r5, #0]
 8015440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015442:	3001      	adds	r0, #1
 8015444:	6018      	str	r0, [r3, #0]
 8015446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015448:	2b00      	cmp	r3, #0
 801544a:	f43f acf1 	beq.w	8014e30 <_dtoa_r+0xa0>
 801544e:	601d      	str	r5, [r3, #0]
 8015450:	e4ee      	b.n	8014e30 <_dtoa_r+0xa0>
 8015452:	9f00      	ldr	r7, [sp, #0]
 8015454:	462b      	mov	r3, r5
 8015456:	461d      	mov	r5, r3
 8015458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801545c:	2a39      	cmp	r2, #57	; 0x39
 801545e:	d106      	bne.n	801546e <_dtoa_r+0x6de>
 8015460:	9a01      	ldr	r2, [sp, #4]
 8015462:	429a      	cmp	r2, r3
 8015464:	d1f7      	bne.n	8015456 <_dtoa_r+0x6c6>
 8015466:	9901      	ldr	r1, [sp, #4]
 8015468:	2230      	movs	r2, #48	; 0x30
 801546a:	3701      	adds	r7, #1
 801546c:	700a      	strb	r2, [r1, #0]
 801546e:	781a      	ldrb	r2, [r3, #0]
 8015470:	3201      	adds	r2, #1
 8015472:	701a      	strb	r2, [r3, #0]
 8015474:	e790      	b.n	8015398 <_dtoa_r+0x608>
 8015476:	4ba6      	ldr	r3, [pc, #664]	; (8015710 <_dtoa_r+0x980>)
 8015478:	2200      	movs	r2, #0
 801547a:	f7eb f895 	bl	80005a8 <__aeabi_dmul>
 801547e:	2200      	movs	r2, #0
 8015480:	2300      	movs	r3, #0
 8015482:	4606      	mov	r6, r0
 8015484:	460f      	mov	r7, r1
 8015486:	f7eb faf7 	bl	8000a78 <__aeabi_dcmpeq>
 801548a:	2800      	cmp	r0, #0
 801548c:	d09d      	beq.n	80153ca <_dtoa_r+0x63a>
 801548e:	e7cf      	b.n	8015430 <_dtoa_r+0x6a0>
 8015490:	9a08      	ldr	r2, [sp, #32]
 8015492:	2a00      	cmp	r2, #0
 8015494:	f000 80d7 	beq.w	8015646 <_dtoa_r+0x8b6>
 8015498:	9a06      	ldr	r2, [sp, #24]
 801549a:	2a01      	cmp	r2, #1
 801549c:	f300 80ba 	bgt.w	8015614 <_dtoa_r+0x884>
 80154a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	f000 80b2 	beq.w	801560c <_dtoa_r+0x87c>
 80154a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80154ac:	9e07      	ldr	r6, [sp, #28]
 80154ae:	9d04      	ldr	r5, [sp, #16]
 80154b0:	9a04      	ldr	r2, [sp, #16]
 80154b2:	441a      	add	r2, r3
 80154b4:	9204      	str	r2, [sp, #16]
 80154b6:	9a05      	ldr	r2, [sp, #20]
 80154b8:	2101      	movs	r1, #1
 80154ba:	441a      	add	r2, r3
 80154bc:	4620      	mov	r0, r4
 80154be:	9205      	str	r2, [sp, #20]
 80154c0:	f000 fd78 	bl	8015fb4 <__i2b>
 80154c4:	4607      	mov	r7, r0
 80154c6:	2d00      	cmp	r5, #0
 80154c8:	dd0c      	ble.n	80154e4 <_dtoa_r+0x754>
 80154ca:	9b05      	ldr	r3, [sp, #20]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd09      	ble.n	80154e4 <_dtoa_r+0x754>
 80154d0:	42ab      	cmp	r3, r5
 80154d2:	9a04      	ldr	r2, [sp, #16]
 80154d4:	bfa8      	it	ge
 80154d6:	462b      	movge	r3, r5
 80154d8:	1ad2      	subs	r2, r2, r3
 80154da:	9204      	str	r2, [sp, #16]
 80154dc:	9a05      	ldr	r2, [sp, #20]
 80154de:	1aed      	subs	r5, r5, r3
 80154e0:	1ad3      	subs	r3, r2, r3
 80154e2:	9305      	str	r3, [sp, #20]
 80154e4:	9b07      	ldr	r3, [sp, #28]
 80154e6:	b31b      	cbz	r3, 8015530 <_dtoa_r+0x7a0>
 80154e8:	9b08      	ldr	r3, [sp, #32]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	f000 80af 	beq.w	801564e <_dtoa_r+0x8be>
 80154f0:	2e00      	cmp	r6, #0
 80154f2:	dd13      	ble.n	801551c <_dtoa_r+0x78c>
 80154f4:	4639      	mov	r1, r7
 80154f6:	4632      	mov	r2, r6
 80154f8:	4620      	mov	r0, r4
 80154fa:	f000 fe1b 	bl	8016134 <__pow5mult>
 80154fe:	ee18 2a10 	vmov	r2, s16
 8015502:	4601      	mov	r1, r0
 8015504:	4607      	mov	r7, r0
 8015506:	4620      	mov	r0, r4
 8015508:	f000 fd6a 	bl	8015fe0 <__multiply>
 801550c:	ee18 1a10 	vmov	r1, s16
 8015510:	4680      	mov	r8, r0
 8015512:	4620      	mov	r0, r4
 8015514:	f000 fc96 	bl	8015e44 <_Bfree>
 8015518:	ee08 8a10 	vmov	s16, r8
 801551c:	9b07      	ldr	r3, [sp, #28]
 801551e:	1b9a      	subs	r2, r3, r6
 8015520:	d006      	beq.n	8015530 <_dtoa_r+0x7a0>
 8015522:	ee18 1a10 	vmov	r1, s16
 8015526:	4620      	mov	r0, r4
 8015528:	f000 fe04 	bl	8016134 <__pow5mult>
 801552c:	ee08 0a10 	vmov	s16, r0
 8015530:	2101      	movs	r1, #1
 8015532:	4620      	mov	r0, r4
 8015534:	f000 fd3e 	bl	8015fb4 <__i2b>
 8015538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801553a:	2b00      	cmp	r3, #0
 801553c:	4606      	mov	r6, r0
 801553e:	f340 8088 	ble.w	8015652 <_dtoa_r+0x8c2>
 8015542:	461a      	mov	r2, r3
 8015544:	4601      	mov	r1, r0
 8015546:	4620      	mov	r0, r4
 8015548:	f000 fdf4 	bl	8016134 <__pow5mult>
 801554c:	9b06      	ldr	r3, [sp, #24]
 801554e:	2b01      	cmp	r3, #1
 8015550:	4606      	mov	r6, r0
 8015552:	f340 8081 	ble.w	8015658 <_dtoa_r+0x8c8>
 8015556:	f04f 0800 	mov.w	r8, #0
 801555a:	6933      	ldr	r3, [r6, #16]
 801555c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015560:	6918      	ldr	r0, [r3, #16]
 8015562:	f000 fcd7 	bl	8015f14 <__hi0bits>
 8015566:	f1c0 0020 	rsb	r0, r0, #32
 801556a:	9b05      	ldr	r3, [sp, #20]
 801556c:	4418      	add	r0, r3
 801556e:	f010 001f 	ands.w	r0, r0, #31
 8015572:	f000 8092 	beq.w	801569a <_dtoa_r+0x90a>
 8015576:	f1c0 0320 	rsb	r3, r0, #32
 801557a:	2b04      	cmp	r3, #4
 801557c:	f340 808a 	ble.w	8015694 <_dtoa_r+0x904>
 8015580:	f1c0 001c 	rsb	r0, r0, #28
 8015584:	9b04      	ldr	r3, [sp, #16]
 8015586:	4403      	add	r3, r0
 8015588:	9304      	str	r3, [sp, #16]
 801558a:	9b05      	ldr	r3, [sp, #20]
 801558c:	4403      	add	r3, r0
 801558e:	4405      	add	r5, r0
 8015590:	9305      	str	r3, [sp, #20]
 8015592:	9b04      	ldr	r3, [sp, #16]
 8015594:	2b00      	cmp	r3, #0
 8015596:	dd07      	ble.n	80155a8 <_dtoa_r+0x818>
 8015598:	ee18 1a10 	vmov	r1, s16
 801559c:	461a      	mov	r2, r3
 801559e:	4620      	mov	r0, r4
 80155a0:	f000 fe22 	bl	80161e8 <__lshift>
 80155a4:	ee08 0a10 	vmov	s16, r0
 80155a8:	9b05      	ldr	r3, [sp, #20]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	dd05      	ble.n	80155ba <_dtoa_r+0x82a>
 80155ae:	4631      	mov	r1, r6
 80155b0:	461a      	mov	r2, r3
 80155b2:	4620      	mov	r0, r4
 80155b4:	f000 fe18 	bl	80161e8 <__lshift>
 80155b8:	4606      	mov	r6, r0
 80155ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d06e      	beq.n	801569e <_dtoa_r+0x90e>
 80155c0:	ee18 0a10 	vmov	r0, s16
 80155c4:	4631      	mov	r1, r6
 80155c6:	f000 fe7f 	bl	80162c8 <__mcmp>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	da67      	bge.n	801569e <_dtoa_r+0x90e>
 80155ce:	9b00      	ldr	r3, [sp, #0]
 80155d0:	3b01      	subs	r3, #1
 80155d2:	ee18 1a10 	vmov	r1, s16
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	220a      	movs	r2, #10
 80155da:	2300      	movs	r3, #0
 80155dc:	4620      	mov	r0, r4
 80155de:	f000 fc53 	bl	8015e88 <__multadd>
 80155e2:	9b08      	ldr	r3, [sp, #32]
 80155e4:	ee08 0a10 	vmov	s16, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f000 81b1 	beq.w	8015950 <_dtoa_r+0xbc0>
 80155ee:	2300      	movs	r3, #0
 80155f0:	4639      	mov	r1, r7
 80155f2:	220a      	movs	r2, #10
 80155f4:	4620      	mov	r0, r4
 80155f6:	f000 fc47 	bl	8015e88 <__multadd>
 80155fa:	9b02      	ldr	r3, [sp, #8]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	4607      	mov	r7, r0
 8015600:	f300 808e 	bgt.w	8015720 <_dtoa_r+0x990>
 8015604:	9b06      	ldr	r3, [sp, #24]
 8015606:	2b02      	cmp	r3, #2
 8015608:	dc51      	bgt.n	80156ae <_dtoa_r+0x91e>
 801560a:	e089      	b.n	8015720 <_dtoa_r+0x990>
 801560c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801560e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015612:	e74b      	b.n	80154ac <_dtoa_r+0x71c>
 8015614:	9b03      	ldr	r3, [sp, #12]
 8015616:	1e5e      	subs	r6, r3, #1
 8015618:	9b07      	ldr	r3, [sp, #28]
 801561a:	42b3      	cmp	r3, r6
 801561c:	bfbf      	itttt	lt
 801561e:	9b07      	ldrlt	r3, [sp, #28]
 8015620:	9607      	strlt	r6, [sp, #28]
 8015622:	1af2      	sublt	r2, r6, r3
 8015624:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015626:	bfb6      	itet	lt
 8015628:	189b      	addlt	r3, r3, r2
 801562a:	1b9e      	subge	r6, r3, r6
 801562c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801562e:	9b03      	ldr	r3, [sp, #12]
 8015630:	bfb8      	it	lt
 8015632:	2600      	movlt	r6, #0
 8015634:	2b00      	cmp	r3, #0
 8015636:	bfb7      	itett	lt
 8015638:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801563c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015640:	1a9d      	sublt	r5, r3, r2
 8015642:	2300      	movlt	r3, #0
 8015644:	e734      	b.n	80154b0 <_dtoa_r+0x720>
 8015646:	9e07      	ldr	r6, [sp, #28]
 8015648:	9d04      	ldr	r5, [sp, #16]
 801564a:	9f08      	ldr	r7, [sp, #32]
 801564c:	e73b      	b.n	80154c6 <_dtoa_r+0x736>
 801564e:	9a07      	ldr	r2, [sp, #28]
 8015650:	e767      	b.n	8015522 <_dtoa_r+0x792>
 8015652:	9b06      	ldr	r3, [sp, #24]
 8015654:	2b01      	cmp	r3, #1
 8015656:	dc18      	bgt.n	801568a <_dtoa_r+0x8fa>
 8015658:	f1ba 0f00 	cmp.w	sl, #0
 801565c:	d115      	bne.n	801568a <_dtoa_r+0x8fa>
 801565e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015662:	b993      	cbnz	r3, 801568a <_dtoa_r+0x8fa>
 8015664:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015668:	0d1b      	lsrs	r3, r3, #20
 801566a:	051b      	lsls	r3, r3, #20
 801566c:	b183      	cbz	r3, 8015690 <_dtoa_r+0x900>
 801566e:	9b04      	ldr	r3, [sp, #16]
 8015670:	3301      	adds	r3, #1
 8015672:	9304      	str	r3, [sp, #16]
 8015674:	9b05      	ldr	r3, [sp, #20]
 8015676:	3301      	adds	r3, #1
 8015678:	9305      	str	r3, [sp, #20]
 801567a:	f04f 0801 	mov.w	r8, #1
 801567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015680:	2b00      	cmp	r3, #0
 8015682:	f47f af6a 	bne.w	801555a <_dtoa_r+0x7ca>
 8015686:	2001      	movs	r0, #1
 8015688:	e76f      	b.n	801556a <_dtoa_r+0x7da>
 801568a:	f04f 0800 	mov.w	r8, #0
 801568e:	e7f6      	b.n	801567e <_dtoa_r+0x8ee>
 8015690:	4698      	mov	r8, r3
 8015692:	e7f4      	b.n	801567e <_dtoa_r+0x8ee>
 8015694:	f43f af7d 	beq.w	8015592 <_dtoa_r+0x802>
 8015698:	4618      	mov	r0, r3
 801569a:	301c      	adds	r0, #28
 801569c:	e772      	b.n	8015584 <_dtoa_r+0x7f4>
 801569e:	9b03      	ldr	r3, [sp, #12]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	dc37      	bgt.n	8015714 <_dtoa_r+0x984>
 80156a4:	9b06      	ldr	r3, [sp, #24]
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	dd34      	ble.n	8015714 <_dtoa_r+0x984>
 80156aa:	9b03      	ldr	r3, [sp, #12]
 80156ac:	9302      	str	r3, [sp, #8]
 80156ae:	9b02      	ldr	r3, [sp, #8]
 80156b0:	b96b      	cbnz	r3, 80156ce <_dtoa_r+0x93e>
 80156b2:	4631      	mov	r1, r6
 80156b4:	2205      	movs	r2, #5
 80156b6:	4620      	mov	r0, r4
 80156b8:	f000 fbe6 	bl	8015e88 <__multadd>
 80156bc:	4601      	mov	r1, r0
 80156be:	4606      	mov	r6, r0
 80156c0:	ee18 0a10 	vmov	r0, s16
 80156c4:	f000 fe00 	bl	80162c8 <__mcmp>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	f73f adbb 	bgt.w	8015244 <_dtoa_r+0x4b4>
 80156ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d0:	9d01      	ldr	r5, [sp, #4]
 80156d2:	43db      	mvns	r3, r3
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	f04f 0800 	mov.w	r8, #0
 80156da:	4631      	mov	r1, r6
 80156dc:	4620      	mov	r0, r4
 80156de:	f000 fbb1 	bl	8015e44 <_Bfree>
 80156e2:	2f00      	cmp	r7, #0
 80156e4:	f43f aea4 	beq.w	8015430 <_dtoa_r+0x6a0>
 80156e8:	f1b8 0f00 	cmp.w	r8, #0
 80156ec:	d005      	beq.n	80156fa <_dtoa_r+0x96a>
 80156ee:	45b8      	cmp	r8, r7
 80156f0:	d003      	beq.n	80156fa <_dtoa_r+0x96a>
 80156f2:	4641      	mov	r1, r8
 80156f4:	4620      	mov	r0, r4
 80156f6:	f000 fba5 	bl	8015e44 <_Bfree>
 80156fa:	4639      	mov	r1, r7
 80156fc:	4620      	mov	r0, r4
 80156fe:	f000 fba1 	bl	8015e44 <_Bfree>
 8015702:	e695      	b.n	8015430 <_dtoa_r+0x6a0>
 8015704:	2600      	movs	r6, #0
 8015706:	4637      	mov	r7, r6
 8015708:	e7e1      	b.n	80156ce <_dtoa_r+0x93e>
 801570a:	9700      	str	r7, [sp, #0]
 801570c:	4637      	mov	r7, r6
 801570e:	e599      	b.n	8015244 <_dtoa_r+0x4b4>
 8015710:	40240000 	.word	0x40240000
 8015714:	9b08      	ldr	r3, [sp, #32]
 8015716:	2b00      	cmp	r3, #0
 8015718:	f000 80ca 	beq.w	80158b0 <_dtoa_r+0xb20>
 801571c:	9b03      	ldr	r3, [sp, #12]
 801571e:	9302      	str	r3, [sp, #8]
 8015720:	2d00      	cmp	r5, #0
 8015722:	dd05      	ble.n	8015730 <_dtoa_r+0x9a0>
 8015724:	4639      	mov	r1, r7
 8015726:	462a      	mov	r2, r5
 8015728:	4620      	mov	r0, r4
 801572a:	f000 fd5d 	bl	80161e8 <__lshift>
 801572e:	4607      	mov	r7, r0
 8015730:	f1b8 0f00 	cmp.w	r8, #0
 8015734:	d05b      	beq.n	80157ee <_dtoa_r+0xa5e>
 8015736:	6879      	ldr	r1, [r7, #4]
 8015738:	4620      	mov	r0, r4
 801573a:	f000 fb43 	bl	8015dc4 <_Balloc>
 801573e:	4605      	mov	r5, r0
 8015740:	b928      	cbnz	r0, 801574e <_dtoa_r+0x9be>
 8015742:	4b87      	ldr	r3, [pc, #540]	; (8015960 <_dtoa_r+0xbd0>)
 8015744:	4602      	mov	r2, r0
 8015746:	f240 21ea 	movw	r1, #746	; 0x2ea
 801574a:	f7ff bb3b 	b.w	8014dc4 <_dtoa_r+0x34>
 801574e:	693a      	ldr	r2, [r7, #16]
 8015750:	3202      	adds	r2, #2
 8015752:	0092      	lsls	r2, r2, #2
 8015754:	f107 010c 	add.w	r1, r7, #12
 8015758:	300c      	adds	r0, #12
 801575a:	f7fe fc73 	bl	8014044 <memcpy>
 801575e:	2201      	movs	r2, #1
 8015760:	4629      	mov	r1, r5
 8015762:	4620      	mov	r0, r4
 8015764:	f000 fd40 	bl	80161e8 <__lshift>
 8015768:	9b01      	ldr	r3, [sp, #4]
 801576a:	f103 0901 	add.w	r9, r3, #1
 801576e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015772:	4413      	add	r3, r2
 8015774:	9305      	str	r3, [sp, #20]
 8015776:	f00a 0301 	and.w	r3, sl, #1
 801577a:	46b8      	mov	r8, r7
 801577c:	9304      	str	r3, [sp, #16]
 801577e:	4607      	mov	r7, r0
 8015780:	4631      	mov	r1, r6
 8015782:	ee18 0a10 	vmov	r0, s16
 8015786:	f7ff fa75 	bl	8014c74 <quorem>
 801578a:	4641      	mov	r1, r8
 801578c:	9002      	str	r0, [sp, #8]
 801578e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015792:	ee18 0a10 	vmov	r0, s16
 8015796:	f000 fd97 	bl	80162c8 <__mcmp>
 801579a:	463a      	mov	r2, r7
 801579c:	9003      	str	r0, [sp, #12]
 801579e:	4631      	mov	r1, r6
 80157a0:	4620      	mov	r0, r4
 80157a2:	f000 fdad 	bl	8016300 <__mdiff>
 80157a6:	68c2      	ldr	r2, [r0, #12]
 80157a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80157ac:	4605      	mov	r5, r0
 80157ae:	bb02      	cbnz	r2, 80157f2 <_dtoa_r+0xa62>
 80157b0:	4601      	mov	r1, r0
 80157b2:	ee18 0a10 	vmov	r0, s16
 80157b6:	f000 fd87 	bl	80162c8 <__mcmp>
 80157ba:	4602      	mov	r2, r0
 80157bc:	4629      	mov	r1, r5
 80157be:	4620      	mov	r0, r4
 80157c0:	9207      	str	r2, [sp, #28]
 80157c2:	f000 fb3f 	bl	8015e44 <_Bfree>
 80157c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80157ca:	ea43 0102 	orr.w	r1, r3, r2
 80157ce:	9b04      	ldr	r3, [sp, #16]
 80157d0:	430b      	orrs	r3, r1
 80157d2:	464d      	mov	r5, r9
 80157d4:	d10f      	bne.n	80157f6 <_dtoa_r+0xa66>
 80157d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80157da:	d02a      	beq.n	8015832 <_dtoa_r+0xaa2>
 80157dc:	9b03      	ldr	r3, [sp, #12]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	dd02      	ble.n	80157e8 <_dtoa_r+0xa58>
 80157e2:	9b02      	ldr	r3, [sp, #8]
 80157e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80157e8:	f88b a000 	strb.w	sl, [fp]
 80157ec:	e775      	b.n	80156da <_dtoa_r+0x94a>
 80157ee:	4638      	mov	r0, r7
 80157f0:	e7ba      	b.n	8015768 <_dtoa_r+0x9d8>
 80157f2:	2201      	movs	r2, #1
 80157f4:	e7e2      	b.n	80157bc <_dtoa_r+0xa2c>
 80157f6:	9b03      	ldr	r3, [sp, #12]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	db04      	blt.n	8015806 <_dtoa_r+0xa76>
 80157fc:	9906      	ldr	r1, [sp, #24]
 80157fe:	430b      	orrs	r3, r1
 8015800:	9904      	ldr	r1, [sp, #16]
 8015802:	430b      	orrs	r3, r1
 8015804:	d122      	bne.n	801584c <_dtoa_r+0xabc>
 8015806:	2a00      	cmp	r2, #0
 8015808:	ddee      	ble.n	80157e8 <_dtoa_r+0xa58>
 801580a:	ee18 1a10 	vmov	r1, s16
 801580e:	2201      	movs	r2, #1
 8015810:	4620      	mov	r0, r4
 8015812:	f000 fce9 	bl	80161e8 <__lshift>
 8015816:	4631      	mov	r1, r6
 8015818:	ee08 0a10 	vmov	s16, r0
 801581c:	f000 fd54 	bl	80162c8 <__mcmp>
 8015820:	2800      	cmp	r0, #0
 8015822:	dc03      	bgt.n	801582c <_dtoa_r+0xa9c>
 8015824:	d1e0      	bne.n	80157e8 <_dtoa_r+0xa58>
 8015826:	f01a 0f01 	tst.w	sl, #1
 801582a:	d0dd      	beq.n	80157e8 <_dtoa_r+0xa58>
 801582c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015830:	d1d7      	bne.n	80157e2 <_dtoa_r+0xa52>
 8015832:	2339      	movs	r3, #57	; 0x39
 8015834:	f88b 3000 	strb.w	r3, [fp]
 8015838:	462b      	mov	r3, r5
 801583a:	461d      	mov	r5, r3
 801583c:	3b01      	subs	r3, #1
 801583e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015842:	2a39      	cmp	r2, #57	; 0x39
 8015844:	d071      	beq.n	801592a <_dtoa_r+0xb9a>
 8015846:	3201      	adds	r2, #1
 8015848:	701a      	strb	r2, [r3, #0]
 801584a:	e746      	b.n	80156da <_dtoa_r+0x94a>
 801584c:	2a00      	cmp	r2, #0
 801584e:	dd07      	ble.n	8015860 <_dtoa_r+0xad0>
 8015850:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015854:	d0ed      	beq.n	8015832 <_dtoa_r+0xaa2>
 8015856:	f10a 0301 	add.w	r3, sl, #1
 801585a:	f88b 3000 	strb.w	r3, [fp]
 801585e:	e73c      	b.n	80156da <_dtoa_r+0x94a>
 8015860:	9b05      	ldr	r3, [sp, #20]
 8015862:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015866:	4599      	cmp	r9, r3
 8015868:	d047      	beq.n	80158fa <_dtoa_r+0xb6a>
 801586a:	ee18 1a10 	vmov	r1, s16
 801586e:	2300      	movs	r3, #0
 8015870:	220a      	movs	r2, #10
 8015872:	4620      	mov	r0, r4
 8015874:	f000 fb08 	bl	8015e88 <__multadd>
 8015878:	45b8      	cmp	r8, r7
 801587a:	ee08 0a10 	vmov	s16, r0
 801587e:	f04f 0300 	mov.w	r3, #0
 8015882:	f04f 020a 	mov.w	r2, #10
 8015886:	4641      	mov	r1, r8
 8015888:	4620      	mov	r0, r4
 801588a:	d106      	bne.n	801589a <_dtoa_r+0xb0a>
 801588c:	f000 fafc 	bl	8015e88 <__multadd>
 8015890:	4680      	mov	r8, r0
 8015892:	4607      	mov	r7, r0
 8015894:	f109 0901 	add.w	r9, r9, #1
 8015898:	e772      	b.n	8015780 <_dtoa_r+0x9f0>
 801589a:	f000 faf5 	bl	8015e88 <__multadd>
 801589e:	4639      	mov	r1, r7
 80158a0:	4680      	mov	r8, r0
 80158a2:	2300      	movs	r3, #0
 80158a4:	220a      	movs	r2, #10
 80158a6:	4620      	mov	r0, r4
 80158a8:	f000 faee 	bl	8015e88 <__multadd>
 80158ac:	4607      	mov	r7, r0
 80158ae:	e7f1      	b.n	8015894 <_dtoa_r+0xb04>
 80158b0:	9b03      	ldr	r3, [sp, #12]
 80158b2:	9302      	str	r3, [sp, #8]
 80158b4:	9d01      	ldr	r5, [sp, #4]
 80158b6:	ee18 0a10 	vmov	r0, s16
 80158ba:	4631      	mov	r1, r6
 80158bc:	f7ff f9da 	bl	8014c74 <quorem>
 80158c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80158c4:	9b01      	ldr	r3, [sp, #4]
 80158c6:	f805 ab01 	strb.w	sl, [r5], #1
 80158ca:	1aea      	subs	r2, r5, r3
 80158cc:	9b02      	ldr	r3, [sp, #8]
 80158ce:	4293      	cmp	r3, r2
 80158d0:	dd09      	ble.n	80158e6 <_dtoa_r+0xb56>
 80158d2:	ee18 1a10 	vmov	r1, s16
 80158d6:	2300      	movs	r3, #0
 80158d8:	220a      	movs	r2, #10
 80158da:	4620      	mov	r0, r4
 80158dc:	f000 fad4 	bl	8015e88 <__multadd>
 80158e0:	ee08 0a10 	vmov	s16, r0
 80158e4:	e7e7      	b.n	80158b6 <_dtoa_r+0xb26>
 80158e6:	9b02      	ldr	r3, [sp, #8]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	bfc8      	it	gt
 80158ec:	461d      	movgt	r5, r3
 80158ee:	9b01      	ldr	r3, [sp, #4]
 80158f0:	bfd8      	it	le
 80158f2:	2501      	movle	r5, #1
 80158f4:	441d      	add	r5, r3
 80158f6:	f04f 0800 	mov.w	r8, #0
 80158fa:	ee18 1a10 	vmov	r1, s16
 80158fe:	2201      	movs	r2, #1
 8015900:	4620      	mov	r0, r4
 8015902:	f000 fc71 	bl	80161e8 <__lshift>
 8015906:	4631      	mov	r1, r6
 8015908:	ee08 0a10 	vmov	s16, r0
 801590c:	f000 fcdc 	bl	80162c8 <__mcmp>
 8015910:	2800      	cmp	r0, #0
 8015912:	dc91      	bgt.n	8015838 <_dtoa_r+0xaa8>
 8015914:	d102      	bne.n	801591c <_dtoa_r+0xb8c>
 8015916:	f01a 0f01 	tst.w	sl, #1
 801591a:	d18d      	bne.n	8015838 <_dtoa_r+0xaa8>
 801591c:	462b      	mov	r3, r5
 801591e:	461d      	mov	r5, r3
 8015920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015924:	2a30      	cmp	r2, #48	; 0x30
 8015926:	d0fa      	beq.n	801591e <_dtoa_r+0xb8e>
 8015928:	e6d7      	b.n	80156da <_dtoa_r+0x94a>
 801592a:	9a01      	ldr	r2, [sp, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	d184      	bne.n	801583a <_dtoa_r+0xaaa>
 8015930:	9b00      	ldr	r3, [sp, #0]
 8015932:	3301      	adds	r3, #1
 8015934:	9300      	str	r3, [sp, #0]
 8015936:	2331      	movs	r3, #49	; 0x31
 8015938:	7013      	strb	r3, [r2, #0]
 801593a:	e6ce      	b.n	80156da <_dtoa_r+0x94a>
 801593c:	4b09      	ldr	r3, [pc, #36]	; (8015964 <_dtoa_r+0xbd4>)
 801593e:	f7ff ba95 	b.w	8014e6c <_dtoa_r+0xdc>
 8015942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015944:	2b00      	cmp	r3, #0
 8015946:	f47f aa6e 	bne.w	8014e26 <_dtoa_r+0x96>
 801594a:	4b07      	ldr	r3, [pc, #28]	; (8015968 <_dtoa_r+0xbd8>)
 801594c:	f7ff ba8e 	b.w	8014e6c <_dtoa_r+0xdc>
 8015950:	9b02      	ldr	r3, [sp, #8]
 8015952:	2b00      	cmp	r3, #0
 8015954:	dcae      	bgt.n	80158b4 <_dtoa_r+0xb24>
 8015956:	9b06      	ldr	r3, [sp, #24]
 8015958:	2b02      	cmp	r3, #2
 801595a:	f73f aea8 	bgt.w	80156ae <_dtoa_r+0x91e>
 801595e:	e7a9      	b.n	80158b4 <_dtoa_r+0xb24>
 8015960:	08018c07 	.word	0x08018c07
 8015964:	08018b64 	.word	0x08018b64
 8015968:	08018b88 	.word	0x08018b88

0801596c <__sflush_r>:
 801596c:	898a      	ldrh	r2, [r1, #12]
 801596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015972:	4605      	mov	r5, r0
 8015974:	0710      	lsls	r0, r2, #28
 8015976:	460c      	mov	r4, r1
 8015978:	d458      	bmi.n	8015a2c <__sflush_r+0xc0>
 801597a:	684b      	ldr	r3, [r1, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	dc05      	bgt.n	801598c <__sflush_r+0x20>
 8015980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015982:	2b00      	cmp	r3, #0
 8015984:	dc02      	bgt.n	801598c <__sflush_r+0x20>
 8015986:	2000      	movs	r0, #0
 8015988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801598c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801598e:	2e00      	cmp	r6, #0
 8015990:	d0f9      	beq.n	8015986 <__sflush_r+0x1a>
 8015992:	2300      	movs	r3, #0
 8015994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015998:	682f      	ldr	r7, [r5, #0]
 801599a:	602b      	str	r3, [r5, #0]
 801599c:	d032      	beq.n	8015a04 <__sflush_r+0x98>
 801599e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159a0:	89a3      	ldrh	r3, [r4, #12]
 80159a2:	075a      	lsls	r2, r3, #29
 80159a4:	d505      	bpl.n	80159b2 <__sflush_r+0x46>
 80159a6:	6863      	ldr	r3, [r4, #4]
 80159a8:	1ac0      	subs	r0, r0, r3
 80159aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159ac:	b10b      	cbz	r3, 80159b2 <__sflush_r+0x46>
 80159ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159b0:	1ac0      	subs	r0, r0, r3
 80159b2:	2300      	movs	r3, #0
 80159b4:	4602      	mov	r2, r0
 80159b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159b8:	6a21      	ldr	r1, [r4, #32]
 80159ba:	4628      	mov	r0, r5
 80159bc:	47b0      	blx	r6
 80159be:	1c43      	adds	r3, r0, #1
 80159c0:	89a3      	ldrh	r3, [r4, #12]
 80159c2:	d106      	bne.n	80159d2 <__sflush_r+0x66>
 80159c4:	6829      	ldr	r1, [r5, #0]
 80159c6:	291d      	cmp	r1, #29
 80159c8:	d82c      	bhi.n	8015a24 <__sflush_r+0xb8>
 80159ca:	4a2a      	ldr	r2, [pc, #168]	; (8015a74 <__sflush_r+0x108>)
 80159cc:	40ca      	lsrs	r2, r1
 80159ce:	07d6      	lsls	r6, r2, #31
 80159d0:	d528      	bpl.n	8015a24 <__sflush_r+0xb8>
 80159d2:	2200      	movs	r2, #0
 80159d4:	6062      	str	r2, [r4, #4]
 80159d6:	04d9      	lsls	r1, r3, #19
 80159d8:	6922      	ldr	r2, [r4, #16]
 80159da:	6022      	str	r2, [r4, #0]
 80159dc:	d504      	bpl.n	80159e8 <__sflush_r+0x7c>
 80159de:	1c42      	adds	r2, r0, #1
 80159e0:	d101      	bne.n	80159e6 <__sflush_r+0x7a>
 80159e2:	682b      	ldr	r3, [r5, #0]
 80159e4:	b903      	cbnz	r3, 80159e8 <__sflush_r+0x7c>
 80159e6:	6560      	str	r0, [r4, #84]	; 0x54
 80159e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159ea:	602f      	str	r7, [r5, #0]
 80159ec:	2900      	cmp	r1, #0
 80159ee:	d0ca      	beq.n	8015986 <__sflush_r+0x1a>
 80159f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159f4:	4299      	cmp	r1, r3
 80159f6:	d002      	beq.n	80159fe <__sflush_r+0x92>
 80159f8:	4628      	mov	r0, r5
 80159fa:	f000 fd7d 	bl	80164f8 <_free_r>
 80159fe:	2000      	movs	r0, #0
 8015a00:	6360      	str	r0, [r4, #52]	; 0x34
 8015a02:	e7c1      	b.n	8015988 <__sflush_r+0x1c>
 8015a04:	6a21      	ldr	r1, [r4, #32]
 8015a06:	2301      	movs	r3, #1
 8015a08:	4628      	mov	r0, r5
 8015a0a:	47b0      	blx	r6
 8015a0c:	1c41      	adds	r1, r0, #1
 8015a0e:	d1c7      	bne.n	80159a0 <__sflush_r+0x34>
 8015a10:	682b      	ldr	r3, [r5, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d0c4      	beq.n	80159a0 <__sflush_r+0x34>
 8015a16:	2b1d      	cmp	r3, #29
 8015a18:	d001      	beq.n	8015a1e <__sflush_r+0xb2>
 8015a1a:	2b16      	cmp	r3, #22
 8015a1c:	d101      	bne.n	8015a22 <__sflush_r+0xb6>
 8015a1e:	602f      	str	r7, [r5, #0]
 8015a20:	e7b1      	b.n	8015986 <__sflush_r+0x1a>
 8015a22:	89a3      	ldrh	r3, [r4, #12]
 8015a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a28:	81a3      	strh	r3, [r4, #12]
 8015a2a:	e7ad      	b.n	8015988 <__sflush_r+0x1c>
 8015a2c:	690f      	ldr	r7, [r1, #16]
 8015a2e:	2f00      	cmp	r7, #0
 8015a30:	d0a9      	beq.n	8015986 <__sflush_r+0x1a>
 8015a32:	0793      	lsls	r3, r2, #30
 8015a34:	680e      	ldr	r6, [r1, #0]
 8015a36:	bf08      	it	eq
 8015a38:	694b      	ldreq	r3, [r1, #20]
 8015a3a:	600f      	str	r7, [r1, #0]
 8015a3c:	bf18      	it	ne
 8015a3e:	2300      	movne	r3, #0
 8015a40:	eba6 0807 	sub.w	r8, r6, r7
 8015a44:	608b      	str	r3, [r1, #8]
 8015a46:	f1b8 0f00 	cmp.w	r8, #0
 8015a4a:	dd9c      	ble.n	8015986 <__sflush_r+0x1a>
 8015a4c:	6a21      	ldr	r1, [r4, #32]
 8015a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a50:	4643      	mov	r3, r8
 8015a52:	463a      	mov	r2, r7
 8015a54:	4628      	mov	r0, r5
 8015a56:	47b0      	blx	r6
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	dc06      	bgt.n	8015a6a <__sflush_r+0xfe>
 8015a5c:	89a3      	ldrh	r3, [r4, #12]
 8015a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a62:	81a3      	strh	r3, [r4, #12]
 8015a64:	f04f 30ff 	mov.w	r0, #4294967295
 8015a68:	e78e      	b.n	8015988 <__sflush_r+0x1c>
 8015a6a:	4407      	add	r7, r0
 8015a6c:	eba8 0800 	sub.w	r8, r8, r0
 8015a70:	e7e9      	b.n	8015a46 <__sflush_r+0xda>
 8015a72:	bf00      	nop
 8015a74:	20400001 	.word	0x20400001

08015a78 <_fflush_r>:
 8015a78:	b538      	push	{r3, r4, r5, lr}
 8015a7a:	690b      	ldr	r3, [r1, #16]
 8015a7c:	4605      	mov	r5, r0
 8015a7e:	460c      	mov	r4, r1
 8015a80:	b913      	cbnz	r3, 8015a88 <_fflush_r+0x10>
 8015a82:	2500      	movs	r5, #0
 8015a84:	4628      	mov	r0, r5
 8015a86:	bd38      	pop	{r3, r4, r5, pc}
 8015a88:	b118      	cbz	r0, 8015a92 <_fflush_r+0x1a>
 8015a8a:	6983      	ldr	r3, [r0, #24]
 8015a8c:	b90b      	cbnz	r3, 8015a92 <_fflush_r+0x1a>
 8015a8e:	f000 f887 	bl	8015ba0 <__sinit>
 8015a92:	4b14      	ldr	r3, [pc, #80]	; (8015ae4 <_fflush_r+0x6c>)
 8015a94:	429c      	cmp	r4, r3
 8015a96:	d11b      	bne.n	8015ad0 <_fflush_r+0x58>
 8015a98:	686c      	ldr	r4, [r5, #4]
 8015a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d0ef      	beq.n	8015a82 <_fflush_r+0xa>
 8015aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015aa4:	07d0      	lsls	r0, r2, #31
 8015aa6:	d404      	bmi.n	8015ab2 <_fflush_r+0x3a>
 8015aa8:	0599      	lsls	r1, r3, #22
 8015aaa:	d402      	bmi.n	8015ab2 <_fflush_r+0x3a>
 8015aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aae:	f000 f91a 	bl	8015ce6 <__retarget_lock_acquire_recursive>
 8015ab2:	4628      	mov	r0, r5
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	f7ff ff59 	bl	801596c <__sflush_r>
 8015aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015abc:	07da      	lsls	r2, r3, #31
 8015abe:	4605      	mov	r5, r0
 8015ac0:	d4e0      	bmi.n	8015a84 <_fflush_r+0xc>
 8015ac2:	89a3      	ldrh	r3, [r4, #12]
 8015ac4:	059b      	lsls	r3, r3, #22
 8015ac6:	d4dd      	bmi.n	8015a84 <_fflush_r+0xc>
 8015ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aca:	f000 f90d 	bl	8015ce8 <__retarget_lock_release_recursive>
 8015ace:	e7d9      	b.n	8015a84 <_fflush_r+0xc>
 8015ad0:	4b05      	ldr	r3, [pc, #20]	; (8015ae8 <_fflush_r+0x70>)
 8015ad2:	429c      	cmp	r4, r3
 8015ad4:	d101      	bne.n	8015ada <_fflush_r+0x62>
 8015ad6:	68ac      	ldr	r4, [r5, #8]
 8015ad8:	e7df      	b.n	8015a9a <_fflush_r+0x22>
 8015ada:	4b04      	ldr	r3, [pc, #16]	; (8015aec <_fflush_r+0x74>)
 8015adc:	429c      	cmp	r4, r3
 8015ade:	bf08      	it	eq
 8015ae0:	68ec      	ldreq	r4, [r5, #12]
 8015ae2:	e7da      	b.n	8015a9a <_fflush_r+0x22>
 8015ae4:	08018c38 	.word	0x08018c38
 8015ae8:	08018c58 	.word	0x08018c58
 8015aec:	08018c18 	.word	0x08018c18

08015af0 <std>:
 8015af0:	2300      	movs	r3, #0
 8015af2:	b510      	push	{r4, lr}
 8015af4:	4604      	mov	r4, r0
 8015af6:	e9c0 3300 	strd	r3, r3, [r0]
 8015afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015afe:	6083      	str	r3, [r0, #8]
 8015b00:	8181      	strh	r1, [r0, #12]
 8015b02:	6643      	str	r3, [r0, #100]	; 0x64
 8015b04:	81c2      	strh	r2, [r0, #14]
 8015b06:	6183      	str	r3, [r0, #24]
 8015b08:	4619      	mov	r1, r3
 8015b0a:	2208      	movs	r2, #8
 8015b0c:	305c      	adds	r0, #92	; 0x5c
 8015b0e:	f7fe faa7 	bl	8014060 <memset>
 8015b12:	4b05      	ldr	r3, [pc, #20]	; (8015b28 <std+0x38>)
 8015b14:	6263      	str	r3, [r4, #36]	; 0x24
 8015b16:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <std+0x3c>)
 8015b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b1a:	4b05      	ldr	r3, [pc, #20]	; (8015b30 <std+0x40>)
 8015b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b1e:	4b05      	ldr	r3, [pc, #20]	; (8015b34 <std+0x44>)
 8015b20:	6224      	str	r4, [r4, #32]
 8015b22:	6323      	str	r3, [r4, #48]	; 0x30
 8015b24:	bd10      	pop	{r4, pc}
 8015b26:	bf00      	nop
 8015b28:	08016cd5 	.word	0x08016cd5
 8015b2c:	08016cf7 	.word	0x08016cf7
 8015b30:	08016d2f 	.word	0x08016d2f
 8015b34:	08016d53 	.word	0x08016d53

08015b38 <_cleanup_r>:
 8015b38:	4901      	ldr	r1, [pc, #4]	; (8015b40 <_cleanup_r+0x8>)
 8015b3a:	f000 b8af 	b.w	8015c9c <_fwalk_reent>
 8015b3e:	bf00      	nop
 8015b40:	08015a79 	.word	0x08015a79

08015b44 <__sfmoreglue>:
 8015b44:	b570      	push	{r4, r5, r6, lr}
 8015b46:	2268      	movs	r2, #104	; 0x68
 8015b48:	1e4d      	subs	r5, r1, #1
 8015b4a:	4355      	muls	r5, r2
 8015b4c:	460e      	mov	r6, r1
 8015b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b52:	f000 fd3d 	bl	80165d0 <_malloc_r>
 8015b56:	4604      	mov	r4, r0
 8015b58:	b140      	cbz	r0, 8015b6c <__sfmoreglue+0x28>
 8015b5a:	2100      	movs	r1, #0
 8015b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8015b60:	300c      	adds	r0, #12
 8015b62:	60a0      	str	r0, [r4, #8]
 8015b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b68:	f7fe fa7a 	bl	8014060 <memset>
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	bd70      	pop	{r4, r5, r6, pc}

08015b70 <__sfp_lock_acquire>:
 8015b70:	4801      	ldr	r0, [pc, #4]	; (8015b78 <__sfp_lock_acquire+0x8>)
 8015b72:	f000 b8b8 	b.w	8015ce6 <__retarget_lock_acquire_recursive>
 8015b76:	bf00      	nop
 8015b78:	20001531 	.word	0x20001531

08015b7c <__sfp_lock_release>:
 8015b7c:	4801      	ldr	r0, [pc, #4]	; (8015b84 <__sfp_lock_release+0x8>)
 8015b7e:	f000 b8b3 	b.w	8015ce8 <__retarget_lock_release_recursive>
 8015b82:	bf00      	nop
 8015b84:	20001531 	.word	0x20001531

08015b88 <__sinit_lock_acquire>:
 8015b88:	4801      	ldr	r0, [pc, #4]	; (8015b90 <__sinit_lock_acquire+0x8>)
 8015b8a:	f000 b8ac 	b.w	8015ce6 <__retarget_lock_acquire_recursive>
 8015b8e:	bf00      	nop
 8015b90:	20001532 	.word	0x20001532

08015b94 <__sinit_lock_release>:
 8015b94:	4801      	ldr	r0, [pc, #4]	; (8015b9c <__sinit_lock_release+0x8>)
 8015b96:	f000 b8a7 	b.w	8015ce8 <__retarget_lock_release_recursive>
 8015b9a:	bf00      	nop
 8015b9c:	20001532 	.word	0x20001532

08015ba0 <__sinit>:
 8015ba0:	b510      	push	{r4, lr}
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	f7ff fff0 	bl	8015b88 <__sinit_lock_acquire>
 8015ba8:	69a3      	ldr	r3, [r4, #24]
 8015baa:	b11b      	cbz	r3, 8015bb4 <__sinit+0x14>
 8015bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bb0:	f7ff bff0 	b.w	8015b94 <__sinit_lock_release>
 8015bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8015bba:	4b13      	ldr	r3, [pc, #76]	; (8015c08 <__sinit+0x68>)
 8015bbc:	4a13      	ldr	r2, [pc, #76]	; (8015c0c <__sinit+0x6c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015bc2:	42a3      	cmp	r3, r4
 8015bc4:	bf04      	itt	eq
 8015bc6:	2301      	moveq	r3, #1
 8015bc8:	61a3      	streq	r3, [r4, #24]
 8015bca:	4620      	mov	r0, r4
 8015bcc:	f000 f820 	bl	8015c10 <__sfp>
 8015bd0:	6060      	str	r0, [r4, #4]
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f000 f81c 	bl	8015c10 <__sfp>
 8015bd8:	60a0      	str	r0, [r4, #8]
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f000 f818 	bl	8015c10 <__sfp>
 8015be0:	2200      	movs	r2, #0
 8015be2:	60e0      	str	r0, [r4, #12]
 8015be4:	2104      	movs	r1, #4
 8015be6:	6860      	ldr	r0, [r4, #4]
 8015be8:	f7ff ff82 	bl	8015af0 <std>
 8015bec:	68a0      	ldr	r0, [r4, #8]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	2109      	movs	r1, #9
 8015bf2:	f7ff ff7d 	bl	8015af0 <std>
 8015bf6:	68e0      	ldr	r0, [r4, #12]
 8015bf8:	2202      	movs	r2, #2
 8015bfa:	2112      	movs	r1, #18
 8015bfc:	f7ff ff78 	bl	8015af0 <std>
 8015c00:	2301      	movs	r3, #1
 8015c02:	61a3      	str	r3, [r4, #24]
 8015c04:	e7d2      	b.n	8015bac <__sinit+0xc>
 8015c06:	bf00      	nop
 8015c08:	08018b50 	.word	0x08018b50
 8015c0c:	08015b39 	.word	0x08015b39

08015c10 <__sfp>:
 8015c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c12:	4607      	mov	r7, r0
 8015c14:	f7ff ffac 	bl	8015b70 <__sfp_lock_acquire>
 8015c18:	4b1e      	ldr	r3, [pc, #120]	; (8015c94 <__sfp+0x84>)
 8015c1a:	681e      	ldr	r6, [r3, #0]
 8015c1c:	69b3      	ldr	r3, [r6, #24]
 8015c1e:	b913      	cbnz	r3, 8015c26 <__sfp+0x16>
 8015c20:	4630      	mov	r0, r6
 8015c22:	f7ff ffbd 	bl	8015ba0 <__sinit>
 8015c26:	3648      	adds	r6, #72	; 0x48
 8015c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c2c:	3b01      	subs	r3, #1
 8015c2e:	d503      	bpl.n	8015c38 <__sfp+0x28>
 8015c30:	6833      	ldr	r3, [r6, #0]
 8015c32:	b30b      	cbz	r3, 8015c78 <__sfp+0x68>
 8015c34:	6836      	ldr	r6, [r6, #0]
 8015c36:	e7f7      	b.n	8015c28 <__sfp+0x18>
 8015c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c3c:	b9d5      	cbnz	r5, 8015c74 <__sfp+0x64>
 8015c3e:	4b16      	ldr	r3, [pc, #88]	; (8015c98 <__sfp+0x88>)
 8015c40:	60e3      	str	r3, [r4, #12]
 8015c42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015c46:	6665      	str	r5, [r4, #100]	; 0x64
 8015c48:	f000 f84c 	bl	8015ce4 <__retarget_lock_init_recursive>
 8015c4c:	f7ff ff96 	bl	8015b7c <__sfp_lock_release>
 8015c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015c58:	6025      	str	r5, [r4, #0]
 8015c5a:	61a5      	str	r5, [r4, #24]
 8015c5c:	2208      	movs	r2, #8
 8015c5e:	4629      	mov	r1, r5
 8015c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c64:	f7fe f9fc 	bl	8014060 <memset>
 8015c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c70:	4620      	mov	r0, r4
 8015c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c74:	3468      	adds	r4, #104	; 0x68
 8015c76:	e7d9      	b.n	8015c2c <__sfp+0x1c>
 8015c78:	2104      	movs	r1, #4
 8015c7a:	4638      	mov	r0, r7
 8015c7c:	f7ff ff62 	bl	8015b44 <__sfmoreglue>
 8015c80:	4604      	mov	r4, r0
 8015c82:	6030      	str	r0, [r6, #0]
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d1d5      	bne.n	8015c34 <__sfp+0x24>
 8015c88:	f7ff ff78 	bl	8015b7c <__sfp_lock_release>
 8015c8c:	230c      	movs	r3, #12
 8015c8e:	603b      	str	r3, [r7, #0]
 8015c90:	e7ee      	b.n	8015c70 <__sfp+0x60>
 8015c92:	bf00      	nop
 8015c94:	08018b50 	.word	0x08018b50
 8015c98:	ffff0001 	.word	0xffff0001

08015c9c <_fwalk_reent>:
 8015c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ca0:	4606      	mov	r6, r0
 8015ca2:	4688      	mov	r8, r1
 8015ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015ca8:	2700      	movs	r7, #0
 8015caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015cae:	f1b9 0901 	subs.w	r9, r9, #1
 8015cb2:	d505      	bpl.n	8015cc0 <_fwalk_reent+0x24>
 8015cb4:	6824      	ldr	r4, [r4, #0]
 8015cb6:	2c00      	cmp	r4, #0
 8015cb8:	d1f7      	bne.n	8015caa <_fwalk_reent+0xe>
 8015cba:	4638      	mov	r0, r7
 8015cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cc0:	89ab      	ldrh	r3, [r5, #12]
 8015cc2:	2b01      	cmp	r3, #1
 8015cc4:	d907      	bls.n	8015cd6 <_fwalk_reent+0x3a>
 8015cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	d003      	beq.n	8015cd6 <_fwalk_reent+0x3a>
 8015cce:	4629      	mov	r1, r5
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	47c0      	blx	r8
 8015cd4:	4307      	orrs	r7, r0
 8015cd6:	3568      	adds	r5, #104	; 0x68
 8015cd8:	e7e9      	b.n	8015cae <_fwalk_reent+0x12>
	...

08015cdc <_localeconv_r>:
 8015cdc:	4800      	ldr	r0, [pc, #0]	; (8015ce0 <_localeconv_r+0x4>)
 8015cde:	4770      	bx	lr
 8015ce0:	20000398 	.word	0x20000398

08015ce4 <__retarget_lock_init_recursive>:
 8015ce4:	4770      	bx	lr

08015ce6 <__retarget_lock_acquire_recursive>:
 8015ce6:	4770      	bx	lr

08015ce8 <__retarget_lock_release_recursive>:
 8015ce8:	4770      	bx	lr

08015cea <__swhatbuf_r>:
 8015cea:	b570      	push	{r4, r5, r6, lr}
 8015cec:	460e      	mov	r6, r1
 8015cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf2:	2900      	cmp	r1, #0
 8015cf4:	b096      	sub	sp, #88	; 0x58
 8015cf6:	4614      	mov	r4, r2
 8015cf8:	461d      	mov	r5, r3
 8015cfa:	da08      	bge.n	8015d0e <__swhatbuf_r+0x24>
 8015cfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015d00:	2200      	movs	r2, #0
 8015d02:	602a      	str	r2, [r5, #0]
 8015d04:	061a      	lsls	r2, r3, #24
 8015d06:	d410      	bmi.n	8015d2a <__swhatbuf_r+0x40>
 8015d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d0c:	e00e      	b.n	8015d2c <__swhatbuf_r+0x42>
 8015d0e:	466a      	mov	r2, sp
 8015d10:	f001 f882 	bl	8016e18 <_fstat_r>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	dbf1      	blt.n	8015cfc <__swhatbuf_r+0x12>
 8015d18:	9a01      	ldr	r2, [sp, #4]
 8015d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d22:	425a      	negs	r2, r3
 8015d24:	415a      	adcs	r2, r3
 8015d26:	602a      	str	r2, [r5, #0]
 8015d28:	e7ee      	b.n	8015d08 <__swhatbuf_r+0x1e>
 8015d2a:	2340      	movs	r3, #64	; 0x40
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	6023      	str	r3, [r4, #0]
 8015d30:	b016      	add	sp, #88	; 0x58
 8015d32:	bd70      	pop	{r4, r5, r6, pc}

08015d34 <__smakebuf_r>:
 8015d34:	898b      	ldrh	r3, [r1, #12]
 8015d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d38:	079d      	lsls	r5, r3, #30
 8015d3a:	4606      	mov	r6, r0
 8015d3c:	460c      	mov	r4, r1
 8015d3e:	d507      	bpl.n	8015d50 <__smakebuf_r+0x1c>
 8015d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d44:	6023      	str	r3, [r4, #0]
 8015d46:	6123      	str	r3, [r4, #16]
 8015d48:	2301      	movs	r3, #1
 8015d4a:	6163      	str	r3, [r4, #20]
 8015d4c:	b002      	add	sp, #8
 8015d4e:	bd70      	pop	{r4, r5, r6, pc}
 8015d50:	ab01      	add	r3, sp, #4
 8015d52:	466a      	mov	r2, sp
 8015d54:	f7ff ffc9 	bl	8015cea <__swhatbuf_r>
 8015d58:	9900      	ldr	r1, [sp, #0]
 8015d5a:	4605      	mov	r5, r0
 8015d5c:	4630      	mov	r0, r6
 8015d5e:	f000 fc37 	bl	80165d0 <_malloc_r>
 8015d62:	b948      	cbnz	r0, 8015d78 <__smakebuf_r+0x44>
 8015d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d68:	059a      	lsls	r2, r3, #22
 8015d6a:	d4ef      	bmi.n	8015d4c <__smakebuf_r+0x18>
 8015d6c:	f023 0303 	bic.w	r3, r3, #3
 8015d70:	f043 0302 	orr.w	r3, r3, #2
 8015d74:	81a3      	strh	r3, [r4, #12]
 8015d76:	e7e3      	b.n	8015d40 <__smakebuf_r+0xc>
 8015d78:	4b0d      	ldr	r3, [pc, #52]	; (8015db0 <__smakebuf_r+0x7c>)
 8015d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d7c:	89a3      	ldrh	r3, [r4, #12]
 8015d7e:	6020      	str	r0, [r4, #0]
 8015d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d84:	81a3      	strh	r3, [r4, #12]
 8015d86:	9b00      	ldr	r3, [sp, #0]
 8015d88:	6163      	str	r3, [r4, #20]
 8015d8a:	9b01      	ldr	r3, [sp, #4]
 8015d8c:	6120      	str	r0, [r4, #16]
 8015d8e:	b15b      	cbz	r3, 8015da8 <__smakebuf_r+0x74>
 8015d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d94:	4630      	mov	r0, r6
 8015d96:	f001 f851 	bl	8016e3c <_isatty_r>
 8015d9a:	b128      	cbz	r0, 8015da8 <__smakebuf_r+0x74>
 8015d9c:	89a3      	ldrh	r3, [r4, #12]
 8015d9e:	f023 0303 	bic.w	r3, r3, #3
 8015da2:	f043 0301 	orr.w	r3, r3, #1
 8015da6:	81a3      	strh	r3, [r4, #12]
 8015da8:	89a0      	ldrh	r0, [r4, #12]
 8015daa:	4305      	orrs	r5, r0
 8015dac:	81a5      	strh	r5, [r4, #12]
 8015dae:	e7cd      	b.n	8015d4c <__smakebuf_r+0x18>
 8015db0:	08015b39 	.word	0x08015b39

08015db4 <malloc>:
 8015db4:	4b02      	ldr	r3, [pc, #8]	; (8015dc0 <malloc+0xc>)
 8015db6:	4601      	mov	r1, r0
 8015db8:	6818      	ldr	r0, [r3, #0]
 8015dba:	f000 bc09 	b.w	80165d0 <_malloc_r>
 8015dbe:	bf00      	nop
 8015dc0:	20000244 	.word	0x20000244

08015dc4 <_Balloc>:
 8015dc4:	b570      	push	{r4, r5, r6, lr}
 8015dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015dc8:	4604      	mov	r4, r0
 8015dca:	460d      	mov	r5, r1
 8015dcc:	b976      	cbnz	r6, 8015dec <_Balloc+0x28>
 8015dce:	2010      	movs	r0, #16
 8015dd0:	f7ff fff0 	bl	8015db4 <malloc>
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	6260      	str	r0, [r4, #36]	; 0x24
 8015dd8:	b920      	cbnz	r0, 8015de4 <_Balloc+0x20>
 8015dda:	4b18      	ldr	r3, [pc, #96]	; (8015e3c <_Balloc+0x78>)
 8015ddc:	4818      	ldr	r0, [pc, #96]	; (8015e40 <_Balloc+0x7c>)
 8015dde:	2166      	movs	r1, #102	; 0x66
 8015de0:	f000 ffda 	bl	8016d98 <__assert_func>
 8015de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015de8:	6006      	str	r6, [r0, #0]
 8015dea:	60c6      	str	r6, [r0, #12]
 8015dec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015dee:	68f3      	ldr	r3, [r6, #12]
 8015df0:	b183      	cbz	r3, 8015e14 <_Balloc+0x50>
 8015df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015dfa:	b9b8      	cbnz	r0, 8015e2c <_Balloc+0x68>
 8015dfc:	2101      	movs	r1, #1
 8015dfe:	fa01 f605 	lsl.w	r6, r1, r5
 8015e02:	1d72      	adds	r2, r6, #5
 8015e04:	0092      	lsls	r2, r2, #2
 8015e06:	4620      	mov	r0, r4
 8015e08:	f000 fb60 	bl	80164cc <_calloc_r>
 8015e0c:	b160      	cbz	r0, 8015e28 <_Balloc+0x64>
 8015e0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015e12:	e00e      	b.n	8015e32 <_Balloc+0x6e>
 8015e14:	2221      	movs	r2, #33	; 0x21
 8015e16:	2104      	movs	r1, #4
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f000 fb57 	bl	80164cc <_calloc_r>
 8015e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e20:	60f0      	str	r0, [r6, #12]
 8015e22:	68db      	ldr	r3, [r3, #12]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d1e4      	bne.n	8015df2 <_Balloc+0x2e>
 8015e28:	2000      	movs	r0, #0
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
 8015e2c:	6802      	ldr	r2, [r0, #0]
 8015e2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e32:	2300      	movs	r3, #0
 8015e34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015e38:	e7f7      	b.n	8015e2a <_Balloc+0x66>
 8015e3a:	bf00      	nop
 8015e3c:	08018b95 	.word	0x08018b95
 8015e40:	08018c78 	.word	0x08018c78

08015e44 <_Bfree>:
 8015e44:	b570      	push	{r4, r5, r6, lr}
 8015e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015e48:	4605      	mov	r5, r0
 8015e4a:	460c      	mov	r4, r1
 8015e4c:	b976      	cbnz	r6, 8015e6c <_Bfree+0x28>
 8015e4e:	2010      	movs	r0, #16
 8015e50:	f7ff ffb0 	bl	8015db4 <malloc>
 8015e54:	4602      	mov	r2, r0
 8015e56:	6268      	str	r0, [r5, #36]	; 0x24
 8015e58:	b920      	cbnz	r0, 8015e64 <_Bfree+0x20>
 8015e5a:	4b09      	ldr	r3, [pc, #36]	; (8015e80 <_Bfree+0x3c>)
 8015e5c:	4809      	ldr	r0, [pc, #36]	; (8015e84 <_Bfree+0x40>)
 8015e5e:	218a      	movs	r1, #138	; 0x8a
 8015e60:	f000 ff9a 	bl	8016d98 <__assert_func>
 8015e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e68:	6006      	str	r6, [r0, #0]
 8015e6a:	60c6      	str	r6, [r0, #12]
 8015e6c:	b13c      	cbz	r4, 8015e7e <_Bfree+0x3a>
 8015e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015e70:	6862      	ldr	r2, [r4, #4]
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e78:	6021      	str	r1, [r4, #0]
 8015e7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015e7e:	bd70      	pop	{r4, r5, r6, pc}
 8015e80:	08018b95 	.word	0x08018b95
 8015e84:	08018c78 	.word	0x08018c78

08015e88 <__multadd>:
 8015e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e8c:	690d      	ldr	r5, [r1, #16]
 8015e8e:	4607      	mov	r7, r0
 8015e90:	460c      	mov	r4, r1
 8015e92:	461e      	mov	r6, r3
 8015e94:	f101 0c14 	add.w	ip, r1, #20
 8015e98:	2000      	movs	r0, #0
 8015e9a:	f8dc 3000 	ldr.w	r3, [ip]
 8015e9e:	b299      	uxth	r1, r3
 8015ea0:	fb02 6101 	mla	r1, r2, r1, r6
 8015ea4:	0c1e      	lsrs	r6, r3, #16
 8015ea6:	0c0b      	lsrs	r3, r1, #16
 8015ea8:	fb02 3306 	mla	r3, r2, r6, r3
 8015eac:	b289      	uxth	r1, r1
 8015eae:	3001      	adds	r0, #1
 8015eb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015eb4:	4285      	cmp	r5, r0
 8015eb6:	f84c 1b04 	str.w	r1, [ip], #4
 8015eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015ebe:	dcec      	bgt.n	8015e9a <__multadd+0x12>
 8015ec0:	b30e      	cbz	r6, 8015f06 <__multadd+0x7e>
 8015ec2:	68a3      	ldr	r3, [r4, #8]
 8015ec4:	42ab      	cmp	r3, r5
 8015ec6:	dc19      	bgt.n	8015efc <__multadd+0x74>
 8015ec8:	6861      	ldr	r1, [r4, #4]
 8015eca:	4638      	mov	r0, r7
 8015ecc:	3101      	adds	r1, #1
 8015ece:	f7ff ff79 	bl	8015dc4 <_Balloc>
 8015ed2:	4680      	mov	r8, r0
 8015ed4:	b928      	cbnz	r0, 8015ee2 <__multadd+0x5a>
 8015ed6:	4602      	mov	r2, r0
 8015ed8:	4b0c      	ldr	r3, [pc, #48]	; (8015f0c <__multadd+0x84>)
 8015eda:	480d      	ldr	r0, [pc, #52]	; (8015f10 <__multadd+0x88>)
 8015edc:	21b5      	movs	r1, #181	; 0xb5
 8015ede:	f000 ff5b 	bl	8016d98 <__assert_func>
 8015ee2:	6922      	ldr	r2, [r4, #16]
 8015ee4:	3202      	adds	r2, #2
 8015ee6:	f104 010c 	add.w	r1, r4, #12
 8015eea:	0092      	lsls	r2, r2, #2
 8015eec:	300c      	adds	r0, #12
 8015eee:	f7fe f8a9 	bl	8014044 <memcpy>
 8015ef2:	4621      	mov	r1, r4
 8015ef4:	4638      	mov	r0, r7
 8015ef6:	f7ff ffa5 	bl	8015e44 <_Bfree>
 8015efa:	4644      	mov	r4, r8
 8015efc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015f00:	3501      	adds	r5, #1
 8015f02:	615e      	str	r6, [r3, #20]
 8015f04:	6125      	str	r5, [r4, #16]
 8015f06:	4620      	mov	r0, r4
 8015f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f0c:	08018c07 	.word	0x08018c07
 8015f10:	08018c78 	.word	0x08018c78

08015f14 <__hi0bits>:
 8015f14:	0c03      	lsrs	r3, r0, #16
 8015f16:	041b      	lsls	r3, r3, #16
 8015f18:	b9d3      	cbnz	r3, 8015f50 <__hi0bits+0x3c>
 8015f1a:	0400      	lsls	r0, r0, #16
 8015f1c:	2310      	movs	r3, #16
 8015f1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015f22:	bf04      	itt	eq
 8015f24:	0200      	lsleq	r0, r0, #8
 8015f26:	3308      	addeq	r3, #8
 8015f28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015f2c:	bf04      	itt	eq
 8015f2e:	0100      	lsleq	r0, r0, #4
 8015f30:	3304      	addeq	r3, #4
 8015f32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015f36:	bf04      	itt	eq
 8015f38:	0080      	lsleq	r0, r0, #2
 8015f3a:	3302      	addeq	r3, #2
 8015f3c:	2800      	cmp	r0, #0
 8015f3e:	db05      	blt.n	8015f4c <__hi0bits+0x38>
 8015f40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015f44:	f103 0301 	add.w	r3, r3, #1
 8015f48:	bf08      	it	eq
 8015f4a:	2320      	moveq	r3, #32
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	4770      	bx	lr
 8015f50:	2300      	movs	r3, #0
 8015f52:	e7e4      	b.n	8015f1e <__hi0bits+0xa>

08015f54 <__lo0bits>:
 8015f54:	6803      	ldr	r3, [r0, #0]
 8015f56:	f013 0207 	ands.w	r2, r3, #7
 8015f5a:	4601      	mov	r1, r0
 8015f5c:	d00b      	beq.n	8015f76 <__lo0bits+0x22>
 8015f5e:	07da      	lsls	r2, r3, #31
 8015f60:	d423      	bmi.n	8015faa <__lo0bits+0x56>
 8015f62:	0798      	lsls	r0, r3, #30
 8015f64:	bf49      	itett	mi
 8015f66:	085b      	lsrmi	r3, r3, #1
 8015f68:	089b      	lsrpl	r3, r3, #2
 8015f6a:	2001      	movmi	r0, #1
 8015f6c:	600b      	strmi	r3, [r1, #0]
 8015f6e:	bf5c      	itt	pl
 8015f70:	600b      	strpl	r3, [r1, #0]
 8015f72:	2002      	movpl	r0, #2
 8015f74:	4770      	bx	lr
 8015f76:	b298      	uxth	r0, r3
 8015f78:	b9a8      	cbnz	r0, 8015fa6 <__lo0bits+0x52>
 8015f7a:	0c1b      	lsrs	r3, r3, #16
 8015f7c:	2010      	movs	r0, #16
 8015f7e:	b2da      	uxtb	r2, r3
 8015f80:	b90a      	cbnz	r2, 8015f86 <__lo0bits+0x32>
 8015f82:	3008      	adds	r0, #8
 8015f84:	0a1b      	lsrs	r3, r3, #8
 8015f86:	071a      	lsls	r2, r3, #28
 8015f88:	bf04      	itt	eq
 8015f8a:	091b      	lsreq	r3, r3, #4
 8015f8c:	3004      	addeq	r0, #4
 8015f8e:	079a      	lsls	r2, r3, #30
 8015f90:	bf04      	itt	eq
 8015f92:	089b      	lsreq	r3, r3, #2
 8015f94:	3002      	addeq	r0, #2
 8015f96:	07da      	lsls	r2, r3, #31
 8015f98:	d403      	bmi.n	8015fa2 <__lo0bits+0x4e>
 8015f9a:	085b      	lsrs	r3, r3, #1
 8015f9c:	f100 0001 	add.w	r0, r0, #1
 8015fa0:	d005      	beq.n	8015fae <__lo0bits+0x5a>
 8015fa2:	600b      	str	r3, [r1, #0]
 8015fa4:	4770      	bx	lr
 8015fa6:	4610      	mov	r0, r2
 8015fa8:	e7e9      	b.n	8015f7e <__lo0bits+0x2a>
 8015faa:	2000      	movs	r0, #0
 8015fac:	4770      	bx	lr
 8015fae:	2020      	movs	r0, #32
 8015fb0:	4770      	bx	lr
	...

08015fb4 <__i2b>:
 8015fb4:	b510      	push	{r4, lr}
 8015fb6:	460c      	mov	r4, r1
 8015fb8:	2101      	movs	r1, #1
 8015fba:	f7ff ff03 	bl	8015dc4 <_Balloc>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	b928      	cbnz	r0, 8015fce <__i2b+0x1a>
 8015fc2:	4b05      	ldr	r3, [pc, #20]	; (8015fd8 <__i2b+0x24>)
 8015fc4:	4805      	ldr	r0, [pc, #20]	; (8015fdc <__i2b+0x28>)
 8015fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015fca:	f000 fee5 	bl	8016d98 <__assert_func>
 8015fce:	2301      	movs	r3, #1
 8015fd0:	6144      	str	r4, [r0, #20]
 8015fd2:	6103      	str	r3, [r0, #16]
 8015fd4:	bd10      	pop	{r4, pc}
 8015fd6:	bf00      	nop
 8015fd8:	08018c07 	.word	0x08018c07
 8015fdc:	08018c78 	.word	0x08018c78

08015fe0 <__multiply>:
 8015fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe4:	4691      	mov	r9, r2
 8015fe6:	690a      	ldr	r2, [r1, #16]
 8015fe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	bfb8      	it	lt
 8015ff0:	460b      	movlt	r3, r1
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	bfbc      	itt	lt
 8015ff6:	464c      	movlt	r4, r9
 8015ff8:	4699      	movlt	r9, r3
 8015ffa:	6927      	ldr	r7, [r4, #16]
 8015ffc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016000:	68a3      	ldr	r3, [r4, #8]
 8016002:	6861      	ldr	r1, [r4, #4]
 8016004:	eb07 060a 	add.w	r6, r7, sl
 8016008:	42b3      	cmp	r3, r6
 801600a:	b085      	sub	sp, #20
 801600c:	bfb8      	it	lt
 801600e:	3101      	addlt	r1, #1
 8016010:	f7ff fed8 	bl	8015dc4 <_Balloc>
 8016014:	b930      	cbnz	r0, 8016024 <__multiply+0x44>
 8016016:	4602      	mov	r2, r0
 8016018:	4b44      	ldr	r3, [pc, #272]	; (801612c <__multiply+0x14c>)
 801601a:	4845      	ldr	r0, [pc, #276]	; (8016130 <__multiply+0x150>)
 801601c:	f240 115d 	movw	r1, #349	; 0x15d
 8016020:	f000 feba 	bl	8016d98 <__assert_func>
 8016024:	f100 0514 	add.w	r5, r0, #20
 8016028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801602c:	462b      	mov	r3, r5
 801602e:	2200      	movs	r2, #0
 8016030:	4543      	cmp	r3, r8
 8016032:	d321      	bcc.n	8016078 <__multiply+0x98>
 8016034:	f104 0314 	add.w	r3, r4, #20
 8016038:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801603c:	f109 0314 	add.w	r3, r9, #20
 8016040:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016044:	9202      	str	r2, [sp, #8]
 8016046:	1b3a      	subs	r2, r7, r4
 8016048:	3a15      	subs	r2, #21
 801604a:	f022 0203 	bic.w	r2, r2, #3
 801604e:	3204      	adds	r2, #4
 8016050:	f104 0115 	add.w	r1, r4, #21
 8016054:	428f      	cmp	r7, r1
 8016056:	bf38      	it	cc
 8016058:	2204      	movcc	r2, #4
 801605a:	9201      	str	r2, [sp, #4]
 801605c:	9a02      	ldr	r2, [sp, #8]
 801605e:	9303      	str	r3, [sp, #12]
 8016060:	429a      	cmp	r2, r3
 8016062:	d80c      	bhi.n	801607e <__multiply+0x9e>
 8016064:	2e00      	cmp	r6, #0
 8016066:	dd03      	ble.n	8016070 <__multiply+0x90>
 8016068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801606c:	2b00      	cmp	r3, #0
 801606e:	d05a      	beq.n	8016126 <__multiply+0x146>
 8016070:	6106      	str	r6, [r0, #16]
 8016072:	b005      	add	sp, #20
 8016074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016078:	f843 2b04 	str.w	r2, [r3], #4
 801607c:	e7d8      	b.n	8016030 <__multiply+0x50>
 801607e:	f8b3 a000 	ldrh.w	sl, [r3]
 8016082:	f1ba 0f00 	cmp.w	sl, #0
 8016086:	d024      	beq.n	80160d2 <__multiply+0xf2>
 8016088:	f104 0e14 	add.w	lr, r4, #20
 801608c:	46a9      	mov	r9, r5
 801608e:	f04f 0c00 	mov.w	ip, #0
 8016092:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016096:	f8d9 1000 	ldr.w	r1, [r9]
 801609a:	fa1f fb82 	uxth.w	fp, r2
 801609e:	b289      	uxth	r1, r1
 80160a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80160a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80160a8:	f8d9 2000 	ldr.w	r2, [r9]
 80160ac:	4461      	add	r1, ip
 80160ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80160b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80160b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80160ba:	b289      	uxth	r1, r1
 80160bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80160c0:	4577      	cmp	r7, lr
 80160c2:	f849 1b04 	str.w	r1, [r9], #4
 80160c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80160ca:	d8e2      	bhi.n	8016092 <__multiply+0xb2>
 80160cc:	9a01      	ldr	r2, [sp, #4]
 80160ce:	f845 c002 	str.w	ip, [r5, r2]
 80160d2:	9a03      	ldr	r2, [sp, #12]
 80160d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80160d8:	3304      	adds	r3, #4
 80160da:	f1b9 0f00 	cmp.w	r9, #0
 80160de:	d020      	beq.n	8016122 <__multiply+0x142>
 80160e0:	6829      	ldr	r1, [r5, #0]
 80160e2:	f104 0c14 	add.w	ip, r4, #20
 80160e6:	46ae      	mov	lr, r5
 80160e8:	f04f 0a00 	mov.w	sl, #0
 80160ec:	f8bc b000 	ldrh.w	fp, [ip]
 80160f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80160f4:	fb09 220b 	mla	r2, r9, fp, r2
 80160f8:	4492      	add	sl, r2
 80160fa:	b289      	uxth	r1, r1
 80160fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016100:	f84e 1b04 	str.w	r1, [lr], #4
 8016104:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016108:	f8be 1000 	ldrh.w	r1, [lr]
 801610c:	0c12      	lsrs	r2, r2, #16
 801610e:	fb09 1102 	mla	r1, r9, r2, r1
 8016112:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016116:	4567      	cmp	r7, ip
 8016118:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801611c:	d8e6      	bhi.n	80160ec <__multiply+0x10c>
 801611e:	9a01      	ldr	r2, [sp, #4]
 8016120:	50a9      	str	r1, [r5, r2]
 8016122:	3504      	adds	r5, #4
 8016124:	e79a      	b.n	801605c <__multiply+0x7c>
 8016126:	3e01      	subs	r6, #1
 8016128:	e79c      	b.n	8016064 <__multiply+0x84>
 801612a:	bf00      	nop
 801612c:	08018c07 	.word	0x08018c07
 8016130:	08018c78 	.word	0x08018c78

08016134 <__pow5mult>:
 8016134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016138:	4615      	mov	r5, r2
 801613a:	f012 0203 	ands.w	r2, r2, #3
 801613e:	4606      	mov	r6, r0
 8016140:	460f      	mov	r7, r1
 8016142:	d007      	beq.n	8016154 <__pow5mult+0x20>
 8016144:	4c25      	ldr	r4, [pc, #148]	; (80161dc <__pow5mult+0xa8>)
 8016146:	3a01      	subs	r2, #1
 8016148:	2300      	movs	r3, #0
 801614a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801614e:	f7ff fe9b 	bl	8015e88 <__multadd>
 8016152:	4607      	mov	r7, r0
 8016154:	10ad      	asrs	r5, r5, #2
 8016156:	d03d      	beq.n	80161d4 <__pow5mult+0xa0>
 8016158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801615a:	b97c      	cbnz	r4, 801617c <__pow5mult+0x48>
 801615c:	2010      	movs	r0, #16
 801615e:	f7ff fe29 	bl	8015db4 <malloc>
 8016162:	4602      	mov	r2, r0
 8016164:	6270      	str	r0, [r6, #36]	; 0x24
 8016166:	b928      	cbnz	r0, 8016174 <__pow5mult+0x40>
 8016168:	4b1d      	ldr	r3, [pc, #116]	; (80161e0 <__pow5mult+0xac>)
 801616a:	481e      	ldr	r0, [pc, #120]	; (80161e4 <__pow5mult+0xb0>)
 801616c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016170:	f000 fe12 	bl	8016d98 <__assert_func>
 8016174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016178:	6004      	str	r4, [r0, #0]
 801617a:	60c4      	str	r4, [r0, #12]
 801617c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016184:	b94c      	cbnz	r4, 801619a <__pow5mult+0x66>
 8016186:	f240 2171 	movw	r1, #625	; 0x271
 801618a:	4630      	mov	r0, r6
 801618c:	f7ff ff12 	bl	8015fb4 <__i2b>
 8016190:	2300      	movs	r3, #0
 8016192:	f8c8 0008 	str.w	r0, [r8, #8]
 8016196:	4604      	mov	r4, r0
 8016198:	6003      	str	r3, [r0, #0]
 801619a:	f04f 0900 	mov.w	r9, #0
 801619e:	07eb      	lsls	r3, r5, #31
 80161a0:	d50a      	bpl.n	80161b8 <__pow5mult+0x84>
 80161a2:	4639      	mov	r1, r7
 80161a4:	4622      	mov	r2, r4
 80161a6:	4630      	mov	r0, r6
 80161a8:	f7ff ff1a 	bl	8015fe0 <__multiply>
 80161ac:	4639      	mov	r1, r7
 80161ae:	4680      	mov	r8, r0
 80161b0:	4630      	mov	r0, r6
 80161b2:	f7ff fe47 	bl	8015e44 <_Bfree>
 80161b6:	4647      	mov	r7, r8
 80161b8:	106d      	asrs	r5, r5, #1
 80161ba:	d00b      	beq.n	80161d4 <__pow5mult+0xa0>
 80161bc:	6820      	ldr	r0, [r4, #0]
 80161be:	b938      	cbnz	r0, 80161d0 <__pow5mult+0x9c>
 80161c0:	4622      	mov	r2, r4
 80161c2:	4621      	mov	r1, r4
 80161c4:	4630      	mov	r0, r6
 80161c6:	f7ff ff0b 	bl	8015fe0 <__multiply>
 80161ca:	6020      	str	r0, [r4, #0]
 80161cc:	f8c0 9000 	str.w	r9, [r0]
 80161d0:	4604      	mov	r4, r0
 80161d2:	e7e4      	b.n	801619e <__pow5mult+0x6a>
 80161d4:	4638      	mov	r0, r7
 80161d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161da:	bf00      	nop
 80161dc:	08018dc8 	.word	0x08018dc8
 80161e0:	08018b95 	.word	0x08018b95
 80161e4:	08018c78 	.word	0x08018c78

080161e8 <__lshift>:
 80161e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161ec:	460c      	mov	r4, r1
 80161ee:	6849      	ldr	r1, [r1, #4]
 80161f0:	6923      	ldr	r3, [r4, #16]
 80161f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80161f6:	68a3      	ldr	r3, [r4, #8]
 80161f8:	4607      	mov	r7, r0
 80161fa:	4691      	mov	r9, r2
 80161fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016200:	f108 0601 	add.w	r6, r8, #1
 8016204:	42b3      	cmp	r3, r6
 8016206:	db0b      	blt.n	8016220 <__lshift+0x38>
 8016208:	4638      	mov	r0, r7
 801620a:	f7ff fddb 	bl	8015dc4 <_Balloc>
 801620e:	4605      	mov	r5, r0
 8016210:	b948      	cbnz	r0, 8016226 <__lshift+0x3e>
 8016212:	4602      	mov	r2, r0
 8016214:	4b2a      	ldr	r3, [pc, #168]	; (80162c0 <__lshift+0xd8>)
 8016216:	482b      	ldr	r0, [pc, #172]	; (80162c4 <__lshift+0xdc>)
 8016218:	f240 11d9 	movw	r1, #473	; 0x1d9
 801621c:	f000 fdbc 	bl	8016d98 <__assert_func>
 8016220:	3101      	adds	r1, #1
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	e7ee      	b.n	8016204 <__lshift+0x1c>
 8016226:	2300      	movs	r3, #0
 8016228:	f100 0114 	add.w	r1, r0, #20
 801622c:	f100 0210 	add.w	r2, r0, #16
 8016230:	4618      	mov	r0, r3
 8016232:	4553      	cmp	r3, sl
 8016234:	db37      	blt.n	80162a6 <__lshift+0xbe>
 8016236:	6920      	ldr	r0, [r4, #16]
 8016238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801623c:	f104 0314 	add.w	r3, r4, #20
 8016240:	f019 091f 	ands.w	r9, r9, #31
 8016244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801624c:	d02f      	beq.n	80162ae <__lshift+0xc6>
 801624e:	f1c9 0e20 	rsb	lr, r9, #32
 8016252:	468a      	mov	sl, r1
 8016254:	f04f 0c00 	mov.w	ip, #0
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	fa02 f209 	lsl.w	r2, r2, r9
 801625e:	ea42 020c 	orr.w	r2, r2, ip
 8016262:	f84a 2b04 	str.w	r2, [sl], #4
 8016266:	f853 2b04 	ldr.w	r2, [r3], #4
 801626a:	4298      	cmp	r0, r3
 801626c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016270:	d8f2      	bhi.n	8016258 <__lshift+0x70>
 8016272:	1b03      	subs	r3, r0, r4
 8016274:	3b15      	subs	r3, #21
 8016276:	f023 0303 	bic.w	r3, r3, #3
 801627a:	3304      	adds	r3, #4
 801627c:	f104 0215 	add.w	r2, r4, #21
 8016280:	4290      	cmp	r0, r2
 8016282:	bf38      	it	cc
 8016284:	2304      	movcc	r3, #4
 8016286:	f841 c003 	str.w	ip, [r1, r3]
 801628a:	f1bc 0f00 	cmp.w	ip, #0
 801628e:	d001      	beq.n	8016294 <__lshift+0xac>
 8016290:	f108 0602 	add.w	r6, r8, #2
 8016294:	3e01      	subs	r6, #1
 8016296:	4638      	mov	r0, r7
 8016298:	612e      	str	r6, [r5, #16]
 801629a:	4621      	mov	r1, r4
 801629c:	f7ff fdd2 	bl	8015e44 <_Bfree>
 80162a0:	4628      	mov	r0, r5
 80162a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80162aa:	3301      	adds	r3, #1
 80162ac:	e7c1      	b.n	8016232 <__lshift+0x4a>
 80162ae:	3904      	subs	r1, #4
 80162b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80162b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80162b8:	4298      	cmp	r0, r3
 80162ba:	d8f9      	bhi.n	80162b0 <__lshift+0xc8>
 80162bc:	e7ea      	b.n	8016294 <__lshift+0xac>
 80162be:	bf00      	nop
 80162c0:	08018c07 	.word	0x08018c07
 80162c4:	08018c78 	.word	0x08018c78

080162c8 <__mcmp>:
 80162c8:	b530      	push	{r4, r5, lr}
 80162ca:	6902      	ldr	r2, [r0, #16]
 80162cc:	690c      	ldr	r4, [r1, #16]
 80162ce:	1b12      	subs	r2, r2, r4
 80162d0:	d10e      	bne.n	80162f0 <__mcmp+0x28>
 80162d2:	f100 0314 	add.w	r3, r0, #20
 80162d6:	3114      	adds	r1, #20
 80162d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80162dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80162e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80162e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80162e8:	42a5      	cmp	r5, r4
 80162ea:	d003      	beq.n	80162f4 <__mcmp+0x2c>
 80162ec:	d305      	bcc.n	80162fa <__mcmp+0x32>
 80162ee:	2201      	movs	r2, #1
 80162f0:	4610      	mov	r0, r2
 80162f2:	bd30      	pop	{r4, r5, pc}
 80162f4:	4283      	cmp	r3, r0
 80162f6:	d3f3      	bcc.n	80162e0 <__mcmp+0x18>
 80162f8:	e7fa      	b.n	80162f0 <__mcmp+0x28>
 80162fa:	f04f 32ff 	mov.w	r2, #4294967295
 80162fe:	e7f7      	b.n	80162f0 <__mcmp+0x28>

08016300 <__mdiff>:
 8016300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016304:	460c      	mov	r4, r1
 8016306:	4606      	mov	r6, r0
 8016308:	4611      	mov	r1, r2
 801630a:	4620      	mov	r0, r4
 801630c:	4690      	mov	r8, r2
 801630e:	f7ff ffdb 	bl	80162c8 <__mcmp>
 8016312:	1e05      	subs	r5, r0, #0
 8016314:	d110      	bne.n	8016338 <__mdiff+0x38>
 8016316:	4629      	mov	r1, r5
 8016318:	4630      	mov	r0, r6
 801631a:	f7ff fd53 	bl	8015dc4 <_Balloc>
 801631e:	b930      	cbnz	r0, 801632e <__mdiff+0x2e>
 8016320:	4b3a      	ldr	r3, [pc, #232]	; (801640c <__mdiff+0x10c>)
 8016322:	4602      	mov	r2, r0
 8016324:	f240 2132 	movw	r1, #562	; 0x232
 8016328:	4839      	ldr	r0, [pc, #228]	; (8016410 <__mdiff+0x110>)
 801632a:	f000 fd35 	bl	8016d98 <__assert_func>
 801632e:	2301      	movs	r3, #1
 8016330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016338:	bfa4      	itt	ge
 801633a:	4643      	movge	r3, r8
 801633c:	46a0      	movge	r8, r4
 801633e:	4630      	mov	r0, r6
 8016340:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016344:	bfa6      	itte	ge
 8016346:	461c      	movge	r4, r3
 8016348:	2500      	movge	r5, #0
 801634a:	2501      	movlt	r5, #1
 801634c:	f7ff fd3a 	bl	8015dc4 <_Balloc>
 8016350:	b920      	cbnz	r0, 801635c <__mdiff+0x5c>
 8016352:	4b2e      	ldr	r3, [pc, #184]	; (801640c <__mdiff+0x10c>)
 8016354:	4602      	mov	r2, r0
 8016356:	f44f 7110 	mov.w	r1, #576	; 0x240
 801635a:	e7e5      	b.n	8016328 <__mdiff+0x28>
 801635c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016360:	6926      	ldr	r6, [r4, #16]
 8016362:	60c5      	str	r5, [r0, #12]
 8016364:	f104 0914 	add.w	r9, r4, #20
 8016368:	f108 0514 	add.w	r5, r8, #20
 801636c:	f100 0e14 	add.w	lr, r0, #20
 8016370:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016374:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016378:	f108 0210 	add.w	r2, r8, #16
 801637c:	46f2      	mov	sl, lr
 801637e:	2100      	movs	r1, #0
 8016380:	f859 3b04 	ldr.w	r3, [r9], #4
 8016384:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016388:	fa1f f883 	uxth.w	r8, r3
 801638c:	fa11 f18b 	uxtah	r1, r1, fp
 8016390:	0c1b      	lsrs	r3, r3, #16
 8016392:	eba1 0808 	sub.w	r8, r1, r8
 8016396:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801639a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801639e:	fa1f f888 	uxth.w	r8, r8
 80163a2:	1419      	asrs	r1, r3, #16
 80163a4:	454e      	cmp	r6, r9
 80163a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80163aa:	f84a 3b04 	str.w	r3, [sl], #4
 80163ae:	d8e7      	bhi.n	8016380 <__mdiff+0x80>
 80163b0:	1b33      	subs	r3, r6, r4
 80163b2:	3b15      	subs	r3, #21
 80163b4:	f023 0303 	bic.w	r3, r3, #3
 80163b8:	3304      	adds	r3, #4
 80163ba:	3415      	adds	r4, #21
 80163bc:	42a6      	cmp	r6, r4
 80163be:	bf38      	it	cc
 80163c0:	2304      	movcc	r3, #4
 80163c2:	441d      	add	r5, r3
 80163c4:	4473      	add	r3, lr
 80163c6:	469e      	mov	lr, r3
 80163c8:	462e      	mov	r6, r5
 80163ca:	4566      	cmp	r6, ip
 80163cc:	d30e      	bcc.n	80163ec <__mdiff+0xec>
 80163ce:	f10c 0203 	add.w	r2, ip, #3
 80163d2:	1b52      	subs	r2, r2, r5
 80163d4:	f022 0203 	bic.w	r2, r2, #3
 80163d8:	3d03      	subs	r5, #3
 80163da:	45ac      	cmp	ip, r5
 80163dc:	bf38      	it	cc
 80163de:	2200      	movcc	r2, #0
 80163e0:	441a      	add	r2, r3
 80163e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80163e6:	b17b      	cbz	r3, 8016408 <__mdiff+0x108>
 80163e8:	6107      	str	r7, [r0, #16]
 80163ea:	e7a3      	b.n	8016334 <__mdiff+0x34>
 80163ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80163f0:	fa11 f288 	uxtah	r2, r1, r8
 80163f4:	1414      	asrs	r4, r2, #16
 80163f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80163fa:	b292      	uxth	r2, r2
 80163fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016400:	f84e 2b04 	str.w	r2, [lr], #4
 8016404:	1421      	asrs	r1, r4, #16
 8016406:	e7e0      	b.n	80163ca <__mdiff+0xca>
 8016408:	3f01      	subs	r7, #1
 801640a:	e7ea      	b.n	80163e2 <__mdiff+0xe2>
 801640c:	08018c07 	.word	0x08018c07
 8016410:	08018c78 	.word	0x08018c78

08016414 <__d2b>:
 8016414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016418:	4689      	mov	r9, r1
 801641a:	2101      	movs	r1, #1
 801641c:	ec57 6b10 	vmov	r6, r7, d0
 8016420:	4690      	mov	r8, r2
 8016422:	f7ff fccf 	bl	8015dc4 <_Balloc>
 8016426:	4604      	mov	r4, r0
 8016428:	b930      	cbnz	r0, 8016438 <__d2b+0x24>
 801642a:	4602      	mov	r2, r0
 801642c:	4b25      	ldr	r3, [pc, #148]	; (80164c4 <__d2b+0xb0>)
 801642e:	4826      	ldr	r0, [pc, #152]	; (80164c8 <__d2b+0xb4>)
 8016430:	f240 310a 	movw	r1, #778	; 0x30a
 8016434:	f000 fcb0 	bl	8016d98 <__assert_func>
 8016438:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801643c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016440:	bb35      	cbnz	r5, 8016490 <__d2b+0x7c>
 8016442:	2e00      	cmp	r6, #0
 8016444:	9301      	str	r3, [sp, #4]
 8016446:	d028      	beq.n	801649a <__d2b+0x86>
 8016448:	4668      	mov	r0, sp
 801644a:	9600      	str	r6, [sp, #0]
 801644c:	f7ff fd82 	bl	8015f54 <__lo0bits>
 8016450:	9900      	ldr	r1, [sp, #0]
 8016452:	b300      	cbz	r0, 8016496 <__d2b+0x82>
 8016454:	9a01      	ldr	r2, [sp, #4]
 8016456:	f1c0 0320 	rsb	r3, r0, #32
 801645a:	fa02 f303 	lsl.w	r3, r2, r3
 801645e:	430b      	orrs	r3, r1
 8016460:	40c2      	lsrs	r2, r0
 8016462:	6163      	str	r3, [r4, #20]
 8016464:	9201      	str	r2, [sp, #4]
 8016466:	9b01      	ldr	r3, [sp, #4]
 8016468:	61a3      	str	r3, [r4, #24]
 801646a:	2b00      	cmp	r3, #0
 801646c:	bf14      	ite	ne
 801646e:	2202      	movne	r2, #2
 8016470:	2201      	moveq	r2, #1
 8016472:	6122      	str	r2, [r4, #16]
 8016474:	b1d5      	cbz	r5, 80164ac <__d2b+0x98>
 8016476:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801647a:	4405      	add	r5, r0
 801647c:	f8c9 5000 	str.w	r5, [r9]
 8016480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016484:	f8c8 0000 	str.w	r0, [r8]
 8016488:	4620      	mov	r0, r4
 801648a:	b003      	add	sp, #12
 801648c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016494:	e7d5      	b.n	8016442 <__d2b+0x2e>
 8016496:	6161      	str	r1, [r4, #20]
 8016498:	e7e5      	b.n	8016466 <__d2b+0x52>
 801649a:	a801      	add	r0, sp, #4
 801649c:	f7ff fd5a 	bl	8015f54 <__lo0bits>
 80164a0:	9b01      	ldr	r3, [sp, #4]
 80164a2:	6163      	str	r3, [r4, #20]
 80164a4:	2201      	movs	r2, #1
 80164a6:	6122      	str	r2, [r4, #16]
 80164a8:	3020      	adds	r0, #32
 80164aa:	e7e3      	b.n	8016474 <__d2b+0x60>
 80164ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80164b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80164b4:	f8c9 0000 	str.w	r0, [r9]
 80164b8:	6918      	ldr	r0, [r3, #16]
 80164ba:	f7ff fd2b 	bl	8015f14 <__hi0bits>
 80164be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80164c2:	e7df      	b.n	8016484 <__d2b+0x70>
 80164c4:	08018c07 	.word	0x08018c07
 80164c8:	08018c78 	.word	0x08018c78

080164cc <_calloc_r>:
 80164cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164ce:	fba1 2402 	umull	r2, r4, r1, r2
 80164d2:	b94c      	cbnz	r4, 80164e8 <_calloc_r+0x1c>
 80164d4:	4611      	mov	r1, r2
 80164d6:	9201      	str	r2, [sp, #4]
 80164d8:	f000 f87a 	bl	80165d0 <_malloc_r>
 80164dc:	9a01      	ldr	r2, [sp, #4]
 80164de:	4605      	mov	r5, r0
 80164e0:	b930      	cbnz	r0, 80164f0 <_calloc_r+0x24>
 80164e2:	4628      	mov	r0, r5
 80164e4:	b003      	add	sp, #12
 80164e6:	bd30      	pop	{r4, r5, pc}
 80164e8:	220c      	movs	r2, #12
 80164ea:	6002      	str	r2, [r0, #0]
 80164ec:	2500      	movs	r5, #0
 80164ee:	e7f8      	b.n	80164e2 <_calloc_r+0x16>
 80164f0:	4621      	mov	r1, r4
 80164f2:	f7fd fdb5 	bl	8014060 <memset>
 80164f6:	e7f4      	b.n	80164e2 <_calloc_r+0x16>

080164f8 <_free_r>:
 80164f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164fa:	2900      	cmp	r1, #0
 80164fc:	d044      	beq.n	8016588 <_free_r+0x90>
 80164fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016502:	9001      	str	r0, [sp, #4]
 8016504:	2b00      	cmp	r3, #0
 8016506:	f1a1 0404 	sub.w	r4, r1, #4
 801650a:	bfb8      	it	lt
 801650c:	18e4      	addlt	r4, r4, r3
 801650e:	f000 fce3 	bl	8016ed8 <__malloc_lock>
 8016512:	4a1e      	ldr	r2, [pc, #120]	; (801658c <_free_r+0x94>)
 8016514:	9801      	ldr	r0, [sp, #4]
 8016516:	6813      	ldr	r3, [r2, #0]
 8016518:	b933      	cbnz	r3, 8016528 <_free_r+0x30>
 801651a:	6063      	str	r3, [r4, #4]
 801651c:	6014      	str	r4, [r2, #0]
 801651e:	b003      	add	sp, #12
 8016520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016524:	f000 bcde 	b.w	8016ee4 <__malloc_unlock>
 8016528:	42a3      	cmp	r3, r4
 801652a:	d908      	bls.n	801653e <_free_r+0x46>
 801652c:	6825      	ldr	r5, [r4, #0]
 801652e:	1961      	adds	r1, r4, r5
 8016530:	428b      	cmp	r3, r1
 8016532:	bf01      	itttt	eq
 8016534:	6819      	ldreq	r1, [r3, #0]
 8016536:	685b      	ldreq	r3, [r3, #4]
 8016538:	1949      	addeq	r1, r1, r5
 801653a:	6021      	streq	r1, [r4, #0]
 801653c:	e7ed      	b.n	801651a <_free_r+0x22>
 801653e:	461a      	mov	r2, r3
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	b10b      	cbz	r3, 8016548 <_free_r+0x50>
 8016544:	42a3      	cmp	r3, r4
 8016546:	d9fa      	bls.n	801653e <_free_r+0x46>
 8016548:	6811      	ldr	r1, [r2, #0]
 801654a:	1855      	adds	r5, r2, r1
 801654c:	42a5      	cmp	r5, r4
 801654e:	d10b      	bne.n	8016568 <_free_r+0x70>
 8016550:	6824      	ldr	r4, [r4, #0]
 8016552:	4421      	add	r1, r4
 8016554:	1854      	adds	r4, r2, r1
 8016556:	42a3      	cmp	r3, r4
 8016558:	6011      	str	r1, [r2, #0]
 801655a:	d1e0      	bne.n	801651e <_free_r+0x26>
 801655c:	681c      	ldr	r4, [r3, #0]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	6053      	str	r3, [r2, #4]
 8016562:	4421      	add	r1, r4
 8016564:	6011      	str	r1, [r2, #0]
 8016566:	e7da      	b.n	801651e <_free_r+0x26>
 8016568:	d902      	bls.n	8016570 <_free_r+0x78>
 801656a:	230c      	movs	r3, #12
 801656c:	6003      	str	r3, [r0, #0]
 801656e:	e7d6      	b.n	801651e <_free_r+0x26>
 8016570:	6825      	ldr	r5, [r4, #0]
 8016572:	1961      	adds	r1, r4, r5
 8016574:	428b      	cmp	r3, r1
 8016576:	bf04      	itt	eq
 8016578:	6819      	ldreq	r1, [r3, #0]
 801657a:	685b      	ldreq	r3, [r3, #4]
 801657c:	6063      	str	r3, [r4, #4]
 801657e:	bf04      	itt	eq
 8016580:	1949      	addeq	r1, r1, r5
 8016582:	6021      	streq	r1, [r4, #0]
 8016584:	6054      	str	r4, [r2, #4]
 8016586:	e7ca      	b.n	801651e <_free_r+0x26>
 8016588:	b003      	add	sp, #12
 801658a:	bd30      	pop	{r4, r5, pc}
 801658c:	20001534 	.word	0x20001534

08016590 <sbrk_aligned>:
 8016590:	b570      	push	{r4, r5, r6, lr}
 8016592:	4e0e      	ldr	r6, [pc, #56]	; (80165cc <sbrk_aligned+0x3c>)
 8016594:	460c      	mov	r4, r1
 8016596:	6831      	ldr	r1, [r6, #0]
 8016598:	4605      	mov	r5, r0
 801659a:	b911      	cbnz	r1, 80165a2 <sbrk_aligned+0x12>
 801659c:	f000 fb8a 	bl	8016cb4 <_sbrk_r>
 80165a0:	6030      	str	r0, [r6, #0]
 80165a2:	4621      	mov	r1, r4
 80165a4:	4628      	mov	r0, r5
 80165a6:	f000 fb85 	bl	8016cb4 <_sbrk_r>
 80165aa:	1c43      	adds	r3, r0, #1
 80165ac:	d00a      	beq.n	80165c4 <sbrk_aligned+0x34>
 80165ae:	1cc4      	adds	r4, r0, #3
 80165b0:	f024 0403 	bic.w	r4, r4, #3
 80165b4:	42a0      	cmp	r0, r4
 80165b6:	d007      	beq.n	80165c8 <sbrk_aligned+0x38>
 80165b8:	1a21      	subs	r1, r4, r0
 80165ba:	4628      	mov	r0, r5
 80165bc:	f000 fb7a 	bl	8016cb4 <_sbrk_r>
 80165c0:	3001      	adds	r0, #1
 80165c2:	d101      	bne.n	80165c8 <sbrk_aligned+0x38>
 80165c4:	f04f 34ff 	mov.w	r4, #4294967295
 80165c8:	4620      	mov	r0, r4
 80165ca:	bd70      	pop	{r4, r5, r6, pc}
 80165cc:	20001538 	.word	0x20001538

080165d0 <_malloc_r>:
 80165d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d4:	1ccd      	adds	r5, r1, #3
 80165d6:	f025 0503 	bic.w	r5, r5, #3
 80165da:	3508      	adds	r5, #8
 80165dc:	2d0c      	cmp	r5, #12
 80165de:	bf38      	it	cc
 80165e0:	250c      	movcc	r5, #12
 80165e2:	2d00      	cmp	r5, #0
 80165e4:	4607      	mov	r7, r0
 80165e6:	db01      	blt.n	80165ec <_malloc_r+0x1c>
 80165e8:	42a9      	cmp	r1, r5
 80165ea:	d905      	bls.n	80165f8 <_malloc_r+0x28>
 80165ec:	230c      	movs	r3, #12
 80165ee:	603b      	str	r3, [r7, #0]
 80165f0:	2600      	movs	r6, #0
 80165f2:	4630      	mov	r0, r6
 80165f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165f8:	4e2e      	ldr	r6, [pc, #184]	; (80166b4 <_malloc_r+0xe4>)
 80165fa:	f000 fc6d 	bl	8016ed8 <__malloc_lock>
 80165fe:	6833      	ldr	r3, [r6, #0]
 8016600:	461c      	mov	r4, r3
 8016602:	bb34      	cbnz	r4, 8016652 <_malloc_r+0x82>
 8016604:	4629      	mov	r1, r5
 8016606:	4638      	mov	r0, r7
 8016608:	f7ff ffc2 	bl	8016590 <sbrk_aligned>
 801660c:	1c43      	adds	r3, r0, #1
 801660e:	4604      	mov	r4, r0
 8016610:	d14d      	bne.n	80166ae <_malloc_r+0xde>
 8016612:	6834      	ldr	r4, [r6, #0]
 8016614:	4626      	mov	r6, r4
 8016616:	2e00      	cmp	r6, #0
 8016618:	d140      	bne.n	801669c <_malloc_r+0xcc>
 801661a:	6823      	ldr	r3, [r4, #0]
 801661c:	4631      	mov	r1, r6
 801661e:	4638      	mov	r0, r7
 8016620:	eb04 0803 	add.w	r8, r4, r3
 8016624:	f000 fb46 	bl	8016cb4 <_sbrk_r>
 8016628:	4580      	cmp	r8, r0
 801662a:	d13a      	bne.n	80166a2 <_malloc_r+0xd2>
 801662c:	6821      	ldr	r1, [r4, #0]
 801662e:	3503      	adds	r5, #3
 8016630:	1a6d      	subs	r5, r5, r1
 8016632:	f025 0503 	bic.w	r5, r5, #3
 8016636:	3508      	adds	r5, #8
 8016638:	2d0c      	cmp	r5, #12
 801663a:	bf38      	it	cc
 801663c:	250c      	movcc	r5, #12
 801663e:	4629      	mov	r1, r5
 8016640:	4638      	mov	r0, r7
 8016642:	f7ff ffa5 	bl	8016590 <sbrk_aligned>
 8016646:	3001      	adds	r0, #1
 8016648:	d02b      	beq.n	80166a2 <_malloc_r+0xd2>
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	442b      	add	r3, r5
 801664e:	6023      	str	r3, [r4, #0]
 8016650:	e00e      	b.n	8016670 <_malloc_r+0xa0>
 8016652:	6822      	ldr	r2, [r4, #0]
 8016654:	1b52      	subs	r2, r2, r5
 8016656:	d41e      	bmi.n	8016696 <_malloc_r+0xc6>
 8016658:	2a0b      	cmp	r2, #11
 801665a:	d916      	bls.n	801668a <_malloc_r+0xba>
 801665c:	1961      	adds	r1, r4, r5
 801665e:	42a3      	cmp	r3, r4
 8016660:	6025      	str	r5, [r4, #0]
 8016662:	bf18      	it	ne
 8016664:	6059      	strne	r1, [r3, #4]
 8016666:	6863      	ldr	r3, [r4, #4]
 8016668:	bf08      	it	eq
 801666a:	6031      	streq	r1, [r6, #0]
 801666c:	5162      	str	r2, [r4, r5]
 801666e:	604b      	str	r3, [r1, #4]
 8016670:	4638      	mov	r0, r7
 8016672:	f104 060b 	add.w	r6, r4, #11
 8016676:	f000 fc35 	bl	8016ee4 <__malloc_unlock>
 801667a:	f026 0607 	bic.w	r6, r6, #7
 801667e:	1d23      	adds	r3, r4, #4
 8016680:	1af2      	subs	r2, r6, r3
 8016682:	d0b6      	beq.n	80165f2 <_malloc_r+0x22>
 8016684:	1b9b      	subs	r3, r3, r6
 8016686:	50a3      	str	r3, [r4, r2]
 8016688:	e7b3      	b.n	80165f2 <_malloc_r+0x22>
 801668a:	6862      	ldr	r2, [r4, #4]
 801668c:	42a3      	cmp	r3, r4
 801668e:	bf0c      	ite	eq
 8016690:	6032      	streq	r2, [r6, #0]
 8016692:	605a      	strne	r2, [r3, #4]
 8016694:	e7ec      	b.n	8016670 <_malloc_r+0xa0>
 8016696:	4623      	mov	r3, r4
 8016698:	6864      	ldr	r4, [r4, #4]
 801669a:	e7b2      	b.n	8016602 <_malloc_r+0x32>
 801669c:	4634      	mov	r4, r6
 801669e:	6876      	ldr	r6, [r6, #4]
 80166a0:	e7b9      	b.n	8016616 <_malloc_r+0x46>
 80166a2:	230c      	movs	r3, #12
 80166a4:	603b      	str	r3, [r7, #0]
 80166a6:	4638      	mov	r0, r7
 80166a8:	f000 fc1c 	bl	8016ee4 <__malloc_unlock>
 80166ac:	e7a1      	b.n	80165f2 <_malloc_r+0x22>
 80166ae:	6025      	str	r5, [r4, #0]
 80166b0:	e7de      	b.n	8016670 <_malloc_r+0xa0>
 80166b2:	bf00      	nop
 80166b4:	20001534 	.word	0x20001534

080166b8 <__ssputs_r>:
 80166b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166bc:	688e      	ldr	r6, [r1, #8]
 80166be:	429e      	cmp	r6, r3
 80166c0:	4682      	mov	sl, r0
 80166c2:	460c      	mov	r4, r1
 80166c4:	4690      	mov	r8, r2
 80166c6:	461f      	mov	r7, r3
 80166c8:	d838      	bhi.n	801673c <__ssputs_r+0x84>
 80166ca:	898a      	ldrh	r2, [r1, #12]
 80166cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80166d0:	d032      	beq.n	8016738 <__ssputs_r+0x80>
 80166d2:	6825      	ldr	r5, [r4, #0]
 80166d4:	6909      	ldr	r1, [r1, #16]
 80166d6:	eba5 0901 	sub.w	r9, r5, r1
 80166da:	6965      	ldr	r5, [r4, #20]
 80166dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80166e4:	3301      	adds	r3, #1
 80166e6:	444b      	add	r3, r9
 80166e8:	106d      	asrs	r5, r5, #1
 80166ea:	429d      	cmp	r5, r3
 80166ec:	bf38      	it	cc
 80166ee:	461d      	movcc	r5, r3
 80166f0:	0553      	lsls	r3, r2, #21
 80166f2:	d531      	bpl.n	8016758 <__ssputs_r+0xa0>
 80166f4:	4629      	mov	r1, r5
 80166f6:	f7ff ff6b 	bl	80165d0 <_malloc_r>
 80166fa:	4606      	mov	r6, r0
 80166fc:	b950      	cbnz	r0, 8016714 <__ssputs_r+0x5c>
 80166fe:	230c      	movs	r3, #12
 8016700:	f8ca 3000 	str.w	r3, [sl]
 8016704:	89a3      	ldrh	r3, [r4, #12]
 8016706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801670a:	81a3      	strh	r3, [r4, #12]
 801670c:	f04f 30ff 	mov.w	r0, #4294967295
 8016710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016714:	6921      	ldr	r1, [r4, #16]
 8016716:	464a      	mov	r2, r9
 8016718:	f7fd fc94 	bl	8014044 <memcpy>
 801671c:	89a3      	ldrh	r3, [r4, #12]
 801671e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016726:	81a3      	strh	r3, [r4, #12]
 8016728:	6126      	str	r6, [r4, #16]
 801672a:	6165      	str	r5, [r4, #20]
 801672c:	444e      	add	r6, r9
 801672e:	eba5 0509 	sub.w	r5, r5, r9
 8016732:	6026      	str	r6, [r4, #0]
 8016734:	60a5      	str	r5, [r4, #8]
 8016736:	463e      	mov	r6, r7
 8016738:	42be      	cmp	r6, r7
 801673a:	d900      	bls.n	801673e <__ssputs_r+0x86>
 801673c:	463e      	mov	r6, r7
 801673e:	6820      	ldr	r0, [r4, #0]
 8016740:	4632      	mov	r2, r6
 8016742:	4641      	mov	r1, r8
 8016744:	f000 fbae 	bl	8016ea4 <memmove>
 8016748:	68a3      	ldr	r3, [r4, #8]
 801674a:	1b9b      	subs	r3, r3, r6
 801674c:	60a3      	str	r3, [r4, #8]
 801674e:	6823      	ldr	r3, [r4, #0]
 8016750:	4433      	add	r3, r6
 8016752:	6023      	str	r3, [r4, #0]
 8016754:	2000      	movs	r0, #0
 8016756:	e7db      	b.n	8016710 <__ssputs_r+0x58>
 8016758:	462a      	mov	r2, r5
 801675a:	f000 fbc9 	bl	8016ef0 <_realloc_r>
 801675e:	4606      	mov	r6, r0
 8016760:	2800      	cmp	r0, #0
 8016762:	d1e1      	bne.n	8016728 <__ssputs_r+0x70>
 8016764:	6921      	ldr	r1, [r4, #16]
 8016766:	4650      	mov	r0, sl
 8016768:	f7ff fec6 	bl	80164f8 <_free_r>
 801676c:	e7c7      	b.n	80166fe <__ssputs_r+0x46>
	...

08016770 <_svfiprintf_r>:
 8016770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016774:	4698      	mov	r8, r3
 8016776:	898b      	ldrh	r3, [r1, #12]
 8016778:	061b      	lsls	r3, r3, #24
 801677a:	b09d      	sub	sp, #116	; 0x74
 801677c:	4607      	mov	r7, r0
 801677e:	460d      	mov	r5, r1
 8016780:	4614      	mov	r4, r2
 8016782:	d50e      	bpl.n	80167a2 <_svfiprintf_r+0x32>
 8016784:	690b      	ldr	r3, [r1, #16]
 8016786:	b963      	cbnz	r3, 80167a2 <_svfiprintf_r+0x32>
 8016788:	2140      	movs	r1, #64	; 0x40
 801678a:	f7ff ff21 	bl	80165d0 <_malloc_r>
 801678e:	6028      	str	r0, [r5, #0]
 8016790:	6128      	str	r0, [r5, #16]
 8016792:	b920      	cbnz	r0, 801679e <_svfiprintf_r+0x2e>
 8016794:	230c      	movs	r3, #12
 8016796:	603b      	str	r3, [r7, #0]
 8016798:	f04f 30ff 	mov.w	r0, #4294967295
 801679c:	e0d1      	b.n	8016942 <_svfiprintf_r+0x1d2>
 801679e:	2340      	movs	r3, #64	; 0x40
 80167a0:	616b      	str	r3, [r5, #20]
 80167a2:	2300      	movs	r3, #0
 80167a4:	9309      	str	r3, [sp, #36]	; 0x24
 80167a6:	2320      	movs	r3, #32
 80167a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80167b0:	2330      	movs	r3, #48	; 0x30
 80167b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801695c <_svfiprintf_r+0x1ec>
 80167b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167ba:	f04f 0901 	mov.w	r9, #1
 80167be:	4623      	mov	r3, r4
 80167c0:	469a      	mov	sl, r3
 80167c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167c6:	b10a      	cbz	r2, 80167cc <_svfiprintf_r+0x5c>
 80167c8:	2a25      	cmp	r2, #37	; 0x25
 80167ca:	d1f9      	bne.n	80167c0 <_svfiprintf_r+0x50>
 80167cc:	ebba 0b04 	subs.w	fp, sl, r4
 80167d0:	d00b      	beq.n	80167ea <_svfiprintf_r+0x7a>
 80167d2:	465b      	mov	r3, fp
 80167d4:	4622      	mov	r2, r4
 80167d6:	4629      	mov	r1, r5
 80167d8:	4638      	mov	r0, r7
 80167da:	f7ff ff6d 	bl	80166b8 <__ssputs_r>
 80167de:	3001      	adds	r0, #1
 80167e0:	f000 80aa 	beq.w	8016938 <_svfiprintf_r+0x1c8>
 80167e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167e6:	445a      	add	r2, fp
 80167e8:	9209      	str	r2, [sp, #36]	; 0x24
 80167ea:	f89a 3000 	ldrb.w	r3, [sl]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f000 80a2 	beq.w	8016938 <_svfiprintf_r+0x1c8>
 80167f4:	2300      	movs	r3, #0
 80167f6:	f04f 32ff 	mov.w	r2, #4294967295
 80167fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80167fe:	f10a 0a01 	add.w	sl, sl, #1
 8016802:	9304      	str	r3, [sp, #16]
 8016804:	9307      	str	r3, [sp, #28]
 8016806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801680a:	931a      	str	r3, [sp, #104]	; 0x68
 801680c:	4654      	mov	r4, sl
 801680e:	2205      	movs	r2, #5
 8016810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016814:	4851      	ldr	r0, [pc, #324]	; (801695c <_svfiprintf_r+0x1ec>)
 8016816:	f7e9 fcbb 	bl	8000190 <memchr>
 801681a:	9a04      	ldr	r2, [sp, #16]
 801681c:	b9d8      	cbnz	r0, 8016856 <_svfiprintf_r+0xe6>
 801681e:	06d0      	lsls	r0, r2, #27
 8016820:	bf44      	itt	mi
 8016822:	2320      	movmi	r3, #32
 8016824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016828:	0711      	lsls	r1, r2, #28
 801682a:	bf44      	itt	mi
 801682c:	232b      	movmi	r3, #43	; 0x2b
 801682e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016832:	f89a 3000 	ldrb.w	r3, [sl]
 8016836:	2b2a      	cmp	r3, #42	; 0x2a
 8016838:	d015      	beq.n	8016866 <_svfiprintf_r+0xf6>
 801683a:	9a07      	ldr	r2, [sp, #28]
 801683c:	4654      	mov	r4, sl
 801683e:	2000      	movs	r0, #0
 8016840:	f04f 0c0a 	mov.w	ip, #10
 8016844:	4621      	mov	r1, r4
 8016846:	f811 3b01 	ldrb.w	r3, [r1], #1
 801684a:	3b30      	subs	r3, #48	; 0x30
 801684c:	2b09      	cmp	r3, #9
 801684e:	d94e      	bls.n	80168ee <_svfiprintf_r+0x17e>
 8016850:	b1b0      	cbz	r0, 8016880 <_svfiprintf_r+0x110>
 8016852:	9207      	str	r2, [sp, #28]
 8016854:	e014      	b.n	8016880 <_svfiprintf_r+0x110>
 8016856:	eba0 0308 	sub.w	r3, r0, r8
 801685a:	fa09 f303 	lsl.w	r3, r9, r3
 801685e:	4313      	orrs	r3, r2
 8016860:	9304      	str	r3, [sp, #16]
 8016862:	46a2      	mov	sl, r4
 8016864:	e7d2      	b.n	801680c <_svfiprintf_r+0x9c>
 8016866:	9b03      	ldr	r3, [sp, #12]
 8016868:	1d19      	adds	r1, r3, #4
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	9103      	str	r1, [sp, #12]
 801686e:	2b00      	cmp	r3, #0
 8016870:	bfbb      	ittet	lt
 8016872:	425b      	neglt	r3, r3
 8016874:	f042 0202 	orrlt.w	r2, r2, #2
 8016878:	9307      	strge	r3, [sp, #28]
 801687a:	9307      	strlt	r3, [sp, #28]
 801687c:	bfb8      	it	lt
 801687e:	9204      	strlt	r2, [sp, #16]
 8016880:	7823      	ldrb	r3, [r4, #0]
 8016882:	2b2e      	cmp	r3, #46	; 0x2e
 8016884:	d10c      	bne.n	80168a0 <_svfiprintf_r+0x130>
 8016886:	7863      	ldrb	r3, [r4, #1]
 8016888:	2b2a      	cmp	r3, #42	; 0x2a
 801688a:	d135      	bne.n	80168f8 <_svfiprintf_r+0x188>
 801688c:	9b03      	ldr	r3, [sp, #12]
 801688e:	1d1a      	adds	r2, r3, #4
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	9203      	str	r2, [sp, #12]
 8016894:	2b00      	cmp	r3, #0
 8016896:	bfb8      	it	lt
 8016898:	f04f 33ff 	movlt.w	r3, #4294967295
 801689c:	3402      	adds	r4, #2
 801689e:	9305      	str	r3, [sp, #20]
 80168a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801696c <_svfiprintf_r+0x1fc>
 80168a4:	7821      	ldrb	r1, [r4, #0]
 80168a6:	2203      	movs	r2, #3
 80168a8:	4650      	mov	r0, sl
 80168aa:	f7e9 fc71 	bl	8000190 <memchr>
 80168ae:	b140      	cbz	r0, 80168c2 <_svfiprintf_r+0x152>
 80168b0:	2340      	movs	r3, #64	; 0x40
 80168b2:	eba0 000a 	sub.w	r0, r0, sl
 80168b6:	fa03 f000 	lsl.w	r0, r3, r0
 80168ba:	9b04      	ldr	r3, [sp, #16]
 80168bc:	4303      	orrs	r3, r0
 80168be:	3401      	adds	r4, #1
 80168c0:	9304      	str	r3, [sp, #16]
 80168c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168c6:	4826      	ldr	r0, [pc, #152]	; (8016960 <_svfiprintf_r+0x1f0>)
 80168c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80168cc:	2206      	movs	r2, #6
 80168ce:	f7e9 fc5f 	bl	8000190 <memchr>
 80168d2:	2800      	cmp	r0, #0
 80168d4:	d038      	beq.n	8016948 <_svfiprintf_r+0x1d8>
 80168d6:	4b23      	ldr	r3, [pc, #140]	; (8016964 <_svfiprintf_r+0x1f4>)
 80168d8:	bb1b      	cbnz	r3, 8016922 <_svfiprintf_r+0x1b2>
 80168da:	9b03      	ldr	r3, [sp, #12]
 80168dc:	3307      	adds	r3, #7
 80168de:	f023 0307 	bic.w	r3, r3, #7
 80168e2:	3308      	adds	r3, #8
 80168e4:	9303      	str	r3, [sp, #12]
 80168e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168e8:	4433      	add	r3, r6
 80168ea:	9309      	str	r3, [sp, #36]	; 0x24
 80168ec:	e767      	b.n	80167be <_svfiprintf_r+0x4e>
 80168ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80168f2:	460c      	mov	r4, r1
 80168f4:	2001      	movs	r0, #1
 80168f6:	e7a5      	b.n	8016844 <_svfiprintf_r+0xd4>
 80168f8:	2300      	movs	r3, #0
 80168fa:	3401      	adds	r4, #1
 80168fc:	9305      	str	r3, [sp, #20]
 80168fe:	4619      	mov	r1, r3
 8016900:	f04f 0c0a 	mov.w	ip, #10
 8016904:	4620      	mov	r0, r4
 8016906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801690a:	3a30      	subs	r2, #48	; 0x30
 801690c:	2a09      	cmp	r2, #9
 801690e:	d903      	bls.n	8016918 <_svfiprintf_r+0x1a8>
 8016910:	2b00      	cmp	r3, #0
 8016912:	d0c5      	beq.n	80168a0 <_svfiprintf_r+0x130>
 8016914:	9105      	str	r1, [sp, #20]
 8016916:	e7c3      	b.n	80168a0 <_svfiprintf_r+0x130>
 8016918:	fb0c 2101 	mla	r1, ip, r1, r2
 801691c:	4604      	mov	r4, r0
 801691e:	2301      	movs	r3, #1
 8016920:	e7f0      	b.n	8016904 <_svfiprintf_r+0x194>
 8016922:	ab03      	add	r3, sp, #12
 8016924:	9300      	str	r3, [sp, #0]
 8016926:	462a      	mov	r2, r5
 8016928:	4b0f      	ldr	r3, [pc, #60]	; (8016968 <_svfiprintf_r+0x1f8>)
 801692a:	a904      	add	r1, sp, #16
 801692c:	4638      	mov	r0, r7
 801692e:	f7fd fc3f 	bl	80141b0 <_printf_float>
 8016932:	1c42      	adds	r2, r0, #1
 8016934:	4606      	mov	r6, r0
 8016936:	d1d6      	bne.n	80168e6 <_svfiprintf_r+0x176>
 8016938:	89ab      	ldrh	r3, [r5, #12]
 801693a:	065b      	lsls	r3, r3, #25
 801693c:	f53f af2c 	bmi.w	8016798 <_svfiprintf_r+0x28>
 8016940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016942:	b01d      	add	sp, #116	; 0x74
 8016944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016948:	ab03      	add	r3, sp, #12
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	462a      	mov	r2, r5
 801694e:	4b06      	ldr	r3, [pc, #24]	; (8016968 <_svfiprintf_r+0x1f8>)
 8016950:	a904      	add	r1, sp, #16
 8016952:	4638      	mov	r0, r7
 8016954:	f7fd fed0 	bl	80146f8 <_printf_i>
 8016958:	e7eb      	b.n	8016932 <_svfiprintf_r+0x1c2>
 801695a:	bf00      	nop
 801695c:	08018dd4 	.word	0x08018dd4
 8016960:	08018dde 	.word	0x08018dde
 8016964:	080141b1 	.word	0x080141b1
 8016968:	080166b9 	.word	0x080166b9
 801696c:	08018dda 	.word	0x08018dda

08016970 <__sfputc_r>:
 8016970:	6893      	ldr	r3, [r2, #8]
 8016972:	3b01      	subs	r3, #1
 8016974:	2b00      	cmp	r3, #0
 8016976:	b410      	push	{r4}
 8016978:	6093      	str	r3, [r2, #8]
 801697a:	da08      	bge.n	801698e <__sfputc_r+0x1e>
 801697c:	6994      	ldr	r4, [r2, #24]
 801697e:	42a3      	cmp	r3, r4
 8016980:	db01      	blt.n	8016986 <__sfputc_r+0x16>
 8016982:	290a      	cmp	r1, #10
 8016984:	d103      	bne.n	801698e <__sfputc_r+0x1e>
 8016986:	f85d 4b04 	ldr.w	r4, [sp], #4
 801698a:	f7fe b8b3 	b.w	8014af4 <__swbuf_r>
 801698e:	6813      	ldr	r3, [r2, #0]
 8016990:	1c58      	adds	r0, r3, #1
 8016992:	6010      	str	r0, [r2, #0]
 8016994:	7019      	strb	r1, [r3, #0]
 8016996:	4608      	mov	r0, r1
 8016998:	f85d 4b04 	ldr.w	r4, [sp], #4
 801699c:	4770      	bx	lr

0801699e <__sfputs_r>:
 801699e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a0:	4606      	mov	r6, r0
 80169a2:	460f      	mov	r7, r1
 80169a4:	4614      	mov	r4, r2
 80169a6:	18d5      	adds	r5, r2, r3
 80169a8:	42ac      	cmp	r4, r5
 80169aa:	d101      	bne.n	80169b0 <__sfputs_r+0x12>
 80169ac:	2000      	movs	r0, #0
 80169ae:	e007      	b.n	80169c0 <__sfputs_r+0x22>
 80169b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169b4:	463a      	mov	r2, r7
 80169b6:	4630      	mov	r0, r6
 80169b8:	f7ff ffda 	bl	8016970 <__sfputc_r>
 80169bc:	1c43      	adds	r3, r0, #1
 80169be:	d1f3      	bne.n	80169a8 <__sfputs_r+0xa>
 80169c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169c4 <_vfiprintf_r>:
 80169c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c8:	460d      	mov	r5, r1
 80169ca:	b09d      	sub	sp, #116	; 0x74
 80169cc:	4614      	mov	r4, r2
 80169ce:	4698      	mov	r8, r3
 80169d0:	4606      	mov	r6, r0
 80169d2:	b118      	cbz	r0, 80169dc <_vfiprintf_r+0x18>
 80169d4:	6983      	ldr	r3, [r0, #24]
 80169d6:	b90b      	cbnz	r3, 80169dc <_vfiprintf_r+0x18>
 80169d8:	f7ff f8e2 	bl	8015ba0 <__sinit>
 80169dc:	4b89      	ldr	r3, [pc, #548]	; (8016c04 <_vfiprintf_r+0x240>)
 80169de:	429d      	cmp	r5, r3
 80169e0:	d11b      	bne.n	8016a1a <_vfiprintf_r+0x56>
 80169e2:	6875      	ldr	r5, [r6, #4]
 80169e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169e6:	07d9      	lsls	r1, r3, #31
 80169e8:	d405      	bmi.n	80169f6 <_vfiprintf_r+0x32>
 80169ea:	89ab      	ldrh	r3, [r5, #12]
 80169ec:	059a      	lsls	r2, r3, #22
 80169ee:	d402      	bmi.n	80169f6 <_vfiprintf_r+0x32>
 80169f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169f2:	f7ff f978 	bl	8015ce6 <__retarget_lock_acquire_recursive>
 80169f6:	89ab      	ldrh	r3, [r5, #12]
 80169f8:	071b      	lsls	r3, r3, #28
 80169fa:	d501      	bpl.n	8016a00 <_vfiprintf_r+0x3c>
 80169fc:	692b      	ldr	r3, [r5, #16]
 80169fe:	b9eb      	cbnz	r3, 8016a3c <_vfiprintf_r+0x78>
 8016a00:	4629      	mov	r1, r5
 8016a02:	4630      	mov	r0, r6
 8016a04:	f7fe f8c8 	bl	8014b98 <__swsetup_r>
 8016a08:	b1c0      	cbz	r0, 8016a3c <_vfiprintf_r+0x78>
 8016a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a0c:	07dc      	lsls	r4, r3, #31
 8016a0e:	d50e      	bpl.n	8016a2e <_vfiprintf_r+0x6a>
 8016a10:	f04f 30ff 	mov.w	r0, #4294967295
 8016a14:	b01d      	add	sp, #116	; 0x74
 8016a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a1a:	4b7b      	ldr	r3, [pc, #492]	; (8016c08 <_vfiprintf_r+0x244>)
 8016a1c:	429d      	cmp	r5, r3
 8016a1e:	d101      	bne.n	8016a24 <_vfiprintf_r+0x60>
 8016a20:	68b5      	ldr	r5, [r6, #8]
 8016a22:	e7df      	b.n	80169e4 <_vfiprintf_r+0x20>
 8016a24:	4b79      	ldr	r3, [pc, #484]	; (8016c0c <_vfiprintf_r+0x248>)
 8016a26:	429d      	cmp	r5, r3
 8016a28:	bf08      	it	eq
 8016a2a:	68f5      	ldreq	r5, [r6, #12]
 8016a2c:	e7da      	b.n	80169e4 <_vfiprintf_r+0x20>
 8016a2e:	89ab      	ldrh	r3, [r5, #12]
 8016a30:	0598      	lsls	r0, r3, #22
 8016a32:	d4ed      	bmi.n	8016a10 <_vfiprintf_r+0x4c>
 8016a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a36:	f7ff f957 	bl	8015ce8 <__retarget_lock_release_recursive>
 8016a3a:	e7e9      	b.n	8016a10 <_vfiprintf_r+0x4c>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a40:	2320      	movs	r3, #32
 8016a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a4a:	2330      	movs	r3, #48	; 0x30
 8016a4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016c10 <_vfiprintf_r+0x24c>
 8016a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a54:	f04f 0901 	mov.w	r9, #1
 8016a58:	4623      	mov	r3, r4
 8016a5a:	469a      	mov	sl, r3
 8016a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a60:	b10a      	cbz	r2, 8016a66 <_vfiprintf_r+0xa2>
 8016a62:	2a25      	cmp	r2, #37	; 0x25
 8016a64:	d1f9      	bne.n	8016a5a <_vfiprintf_r+0x96>
 8016a66:	ebba 0b04 	subs.w	fp, sl, r4
 8016a6a:	d00b      	beq.n	8016a84 <_vfiprintf_r+0xc0>
 8016a6c:	465b      	mov	r3, fp
 8016a6e:	4622      	mov	r2, r4
 8016a70:	4629      	mov	r1, r5
 8016a72:	4630      	mov	r0, r6
 8016a74:	f7ff ff93 	bl	801699e <__sfputs_r>
 8016a78:	3001      	adds	r0, #1
 8016a7a:	f000 80aa 	beq.w	8016bd2 <_vfiprintf_r+0x20e>
 8016a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a80:	445a      	add	r2, fp
 8016a82:	9209      	str	r2, [sp, #36]	; 0x24
 8016a84:	f89a 3000 	ldrb.w	r3, [sl]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	f000 80a2 	beq.w	8016bd2 <_vfiprintf_r+0x20e>
 8016a8e:	2300      	movs	r3, #0
 8016a90:	f04f 32ff 	mov.w	r2, #4294967295
 8016a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a98:	f10a 0a01 	add.w	sl, sl, #1
 8016a9c:	9304      	str	r3, [sp, #16]
 8016a9e:	9307      	str	r3, [sp, #28]
 8016aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8016aa6:	4654      	mov	r4, sl
 8016aa8:	2205      	movs	r2, #5
 8016aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aae:	4858      	ldr	r0, [pc, #352]	; (8016c10 <_vfiprintf_r+0x24c>)
 8016ab0:	f7e9 fb6e 	bl	8000190 <memchr>
 8016ab4:	9a04      	ldr	r2, [sp, #16]
 8016ab6:	b9d8      	cbnz	r0, 8016af0 <_vfiprintf_r+0x12c>
 8016ab8:	06d1      	lsls	r1, r2, #27
 8016aba:	bf44      	itt	mi
 8016abc:	2320      	movmi	r3, #32
 8016abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ac2:	0713      	lsls	r3, r2, #28
 8016ac4:	bf44      	itt	mi
 8016ac6:	232b      	movmi	r3, #43	; 0x2b
 8016ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016acc:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8016ad2:	d015      	beq.n	8016b00 <_vfiprintf_r+0x13c>
 8016ad4:	9a07      	ldr	r2, [sp, #28]
 8016ad6:	4654      	mov	r4, sl
 8016ad8:	2000      	movs	r0, #0
 8016ada:	f04f 0c0a 	mov.w	ip, #10
 8016ade:	4621      	mov	r1, r4
 8016ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae4:	3b30      	subs	r3, #48	; 0x30
 8016ae6:	2b09      	cmp	r3, #9
 8016ae8:	d94e      	bls.n	8016b88 <_vfiprintf_r+0x1c4>
 8016aea:	b1b0      	cbz	r0, 8016b1a <_vfiprintf_r+0x156>
 8016aec:	9207      	str	r2, [sp, #28]
 8016aee:	e014      	b.n	8016b1a <_vfiprintf_r+0x156>
 8016af0:	eba0 0308 	sub.w	r3, r0, r8
 8016af4:	fa09 f303 	lsl.w	r3, r9, r3
 8016af8:	4313      	orrs	r3, r2
 8016afa:	9304      	str	r3, [sp, #16]
 8016afc:	46a2      	mov	sl, r4
 8016afe:	e7d2      	b.n	8016aa6 <_vfiprintf_r+0xe2>
 8016b00:	9b03      	ldr	r3, [sp, #12]
 8016b02:	1d19      	adds	r1, r3, #4
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	9103      	str	r1, [sp, #12]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	bfbb      	ittet	lt
 8016b0c:	425b      	neglt	r3, r3
 8016b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8016b12:	9307      	strge	r3, [sp, #28]
 8016b14:	9307      	strlt	r3, [sp, #28]
 8016b16:	bfb8      	it	lt
 8016b18:	9204      	strlt	r2, [sp, #16]
 8016b1a:	7823      	ldrb	r3, [r4, #0]
 8016b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8016b1e:	d10c      	bne.n	8016b3a <_vfiprintf_r+0x176>
 8016b20:	7863      	ldrb	r3, [r4, #1]
 8016b22:	2b2a      	cmp	r3, #42	; 0x2a
 8016b24:	d135      	bne.n	8016b92 <_vfiprintf_r+0x1ce>
 8016b26:	9b03      	ldr	r3, [sp, #12]
 8016b28:	1d1a      	adds	r2, r3, #4
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	9203      	str	r2, [sp, #12]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	bfb8      	it	lt
 8016b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b36:	3402      	adds	r4, #2
 8016b38:	9305      	str	r3, [sp, #20]
 8016b3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016c20 <_vfiprintf_r+0x25c>
 8016b3e:	7821      	ldrb	r1, [r4, #0]
 8016b40:	2203      	movs	r2, #3
 8016b42:	4650      	mov	r0, sl
 8016b44:	f7e9 fb24 	bl	8000190 <memchr>
 8016b48:	b140      	cbz	r0, 8016b5c <_vfiprintf_r+0x198>
 8016b4a:	2340      	movs	r3, #64	; 0x40
 8016b4c:	eba0 000a 	sub.w	r0, r0, sl
 8016b50:	fa03 f000 	lsl.w	r0, r3, r0
 8016b54:	9b04      	ldr	r3, [sp, #16]
 8016b56:	4303      	orrs	r3, r0
 8016b58:	3401      	adds	r4, #1
 8016b5a:	9304      	str	r3, [sp, #16]
 8016b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b60:	482c      	ldr	r0, [pc, #176]	; (8016c14 <_vfiprintf_r+0x250>)
 8016b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b66:	2206      	movs	r2, #6
 8016b68:	f7e9 fb12 	bl	8000190 <memchr>
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	d03f      	beq.n	8016bf0 <_vfiprintf_r+0x22c>
 8016b70:	4b29      	ldr	r3, [pc, #164]	; (8016c18 <_vfiprintf_r+0x254>)
 8016b72:	bb1b      	cbnz	r3, 8016bbc <_vfiprintf_r+0x1f8>
 8016b74:	9b03      	ldr	r3, [sp, #12]
 8016b76:	3307      	adds	r3, #7
 8016b78:	f023 0307 	bic.w	r3, r3, #7
 8016b7c:	3308      	adds	r3, #8
 8016b7e:	9303      	str	r3, [sp, #12]
 8016b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b82:	443b      	add	r3, r7
 8016b84:	9309      	str	r3, [sp, #36]	; 0x24
 8016b86:	e767      	b.n	8016a58 <_vfiprintf_r+0x94>
 8016b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b8c:	460c      	mov	r4, r1
 8016b8e:	2001      	movs	r0, #1
 8016b90:	e7a5      	b.n	8016ade <_vfiprintf_r+0x11a>
 8016b92:	2300      	movs	r3, #0
 8016b94:	3401      	adds	r4, #1
 8016b96:	9305      	str	r3, [sp, #20]
 8016b98:	4619      	mov	r1, r3
 8016b9a:	f04f 0c0a 	mov.w	ip, #10
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ba4:	3a30      	subs	r2, #48	; 0x30
 8016ba6:	2a09      	cmp	r2, #9
 8016ba8:	d903      	bls.n	8016bb2 <_vfiprintf_r+0x1ee>
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d0c5      	beq.n	8016b3a <_vfiprintf_r+0x176>
 8016bae:	9105      	str	r1, [sp, #20]
 8016bb0:	e7c3      	b.n	8016b3a <_vfiprintf_r+0x176>
 8016bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	2301      	movs	r3, #1
 8016bba:	e7f0      	b.n	8016b9e <_vfiprintf_r+0x1da>
 8016bbc:	ab03      	add	r3, sp, #12
 8016bbe:	9300      	str	r3, [sp, #0]
 8016bc0:	462a      	mov	r2, r5
 8016bc2:	4b16      	ldr	r3, [pc, #88]	; (8016c1c <_vfiprintf_r+0x258>)
 8016bc4:	a904      	add	r1, sp, #16
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	f7fd faf2 	bl	80141b0 <_printf_float>
 8016bcc:	4607      	mov	r7, r0
 8016bce:	1c78      	adds	r0, r7, #1
 8016bd0:	d1d6      	bne.n	8016b80 <_vfiprintf_r+0x1bc>
 8016bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bd4:	07d9      	lsls	r1, r3, #31
 8016bd6:	d405      	bmi.n	8016be4 <_vfiprintf_r+0x220>
 8016bd8:	89ab      	ldrh	r3, [r5, #12]
 8016bda:	059a      	lsls	r2, r3, #22
 8016bdc:	d402      	bmi.n	8016be4 <_vfiprintf_r+0x220>
 8016bde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016be0:	f7ff f882 	bl	8015ce8 <__retarget_lock_release_recursive>
 8016be4:	89ab      	ldrh	r3, [r5, #12]
 8016be6:	065b      	lsls	r3, r3, #25
 8016be8:	f53f af12 	bmi.w	8016a10 <_vfiprintf_r+0x4c>
 8016bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bee:	e711      	b.n	8016a14 <_vfiprintf_r+0x50>
 8016bf0:	ab03      	add	r3, sp, #12
 8016bf2:	9300      	str	r3, [sp, #0]
 8016bf4:	462a      	mov	r2, r5
 8016bf6:	4b09      	ldr	r3, [pc, #36]	; (8016c1c <_vfiprintf_r+0x258>)
 8016bf8:	a904      	add	r1, sp, #16
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	f7fd fd7c 	bl	80146f8 <_printf_i>
 8016c00:	e7e4      	b.n	8016bcc <_vfiprintf_r+0x208>
 8016c02:	bf00      	nop
 8016c04:	08018c38 	.word	0x08018c38
 8016c08:	08018c58 	.word	0x08018c58
 8016c0c:	08018c18 	.word	0x08018c18
 8016c10:	08018dd4 	.word	0x08018dd4
 8016c14:	08018dde 	.word	0x08018dde
 8016c18:	080141b1 	.word	0x080141b1
 8016c1c:	0801699f 	.word	0x0801699f
 8016c20:	08018dda 	.word	0x08018dda

08016c24 <_putc_r>:
 8016c24:	b570      	push	{r4, r5, r6, lr}
 8016c26:	460d      	mov	r5, r1
 8016c28:	4614      	mov	r4, r2
 8016c2a:	4606      	mov	r6, r0
 8016c2c:	b118      	cbz	r0, 8016c36 <_putc_r+0x12>
 8016c2e:	6983      	ldr	r3, [r0, #24]
 8016c30:	b90b      	cbnz	r3, 8016c36 <_putc_r+0x12>
 8016c32:	f7fe ffb5 	bl	8015ba0 <__sinit>
 8016c36:	4b1c      	ldr	r3, [pc, #112]	; (8016ca8 <_putc_r+0x84>)
 8016c38:	429c      	cmp	r4, r3
 8016c3a:	d124      	bne.n	8016c86 <_putc_r+0x62>
 8016c3c:	6874      	ldr	r4, [r6, #4]
 8016c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c40:	07d8      	lsls	r0, r3, #31
 8016c42:	d405      	bmi.n	8016c50 <_putc_r+0x2c>
 8016c44:	89a3      	ldrh	r3, [r4, #12]
 8016c46:	0599      	lsls	r1, r3, #22
 8016c48:	d402      	bmi.n	8016c50 <_putc_r+0x2c>
 8016c4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c4c:	f7ff f84b 	bl	8015ce6 <__retarget_lock_acquire_recursive>
 8016c50:	68a3      	ldr	r3, [r4, #8]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	60a3      	str	r3, [r4, #8]
 8016c58:	da05      	bge.n	8016c66 <_putc_r+0x42>
 8016c5a:	69a2      	ldr	r2, [r4, #24]
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	db1c      	blt.n	8016c9a <_putc_r+0x76>
 8016c60:	b2eb      	uxtb	r3, r5
 8016c62:	2b0a      	cmp	r3, #10
 8016c64:	d019      	beq.n	8016c9a <_putc_r+0x76>
 8016c66:	6823      	ldr	r3, [r4, #0]
 8016c68:	1c5a      	adds	r2, r3, #1
 8016c6a:	6022      	str	r2, [r4, #0]
 8016c6c:	701d      	strb	r5, [r3, #0]
 8016c6e:	b2ed      	uxtb	r5, r5
 8016c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c72:	07da      	lsls	r2, r3, #31
 8016c74:	d405      	bmi.n	8016c82 <_putc_r+0x5e>
 8016c76:	89a3      	ldrh	r3, [r4, #12]
 8016c78:	059b      	lsls	r3, r3, #22
 8016c7a:	d402      	bmi.n	8016c82 <_putc_r+0x5e>
 8016c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c7e:	f7ff f833 	bl	8015ce8 <__retarget_lock_release_recursive>
 8016c82:	4628      	mov	r0, r5
 8016c84:	bd70      	pop	{r4, r5, r6, pc}
 8016c86:	4b09      	ldr	r3, [pc, #36]	; (8016cac <_putc_r+0x88>)
 8016c88:	429c      	cmp	r4, r3
 8016c8a:	d101      	bne.n	8016c90 <_putc_r+0x6c>
 8016c8c:	68b4      	ldr	r4, [r6, #8]
 8016c8e:	e7d6      	b.n	8016c3e <_putc_r+0x1a>
 8016c90:	4b07      	ldr	r3, [pc, #28]	; (8016cb0 <_putc_r+0x8c>)
 8016c92:	429c      	cmp	r4, r3
 8016c94:	bf08      	it	eq
 8016c96:	68f4      	ldreq	r4, [r6, #12]
 8016c98:	e7d1      	b.n	8016c3e <_putc_r+0x1a>
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	4622      	mov	r2, r4
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	f7fd ff28 	bl	8014af4 <__swbuf_r>
 8016ca4:	4605      	mov	r5, r0
 8016ca6:	e7e3      	b.n	8016c70 <_putc_r+0x4c>
 8016ca8:	08018c38 	.word	0x08018c38
 8016cac:	08018c58 	.word	0x08018c58
 8016cb0:	08018c18 	.word	0x08018c18

08016cb4 <_sbrk_r>:
 8016cb4:	b538      	push	{r3, r4, r5, lr}
 8016cb6:	4d06      	ldr	r5, [pc, #24]	; (8016cd0 <_sbrk_r+0x1c>)
 8016cb8:	2300      	movs	r3, #0
 8016cba:	4604      	mov	r4, r0
 8016cbc:	4608      	mov	r0, r1
 8016cbe:	602b      	str	r3, [r5, #0]
 8016cc0:	f7ec fa6c 	bl	800319c <_sbrk>
 8016cc4:	1c43      	adds	r3, r0, #1
 8016cc6:	d102      	bne.n	8016cce <_sbrk_r+0x1a>
 8016cc8:	682b      	ldr	r3, [r5, #0]
 8016cca:	b103      	cbz	r3, 8016cce <_sbrk_r+0x1a>
 8016ccc:	6023      	str	r3, [r4, #0]
 8016cce:	bd38      	pop	{r3, r4, r5, pc}
 8016cd0:	2000153c 	.word	0x2000153c

08016cd4 <__sread>:
 8016cd4:	b510      	push	{r4, lr}
 8016cd6:	460c      	mov	r4, r1
 8016cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cdc:	f000 f938 	bl	8016f50 <_read_r>
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	bfab      	itete	ge
 8016ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8016ce8:	181b      	addge	r3, r3, r0
 8016cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016cee:	bfac      	ite	ge
 8016cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016cf2:	81a3      	strhlt	r3, [r4, #12]
 8016cf4:	bd10      	pop	{r4, pc}

08016cf6 <__swrite>:
 8016cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cfa:	461f      	mov	r7, r3
 8016cfc:	898b      	ldrh	r3, [r1, #12]
 8016cfe:	05db      	lsls	r3, r3, #23
 8016d00:	4605      	mov	r5, r0
 8016d02:	460c      	mov	r4, r1
 8016d04:	4616      	mov	r6, r2
 8016d06:	d505      	bpl.n	8016d14 <__swrite+0x1e>
 8016d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d0c:	2302      	movs	r3, #2
 8016d0e:	2200      	movs	r2, #0
 8016d10:	f000 f8a4 	bl	8016e5c <_lseek_r>
 8016d14:	89a3      	ldrh	r3, [r4, #12]
 8016d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d1e:	81a3      	strh	r3, [r4, #12]
 8016d20:	4632      	mov	r2, r6
 8016d22:	463b      	mov	r3, r7
 8016d24:	4628      	mov	r0, r5
 8016d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2a:	f000 b823 	b.w	8016d74 <_write_r>

08016d2e <__sseek>:
 8016d2e:	b510      	push	{r4, lr}
 8016d30:	460c      	mov	r4, r1
 8016d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d36:	f000 f891 	bl	8016e5c <_lseek_r>
 8016d3a:	1c43      	adds	r3, r0, #1
 8016d3c:	89a3      	ldrh	r3, [r4, #12]
 8016d3e:	bf15      	itete	ne
 8016d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8016d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d4a:	81a3      	strheq	r3, [r4, #12]
 8016d4c:	bf18      	it	ne
 8016d4e:	81a3      	strhne	r3, [r4, #12]
 8016d50:	bd10      	pop	{r4, pc}

08016d52 <__sclose>:
 8016d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d56:	f000 b83d 	b.w	8016dd4 <_close_r>

08016d5a <strchr>:
 8016d5a:	b2c9      	uxtb	r1, r1
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d62:	b11a      	cbz	r2, 8016d6c <strchr+0x12>
 8016d64:	428a      	cmp	r2, r1
 8016d66:	d1f9      	bne.n	8016d5c <strchr+0x2>
 8016d68:	4618      	mov	r0, r3
 8016d6a:	4770      	bx	lr
 8016d6c:	2900      	cmp	r1, #0
 8016d6e:	bf18      	it	ne
 8016d70:	2300      	movne	r3, #0
 8016d72:	e7f9      	b.n	8016d68 <strchr+0xe>

08016d74 <_write_r>:
 8016d74:	b538      	push	{r3, r4, r5, lr}
 8016d76:	4d07      	ldr	r5, [pc, #28]	; (8016d94 <_write_r+0x20>)
 8016d78:	4604      	mov	r4, r0
 8016d7a:	4608      	mov	r0, r1
 8016d7c:	4611      	mov	r1, r2
 8016d7e:	2200      	movs	r2, #0
 8016d80:	602a      	str	r2, [r5, #0]
 8016d82:	461a      	mov	r2, r3
 8016d84:	f7eb fbf4 	bl	8002570 <_write>
 8016d88:	1c43      	adds	r3, r0, #1
 8016d8a:	d102      	bne.n	8016d92 <_write_r+0x1e>
 8016d8c:	682b      	ldr	r3, [r5, #0]
 8016d8e:	b103      	cbz	r3, 8016d92 <_write_r+0x1e>
 8016d90:	6023      	str	r3, [r4, #0]
 8016d92:	bd38      	pop	{r3, r4, r5, pc}
 8016d94:	2000153c 	.word	0x2000153c

08016d98 <__assert_func>:
 8016d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d9a:	4614      	mov	r4, r2
 8016d9c:	461a      	mov	r2, r3
 8016d9e:	4b09      	ldr	r3, [pc, #36]	; (8016dc4 <__assert_func+0x2c>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	4605      	mov	r5, r0
 8016da4:	68d8      	ldr	r0, [r3, #12]
 8016da6:	b14c      	cbz	r4, 8016dbc <__assert_func+0x24>
 8016da8:	4b07      	ldr	r3, [pc, #28]	; (8016dc8 <__assert_func+0x30>)
 8016daa:	9100      	str	r1, [sp, #0]
 8016dac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016db0:	4906      	ldr	r1, [pc, #24]	; (8016dcc <__assert_func+0x34>)
 8016db2:	462b      	mov	r3, r5
 8016db4:	f000 f81e 	bl	8016df4 <fiprintf>
 8016db8:	f000 f8e9 	bl	8016f8e <abort>
 8016dbc:	4b04      	ldr	r3, [pc, #16]	; (8016dd0 <__assert_func+0x38>)
 8016dbe:	461c      	mov	r4, r3
 8016dc0:	e7f3      	b.n	8016daa <__assert_func+0x12>
 8016dc2:	bf00      	nop
 8016dc4:	20000244 	.word	0x20000244
 8016dc8:	08018de5 	.word	0x08018de5
 8016dcc:	08018df2 	.word	0x08018df2
 8016dd0:	08018e20 	.word	0x08018e20

08016dd4 <_close_r>:
 8016dd4:	b538      	push	{r3, r4, r5, lr}
 8016dd6:	4d06      	ldr	r5, [pc, #24]	; (8016df0 <_close_r+0x1c>)
 8016dd8:	2300      	movs	r3, #0
 8016dda:	4604      	mov	r4, r0
 8016ddc:	4608      	mov	r0, r1
 8016dde:	602b      	str	r3, [r5, #0]
 8016de0:	f7ec f9a7 	bl	8003132 <_close>
 8016de4:	1c43      	adds	r3, r0, #1
 8016de6:	d102      	bne.n	8016dee <_close_r+0x1a>
 8016de8:	682b      	ldr	r3, [r5, #0]
 8016dea:	b103      	cbz	r3, 8016dee <_close_r+0x1a>
 8016dec:	6023      	str	r3, [r4, #0]
 8016dee:	bd38      	pop	{r3, r4, r5, pc}
 8016df0:	2000153c 	.word	0x2000153c

08016df4 <fiprintf>:
 8016df4:	b40e      	push	{r1, r2, r3}
 8016df6:	b503      	push	{r0, r1, lr}
 8016df8:	4601      	mov	r1, r0
 8016dfa:	ab03      	add	r3, sp, #12
 8016dfc:	4805      	ldr	r0, [pc, #20]	; (8016e14 <fiprintf+0x20>)
 8016dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e02:	6800      	ldr	r0, [r0, #0]
 8016e04:	9301      	str	r3, [sp, #4]
 8016e06:	f7ff fddd 	bl	80169c4 <_vfiprintf_r>
 8016e0a:	b002      	add	sp, #8
 8016e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e10:	b003      	add	sp, #12
 8016e12:	4770      	bx	lr
 8016e14:	20000244 	.word	0x20000244

08016e18 <_fstat_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d07      	ldr	r5, [pc, #28]	; (8016e38 <_fstat_r+0x20>)
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4608      	mov	r0, r1
 8016e22:	4611      	mov	r1, r2
 8016e24:	602b      	str	r3, [r5, #0]
 8016e26:	f7ec f990 	bl	800314a <_fstat>
 8016e2a:	1c43      	adds	r3, r0, #1
 8016e2c:	d102      	bne.n	8016e34 <_fstat_r+0x1c>
 8016e2e:	682b      	ldr	r3, [r5, #0]
 8016e30:	b103      	cbz	r3, 8016e34 <_fstat_r+0x1c>
 8016e32:	6023      	str	r3, [r4, #0]
 8016e34:	bd38      	pop	{r3, r4, r5, pc}
 8016e36:	bf00      	nop
 8016e38:	2000153c 	.word	0x2000153c

08016e3c <_isatty_r>:
 8016e3c:	b538      	push	{r3, r4, r5, lr}
 8016e3e:	4d06      	ldr	r5, [pc, #24]	; (8016e58 <_isatty_r+0x1c>)
 8016e40:	2300      	movs	r3, #0
 8016e42:	4604      	mov	r4, r0
 8016e44:	4608      	mov	r0, r1
 8016e46:	602b      	str	r3, [r5, #0]
 8016e48:	f7ec f98f 	bl	800316a <_isatty>
 8016e4c:	1c43      	adds	r3, r0, #1
 8016e4e:	d102      	bne.n	8016e56 <_isatty_r+0x1a>
 8016e50:	682b      	ldr	r3, [r5, #0]
 8016e52:	b103      	cbz	r3, 8016e56 <_isatty_r+0x1a>
 8016e54:	6023      	str	r3, [r4, #0]
 8016e56:	bd38      	pop	{r3, r4, r5, pc}
 8016e58:	2000153c 	.word	0x2000153c

08016e5c <_lseek_r>:
 8016e5c:	b538      	push	{r3, r4, r5, lr}
 8016e5e:	4d07      	ldr	r5, [pc, #28]	; (8016e7c <_lseek_r+0x20>)
 8016e60:	4604      	mov	r4, r0
 8016e62:	4608      	mov	r0, r1
 8016e64:	4611      	mov	r1, r2
 8016e66:	2200      	movs	r2, #0
 8016e68:	602a      	str	r2, [r5, #0]
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	f7ec f988 	bl	8003180 <_lseek>
 8016e70:	1c43      	adds	r3, r0, #1
 8016e72:	d102      	bne.n	8016e7a <_lseek_r+0x1e>
 8016e74:	682b      	ldr	r3, [r5, #0]
 8016e76:	b103      	cbz	r3, 8016e7a <_lseek_r+0x1e>
 8016e78:	6023      	str	r3, [r4, #0]
 8016e7a:	bd38      	pop	{r3, r4, r5, pc}
 8016e7c:	2000153c 	.word	0x2000153c

08016e80 <__ascii_mbtowc>:
 8016e80:	b082      	sub	sp, #8
 8016e82:	b901      	cbnz	r1, 8016e86 <__ascii_mbtowc+0x6>
 8016e84:	a901      	add	r1, sp, #4
 8016e86:	b142      	cbz	r2, 8016e9a <__ascii_mbtowc+0x1a>
 8016e88:	b14b      	cbz	r3, 8016e9e <__ascii_mbtowc+0x1e>
 8016e8a:	7813      	ldrb	r3, [r2, #0]
 8016e8c:	600b      	str	r3, [r1, #0]
 8016e8e:	7812      	ldrb	r2, [r2, #0]
 8016e90:	1e10      	subs	r0, r2, #0
 8016e92:	bf18      	it	ne
 8016e94:	2001      	movne	r0, #1
 8016e96:	b002      	add	sp, #8
 8016e98:	4770      	bx	lr
 8016e9a:	4610      	mov	r0, r2
 8016e9c:	e7fb      	b.n	8016e96 <__ascii_mbtowc+0x16>
 8016e9e:	f06f 0001 	mvn.w	r0, #1
 8016ea2:	e7f8      	b.n	8016e96 <__ascii_mbtowc+0x16>

08016ea4 <memmove>:
 8016ea4:	4288      	cmp	r0, r1
 8016ea6:	b510      	push	{r4, lr}
 8016ea8:	eb01 0402 	add.w	r4, r1, r2
 8016eac:	d902      	bls.n	8016eb4 <memmove+0x10>
 8016eae:	4284      	cmp	r4, r0
 8016eb0:	4623      	mov	r3, r4
 8016eb2:	d807      	bhi.n	8016ec4 <memmove+0x20>
 8016eb4:	1e43      	subs	r3, r0, #1
 8016eb6:	42a1      	cmp	r1, r4
 8016eb8:	d008      	beq.n	8016ecc <memmove+0x28>
 8016eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ec2:	e7f8      	b.n	8016eb6 <memmove+0x12>
 8016ec4:	4402      	add	r2, r0
 8016ec6:	4601      	mov	r1, r0
 8016ec8:	428a      	cmp	r2, r1
 8016eca:	d100      	bne.n	8016ece <memmove+0x2a>
 8016ecc:	bd10      	pop	{r4, pc}
 8016ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ed6:	e7f7      	b.n	8016ec8 <memmove+0x24>

08016ed8 <__malloc_lock>:
 8016ed8:	4801      	ldr	r0, [pc, #4]	; (8016ee0 <__malloc_lock+0x8>)
 8016eda:	f7fe bf04 	b.w	8015ce6 <__retarget_lock_acquire_recursive>
 8016ede:	bf00      	nop
 8016ee0:	20001530 	.word	0x20001530

08016ee4 <__malloc_unlock>:
 8016ee4:	4801      	ldr	r0, [pc, #4]	; (8016eec <__malloc_unlock+0x8>)
 8016ee6:	f7fe beff 	b.w	8015ce8 <__retarget_lock_release_recursive>
 8016eea:	bf00      	nop
 8016eec:	20001530 	.word	0x20001530

08016ef0 <_realloc_r>:
 8016ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef4:	4680      	mov	r8, r0
 8016ef6:	4614      	mov	r4, r2
 8016ef8:	460e      	mov	r6, r1
 8016efa:	b921      	cbnz	r1, 8016f06 <_realloc_r+0x16>
 8016efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f00:	4611      	mov	r1, r2
 8016f02:	f7ff bb65 	b.w	80165d0 <_malloc_r>
 8016f06:	b92a      	cbnz	r2, 8016f14 <_realloc_r+0x24>
 8016f08:	f7ff faf6 	bl	80164f8 <_free_r>
 8016f0c:	4625      	mov	r5, r4
 8016f0e:	4628      	mov	r0, r5
 8016f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f14:	f000 f842 	bl	8016f9c <_malloc_usable_size_r>
 8016f18:	4284      	cmp	r4, r0
 8016f1a:	4607      	mov	r7, r0
 8016f1c:	d802      	bhi.n	8016f24 <_realloc_r+0x34>
 8016f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016f22:	d812      	bhi.n	8016f4a <_realloc_r+0x5a>
 8016f24:	4621      	mov	r1, r4
 8016f26:	4640      	mov	r0, r8
 8016f28:	f7ff fb52 	bl	80165d0 <_malloc_r>
 8016f2c:	4605      	mov	r5, r0
 8016f2e:	2800      	cmp	r0, #0
 8016f30:	d0ed      	beq.n	8016f0e <_realloc_r+0x1e>
 8016f32:	42bc      	cmp	r4, r7
 8016f34:	4622      	mov	r2, r4
 8016f36:	4631      	mov	r1, r6
 8016f38:	bf28      	it	cs
 8016f3a:	463a      	movcs	r2, r7
 8016f3c:	f7fd f882 	bl	8014044 <memcpy>
 8016f40:	4631      	mov	r1, r6
 8016f42:	4640      	mov	r0, r8
 8016f44:	f7ff fad8 	bl	80164f8 <_free_r>
 8016f48:	e7e1      	b.n	8016f0e <_realloc_r+0x1e>
 8016f4a:	4635      	mov	r5, r6
 8016f4c:	e7df      	b.n	8016f0e <_realloc_r+0x1e>
	...

08016f50 <_read_r>:
 8016f50:	b538      	push	{r3, r4, r5, lr}
 8016f52:	4d07      	ldr	r5, [pc, #28]	; (8016f70 <_read_r+0x20>)
 8016f54:	4604      	mov	r4, r0
 8016f56:	4608      	mov	r0, r1
 8016f58:	4611      	mov	r1, r2
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	602a      	str	r2, [r5, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	f7ec f8ca 	bl	80030f8 <_read>
 8016f64:	1c43      	adds	r3, r0, #1
 8016f66:	d102      	bne.n	8016f6e <_read_r+0x1e>
 8016f68:	682b      	ldr	r3, [r5, #0]
 8016f6a:	b103      	cbz	r3, 8016f6e <_read_r+0x1e>
 8016f6c:	6023      	str	r3, [r4, #0]
 8016f6e:	bd38      	pop	{r3, r4, r5, pc}
 8016f70:	2000153c 	.word	0x2000153c

08016f74 <__ascii_wctomb>:
 8016f74:	b149      	cbz	r1, 8016f8a <__ascii_wctomb+0x16>
 8016f76:	2aff      	cmp	r2, #255	; 0xff
 8016f78:	bf85      	ittet	hi
 8016f7a:	238a      	movhi	r3, #138	; 0x8a
 8016f7c:	6003      	strhi	r3, [r0, #0]
 8016f7e:	700a      	strbls	r2, [r1, #0]
 8016f80:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f84:	bf98      	it	ls
 8016f86:	2001      	movls	r0, #1
 8016f88:	4770      	bx	lr
 8016f8a:	4608      	mov	r0, r1
 8016f8c:	4770      	bx	lr

08016f8e <abort>:
 8016f8e:	b508      	push	{r3, lr}
 8016f90:	2006      	movs	r0, #6
 8016f92:	f000 f833 	bl	8016ffc <raise>
 8016f96:	2001      	movs	r0, #1
 8016f98:	f7ec f8a4 	bl	80030e4 <_exit>

08016f9c <_malloc_usable_size_r>:
 8016f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fa0:	1f18      	subs	r0, r3, #4
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	bfbc      	itt	lt
 8016fa6:	580b      	ldrlt	r3, [r1, r0]
 8016fa8:	18c0      	addlt	r0, r0, r3
 8016faa:	4770      	bx	lr

08016fac <_raise_r>:
 8016fac:	291f      	cmp	r1, #31
 8016fae:	b538      	push	{r3, r4, r5, lr}
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	460d      	mov	r5, r1
 8016fb4:	d904      	bls.n	8016fc0 <_raise_r+0x14>
 8016fb6:	2316      	movs	r3, #22
 8016fb8:	6003      	str	r3, [r0, #0]
 8016fba:	f04f 30ff 	mov.w	r0, #4294967295
 8016fbe:	bd38      	pop	{r3, r4, r5, pc}
 8016fc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016fc2:	b112      	cbz	r2, 8016fca <_raise_r+0x1e>
 8016fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016fc8:	b94b      	cbnz	r3, 8016fde <_raise_r+0x32>
 8016fca:	4620      	mov	r0, r4
 8016fcc:	f000 f830 	bl	8017030 <_getpid_r>
 8016fd0:	462a      	mov	r2, r5
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fda:	f000 b817 	b.w	801700c <_kill_r>
 8016fde:	2b01      	cmp	r3, #1
 8016fe0:	d00a      	beq.n	8016ff8 <_raise_r+0x4c>
 8016fe2:	1c59      	adds	r1, r3, #1
 8016fe4:	d103      	bne.n	8016fee <_raise_r+0x42>
 8016fe6:	2316      	movs	r3, #22
 8016fe8:	6003      	str	r3, [r0, #0]
 8016fea:	2001      	movs	r0, #1
 8016fec:	e7e7      	b.n	8016fbe <_raise_r+0x12>
 8016fee:	2400      	movs	r4, #0
 8016ff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	4798      	blx	r3
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	e7e0      	b.n	8016fbe <_raise_r+0x12>

08016ffc <raise>:
 8016ffc:	4b02      	ldr	r3, [pc, #8]	; (8017008 <raise+0xc>)
 8016ffe:	4601      	mov	r1, r0
 8017000:	6818      	ldr	r0, [r3, #0]
 8017002:	f7ff bfd3 	b.w	8016fac <_raise_r>
 8017006:	bf00      	nop
 8017008:	20000244 	.word	0x20000244

0801700c <_kill_r>:
 801700c:	b538      	push	{r3, r4, r5, lr}
 801700e:	4d07      	ldr	r5, [pc, #28]	; (801702c <_kill_r+0x20>)
 8017010:	2300      	movs	r3, #0
 8017012:	4604      	mov	r4, r0
 8017014:	4608      	mov	r0, r1
 8017016:	4611      	mov	r1, r2
 8017018:	602b      	str	r3, [r5, #0]
 801701a:	f7ec f853 	bl	80030c4 <_kill>
 801701e:	1c43      	adds	r3, r0, #1
 8017020:	d102      	bne.n	8017028 <_kill_r+0x1c>
 8017022:	682b      	ldr	r3, [r5, #0]
 8017024:	b103      	cbz	r3, 8017028 <_kill_r+0x1c>
 8017026:	6023      	str	r3, [r4, #0]
 8017028:	bd38      	pop	{r3, r4, r5, pc}
 801702a:	bf00      	nop
 801702c:	2000153c 	.word	0x2000153c

08017030 <_getpid_r>:
 8017030:	f7ec b840 	b.w	80030b4 <_getpid>

08017034 <sqrt>:
 8017034:	b538      	push	{r3, r4, r5, lr}
 8017036:	ed2d 8b02 	vpush	{d8}
 801703a:	ec55 4b10 	vmov	r4, r5, d0
 801703e:	f000 f825 	bl	801708c <__ieee754_sqrt>
 8017042:	4622      	mov	r2, r4
 8017044:	462b      	mov	r3, r5
 8017046:	4620      	mov	r0, r4
 8017048:	4629      	mov	r1, r5
 801704a:	eeb0 8a40 	vmov.f32	s16, s0
 801704e:	eef0 8a60 	vmov.f32	s17, s1
 8017052:	f7e9 fd43 	bl	8000adc <__aeabi_dcmpun>
 8017056:	b990      	cbnz	r0, 801707e <sqrt+0x4a>
 8017058:	2200      	movs	r2, #0
 801705a:	2300      	movs	r3, #0
 801705c:	4620      	mov	r0, r4
 801705e:	4629      	mov	r1, r5
 8017060:	f7e9 fd14 	bl	8000a8c <__aeabi_dcmplt>
 8017064:	b158      	cbz	r0, 801707e <sqrt+0x4a>
 8017066:	f7fc ffc3 	bl	8013ff0 <__errno>
 801706a:	2321      	movs	r3, #33	; 0x21
 801706c:	6003      	str	r3, [r0, #0]
 801706e:	2200      	movs	r2, #0
 8017070:	2300      	movs	r3, #0
 8017072:	4610      	mov	r0, r2
 8017074:	4619      	mov	r1, r3
 8017076:	f7e9 fbc1 	bl	80007fc <__aeabi_ddiv>
 801707a:	ec41 0b18 	vmov	d8, r0, r1
 801707e:	eeb0 0a48 	vmov.f32	s0, s16
 8017082:	eef0 0a68 	vmov.f32	s1, s17
 8017086:	ecbd 8b02 	vpop	{d8}
 801708a:	bd38      	pop	{r3, r4, r5, pc}

0801708c <__ieee754_sqrt>:
 801708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017090:	ec55 4b10 	vmov	r4, r5, d0
 8017094:	4e55      	ldr	r6, [pc, #340]	; (80171ec <__ieee754_sqrt+0x160>)
 8017096:	43ae      	bics	r6, r5
 8017098:	ee10 0a10 	vmov	r0, s0
 801709c:	ee10 3a10 	vmov	r3, s0
 80170a0:	462a      	mov	r2, r5
 80170a2:	4629      	mov	r1, r5
 80170a4:	d110      	bne.n	80170c8 <__ieee754_sqrt+0x3c>
 80170a6:	ee10 2a10 	vmov	r2, s0
 80170aa:	462b      	mov	r3, r5
 80170ac:	f7e9 fa7c 	bl	80005a8 <__aeabi_dmul>
 80170b0:	4602      	mov	r2, r0
 80170b2:	460b      	mov	r3, r1
 80170b4:	4620      	mov	r0, r4
 80170b6:	4629      	mov	r1, r5
 80170b8:	f7e9 f8c0 	bl	800023c <__adddf3>
 80170bc:	4604      	mov	r4, r0
 80170be:	460d      	mov	r5, r1
 80170c0:	ec45 4b10 	vmov	d0, r4, r5
 80170c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170c8:	2d00      	cmp	r5, #0
 80170ca:	dc10      	bgt.n	80170ee <__ieee754_sqrt+0x62>
 80170cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80170d0:	4330      	orrs	r0, r6
 80170d2:	d0f5      	beq.n	80170c0 <__ieee754_sqrt+0x34>
 80170d4:	b15d      	cbz	r5, 80170ee <__ieee754_sqrt+0x62>
 80170d6:	ee10 2a10 	vmov	r2, s0
 80170da:	462b      	mov	r3, r5
 80170dc:	ee10 0a10 	vmov	r0, s0
 80170e0:	f7e9 f8aa 	bl	8000238 <__aeabi_dsub>
 80170e4:	4602      	mov	r2, r0
 80170e6:	460b      	mov	r3, r1
 80170e8:	f7e9 fb88 	bl	80007fc <__aeabi_ddiv>
 80170ec:	e7e6      	b.n	80170bc <__ieee754_sqrt+0x30>
 80170ee:	1512      	asrs	r2, r2, #20
 80170f0:	d074      	beq.n	80171dc <__ieee754_sqrt+0x150>
 80170f2:	07d4      	lsls	r4, r2, #31
 80170f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80170f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80170fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8017100:	bf5e      	ittt	pl
 8017102:	0fda      	lsrpl	r2, r3, #31
 8017104:	005b      	lslpl	r3, r3, #1
 8017106:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801710a:	2400      	movs	r4, #0
 801710c:	0fda      	lsrs	r2, r3, #31
 801710e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8017112:	107f      	asrs	r7, r7, #1
 8017114:	005b      	lsls	r3, r3, #1
 8017116:	2516      	movs	r5, #22
 8017118:	4620      	mov	r0, r4
 801711a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801711e:	1886      	adds	r6, r0, r2
 8017120:	428e      	cmp	r6, r1
 8017122:	bfde      	ittt	le
 8017124:	1b89      	suble	r1, r1, r6
 8017126:	18b0      	addle	r0, r6, r2
 8017128:	18a4      	addle	r4, r4, r2
 801712a:	0049      	lsls	r1, r1, #1
 801712c:	3d01      	subs	r5, #1
 801712e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8017132:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8017136:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801713a:	d1f0      	bne.n	801711e <__ieee754_sqrt+0x92>
 801713c:	462a      	mov	r2, r5
 801713e:	f04f 0e20 	mov.w	lr, #32
 8017142:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017146:	4281      	cmp	r1, r0
 8017148:	eb06 0c05 	add.w	ip, r6, r5
 801714c:	dc02      	bgt.n	8017154 <__ieee754_sqrt+0xc8>
 801714e:	d113      	bne.n	8017178 <__ieee754_sqrt+0xec>
 8017150:	459c      	cmp	ip, r3
 8017152:	d811      	bhi.n	8017178 <__ieee754_sqrt+0xec>
 8017154:	f1bc 0f00 	cmp.w	ip, #0
 8017158:	eb0c 0506 	add.w	r5, ip, r6
 801715c:	da43      	bge.n	80171e6 <__ieee754_sqrt+0x15a>
 801715e:	2d00      	cmp	r5, #0
 8017160:	db41      	blt.n	80171e6 <__ieee754_sqrt+0x15a>
 8017162:	f100 0801 	add.w	r8, r0, #1
 8017166:	1a09      	subs	r1, r1, r0
 8017168:	459c      	cmp	ip, r3
 801716a:	bf88      	it	hi
 801716c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8017170:	eba3 030c 	sub.w	r3, r3, ip
 8017174:	4432      	add	r2, r6
 8017176:	4640      	mov	r0, r8
 8017178:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801717c:	f1be 0e01 	subs.w	lr, lr, #1
 8017180:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8017184:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017188:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801718c:	d1db      	bne.n	8017146 <__ieee754_sqrt+0xba>
 801718e:	430b      	orrs	r3, r1
 8017190:	d006      	beq.n	80171a0 <__ieee754_sqrt+0x114>
 8017192:	1c50      	adds	r0, r2, #1
 8017194:	bf13      	iteet	ne
 8017196:	3201      	addne	r2, #1
 8017198:	3401      	addeq	r4, #1
 801719a:	4672      	moveq	r2, lr
 801719c:	f022 0201 	bicne.w	r2, r2, #1
 80171a0:	1063      	asrs	r3, r4, #1
 80171a2:	0852      	lsrs	r2, r2, #1
 80171a4:	07e1      	lsls	r1, r4, #31
 80171a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80171aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80171ae:	bf48      	it	mi
 80171b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80171b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80171b8:	4614      	mov	r4, r2
 80171ba:	e781      	b.n	80170c0 <__ieee754_sqrt+0x34>
 80171bc:	0ad9      	lsrs	r1, r3, #11
 80171be:	3815      	subs	r0, #21
 80171c0:	055b      	lsls	r3, r3, #21
 80171c2:	2900      	cmp	r1, #0
 80171c4:	d0fa      	beq.n	80171bc <__ieee754_sqrt+0x130>
 80171c6:	02cd      	lsls	r5, r1, #11
 80171c8:	d50a      	bpl.n	80171e0 <__ieee754_sqrt+0x154>
 80171ca:	f1c2 0420 	rsb	r4, r2, #32
 80171ce:	fa23 f404 	lsr.w	r4, r3, r4
 80171d2:	1e55      	subs	r5, r2, #1
 80171d4:	4093      	lsls	r3, r2
 80171d6:	4321      	orrs	r1, r4
 80171d8:	1b42      	subs	r2, r0, r5
 80171da:	e78a      	b.n	80170f2 <__ieee754_sqrt+0x66>
 80171dc:	4610      	mov	r0, r2
 80171de:	e7f0      	b.n	80171c2 <__ieee754_sqrt+0x136>
 80171e0:	0049      	lsls	r1, r1, #1
 80171e2:	3201      	adds	r2, #1
 80171e4:	e7ef      	b.n	80171c6 <__ieee754_sqrt+0x13a>
 80171e6:	4680      	mov	r8, r0
 80171e8:	e7bd      	b.n	8017166 <__ieee754_sqrt+0xda>
 80171ea:	bf00      	nop
 80171ec:	7ff00000 	.word	0x7ff00000

080171f0 <_init>:
 80171f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f2:	bf00      	nop
 80171f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171f6:	bc08      	pop	{r3}
 80171f8:	469e      	mov	lr, r3
 80171fa:	4770      	bx	lr

080171fc <_fini>:
 80171fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fe:	bf00      	nop
 8017200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017202:	bc08      	pop	{r3}
 8017204:	469e      	mov	lr, r3
 8017206:	4770      	bx	lr
